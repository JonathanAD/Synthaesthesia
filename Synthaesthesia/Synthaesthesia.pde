// Synthesthesia
// MIDI music visualizer
// By Jonathan Arias
// MIDIBus by sparks - http://www.smallbutdigital.com/themidibus.php
// Starfield 3D by JimBrown - https://www.processing.org/discourse/beta/num_1209965886.html

// Instruments:         Channel   Index
  // Piano                 1  ----- 0  
  // Chromatic Percussion  2  ----- 1                              
  // Organ                 3  ----- 2                
  // Guitar                4  ----- 3                
  // Bass                  5  ----- 4              
  // Strings               6  ----- 5                  
  // Ensemble              7  ----- 6                  
  // Brass                 8  ----- 7                
  // Reed                  9  ----- 8              
  // Pipe                  11 ----- 10              
  // Synth Lead            12 ----- 11                    
  // Synth Pad             13 ----- 12                    
  // Synth Effects         14 ----- 13                        
  // Ethnic                15 ----- 14                
  // Percussive            16 ----- 15                    
  // Sound effects         N/A ---- N/A                        
  // Percussion            10 ----- 9                   
                                    
// Import libraries
import themidibus.*;  // MIDI interface bridge
import queasycam.* ;  // Free view camera

// Create instances
  // Debugging
  Debug                  debug                 ;  // Debug
  // Background
  Background             background            ;  // Background
  // Camera
  QueasyCam              cam                   ;  // Dynamic camera
  // MIDI
  MidiBus                myBus                 ;  // MIDIBus
  // Instrument graphics
  PianoGFX               pianogfx              ;  // Piano graphics
  ChromaticPercussionGFX chromaticpercussiongfx;  // Chromatic Percussion graphics
  OrganGFX               organgfx              ;  // Organ graphics
  // GuitarGFX              guitargfx             ;  // Guitar graphics        
  // BassGFX                bassgfx               ;  // Bass graphics      
  // StringsGFX             stringsgfx            ;  // Strings graphics         
  // EnsembleGFX            ensemblegfx           ;  // Ensemble graphics          
  // BrassGFX               brassgfx              ;  // Brass graphics       
  // ReedGFX                reedgfx               ;  // Reed graphics      
  // PipeGFX                pipegfx               ;  // Pipe graphics      
  // SynthLeadGFX           synthleadgfx          ;  // Synth Lead graphics           
  // SynthPadGFX            synthpadgfx           ;  // Synth Pad graphics          
  // SynthEffectsGFX        syntheffectsgfx       ;  // Synth Effects graphics              
  // EthnicGFX              ethnicgfx             ;  // Ethnic graphics        
  // PercussiveGFX          percussivegfx         ;  // Percussive graphics            
  // SoundEffectsGFX        soundeffectsgfx       ;  // Sound effects graphics              
  // PercussionGFX          percussiongfx         ;  // Percussion graphics            

// Declare and initialize global variable arrays
  //MIDI message state
  boolean[] ChannelIsActive                   = new boolean[128];
  boolean[] PianoPitchIsActive                = new boolean[128];
  boolean[] ChromaticPercussionPitchIsActive  = new boolean[128];
  boolean[] OrganPitchIsActive                = new boolean[128];
  // boolean[] GuitarPitchIsActive               = new boolean[128];
  // boolean[] BassPitchIsActive                 = new boolean[128];
  // boolean[] StringsPitchIsActive              = new boolean[128];
  // boolean[] EnsemblePitchIsActive             = new boolean[128];
  // boolean[] BrassPitchIsActive                = new boolean[128];
  // boolean[] ReedPitchIsActive                 = new boolean[128];
  // boolean[] PipePitchIsActive                 = new boolean[128];
  // boolean[] SynthLeadPitchIsActive            = new boolean[128];
  // boolean[] SynthPadPitchIsActive             = new boolean[128];
  // boolean[] SynthEffectsPitchIsActive         = new boolean[128];
  // boolean[] EthnicPitchIsActive               = new boolean[128];
  // boolean[] PercussivePitchIsActive           = new boolean[128];
  // boolean[] SoundEffectsPitchIsActive         = new boolean[128];
  // boolean[] PercussionPitchIsActive           = new boolean[128];
  // MIDI variables mapped to attributes
  int[] PitchHues                             = new int[12];
  // MIDI octave color attributes
  int[] OctaveSaturations                     = new int[11];
  int[] OctaveBrightnesses                    = new int[11];
  // MIDI instrument note pitches mapped to coordinates
    // Note pitch to X coordinates
    float[] PianoPitchX                       = new float[128];
    float[] ChromaticPercussionPitchX         = new float[128];
    float[] OrganPitchX                       = new float[128];
    // float[] GuitarPitchX                      = new float[128];
    // float[] BassPitchX                        = new float[128];
    // float[] StringsPitchX                     = new float[128];
    // float[] EnsemblePitchX                    = new float[128];
    // float[] BrassPitchX                       = new float[128];
    // float[] ReedPitchX                        = new float[128];
    // float[] PipePitchX                        = new float[128];
    // float[] SynthLeadPitchX                   = new float[128];
    // float[] SynthPadPitchX                    = new float[128];
    // float[] SynthEffectsPitchX                = new float[128];
    // float[] EthnicPitchX                      = new float[128];
    // float[] PercussivePitchX                  = new float[128];
    // float[] SoundEffectsPitchX                = new float[128];
    // float[] PercussionPitchX                  = new float[128];
    // Note velocity to Y coordinates
    float[] PianoVelocityY                    = new float[128];
    float[] ChromaticPercussionVelocityY      = new float[128];
    float[] OrganVelocityY                    = new float[128];
    // float[] GuitarVelocityY                   = new float[128];
    // float[] BassVelocityY                     = new float[128];
    // float[] StringsVelocityY                  = new float[128];
    // float[] EnsembleVelocityY                 = new float[128];
    // float[] BrassVelocityY                    = new float[128];
    // float[] ReedVelocityY                     = new float[128];
    // float[] PipeVelocityY                     = new float[128];
    // float[] SynthLeadVelocityY                = new float[128];
    // float[] SynthPadVelocityY                 = new float[128];
    // float[] SynthEffectsVelocityY             = new float[128];
    // float[] EthnicVelocityY                   = new float[128];
    // float[] PercussiveVelocityY               = new float[128];
    // float[] SoundEffectsVelocityY             = new float[128];
    // float[] PercussionVelocityY               = new float[128];
    //Note velocity to transparency
    float[] PianoVelocityAlpha                = new float[128];
    float[] ChromaticPercussionVelocityAlpha  = new float[128];
    float[] OrganVelocityAlpha                = new float[128];
    // float[] GuitarVelocityAlpha               = new float[128];
    // float[] BassVelocityAlpha                 = new float[128];
    // float[] StringsVelocityAlpha              = new float[128];
    // float[] EnsembleVelocityAlpha             = new float[128];
    // float[] BrassVelocityAlpha                = new float[128];
    // float[] ReedVelocityAlpha                 = new float[128];
    // float[] PipeVelocityAlpha                 = new float[128];
    // float[] SynthLeadVelocityAlpha            = new float[128];
    // float[] SynthPadVelocityAlpha             = new float[128];
    // float[] SynthEffectsVelocityAlpha         = new float[128];
    // float[] EthnicVelocityAlpha               = new float[128];
    // float[] PercussiveVelocityAlpha           = new float[128];
    // float[] SoundEffectsVelocityAlpha         = new float[128];
    // float[] PercussionVelocityAlpha           = new float[128];

// Declare and initialize global Variables
  // MIDI
  int Channel          =   -1; // Global Channel
  int Pitch            =   -1; // Global Pitch
  int Velocity         =   -1; // Global Velocity
  float PitchScaleX    =    0; // Note pitch mapped to window width
  float VelocityScaleY =    0; // Note velocity mapped to window height
  // Playback
  float Tempo          =  120; // Speed at which objects will move towards the camera
  // 3D
  float Depth          = -750; // 3D object starting position
  int   GeometryDetail =   36; // Resolution of 3D objects
  // Piano graphics
  float[] tubeX = new float[GeometryDetail];
  float[] tubeY = new float[GeometryDetail];
  float PianoSpinY = 0;
  
  // Color textures
  PImage[] PianoNoteColor               = new PImage[128];
  PImage[] PianoNoteColorSide           = new PImage[128];
  PImage[] ChromaticPercussionNoteColor = new PImage[128];
  PImage[] OrganNoteColor               = new PImage[128];
  // PImage[] GuitarNoteColor              = new PImage[128];
  // PImage[] BassNoteColor                = new PImage[128];
  // PImage[] StringsNoteColor             = new PImage[128];
  // PImage[] EnsembleNoteColor            = new PImage[128];
  // PImage[] BrassNoteColor               = new PImage[128];
  // PImage[] ReedNoteColor                = new PImage[128];
  // PImage[] PipeNoteColor                = new PImage[128];
  // PImage[] SynthLeadNoteColor           = new PImage[128];
  // PImage[] SynthPadNoteColor            = new PImage[128];
  // PImage[] SynthEffectsNoteColor        = new PImage[128];
  // PImage[] EthnicNoteColor              = new PImage[128];
  // PImage[] PercussiveNoteColor          = new PImage[128];
  // PImage[] SoundEffectsNoteColor        = new PImage[128];
  // PImage[] PercussionNoteColor          = new PImage[128];

  // Instrument masks
  PImage PianoMask;
  PImage PianoMaskSide;
  PImage ChromaticPercussionMask;
  // PImage OrganMask;
  PImage[] OrganMask                    = new PImage[60];
  // PImage GuitarMask;
  // PImage BassMask;
  // PImage StringsMask;
  // PImage EnsembleMask;
  // PImage BrassMask;
  // PImage ReedMask;
  // PImage PipeMask;
  // PImage SynthLeadMask;
  // PImage SynthPadMask;
  // PImage SynthEffectsMask;
  // PImage EthnicMask;
  // PImage PercussiveMask;
  // PImage SoundEffectsMask;
  // PImage PercussionMask;

// Animation
  // Vibration
  float SineDiameter  = 10;
  float SineAnglem1   =  0;
  float SineAngle0    =  0;
  float SineAngle1    =  0;
  float SineAngle2    =  0;
  float SineAngle3    =  0;
  float SineAngle4    =  0;
  float SineAngle5    =  0;
  float SineAngle6    =  0;
  float SineAngle7    =  0;
  float SineAngle8    =  0;
  float SineAngle9    =  0;
  float SineDepthm1   =  0;
  float SineDepth0    =  0;
  float SineDepth1    =  0;
  float SineDepth2    =  0;
  float SineDepth3    =  0;
  float SineDepth4    =  0;
  float SineDepth5    =  0;
  float SineDepth6    =  0;
  float SineDepth7    =  0;
  float SineDepth8    =  0;
  float SineDepth9    =  0;
  // Frame sequence
  int MaskOrganFrame = 0;
// Shapes
  // Sky dome
  PImage sky;
  PShape dome;
  float sphereRotateX = 0;
  float sphereRotateY = 1;
  float sphereRotateZ = 0;
  int cX = width/2;   //Display center X-Axish
  int cY = height/2;  //Display center Y-Axis
  int mX = mouseX;    //Mouse position X-Axis
  int mY = mouseY;    //Mouse position Y-Axis
  // Grid
  PShape Line1;
  PShape Line2;
  PShape Line3;
  PShape Line4;
  int Line1Z = -1024;
  int Line2Z = -256;
  int Line3Z = -384;
  int Line4Z = -512;
  // 3D Starfield
  int numstars=400;
  final int SPREAD=64;
  int CX,CY;
  final float SPEED=1.9;
  Star[] s = new Star[numstars];
 
// Setup
void setup() {
//  size(950, 540);        // 1/4 1080p
  size(950, 501, P3D);     // 1/4 1080p 3D
//  size(1280, 720);       // 720p 2D
//  size(1280, 720, P3D);  // 720p 3D
//  size(1920, 1080, P3D);  // 1080p 3D
//  smooth(8);             // 8X Antialiasing
  frameRate(120);

//  hint(DISABLE_OPTIMIZED_STROKE);  // Unused fix
  hint(DISABLE_DEPTH_TEST);          // Fixes Z-fighting and alpha overlapping
  
  lights();
  
  //Background - Black
  background(0);
  
  //Camera
//  cam = new QueasyCam(this);
//  cam.speed = 2;                    //Default is 2
//  cam.sensitivity = 0.25;              //Default is 0.25
  
  //MIDI data
  MidiBus.list();                     // List available Midi devices
  myBus = new MidiBus(this, 0, -1);   // Create a new MidiBus using the device names to select the Midi input and output devices respectively.

//Shapes
  //Sky dome
  dome = createShape(SPHERE, 2500);
  sky  = loadImage("sky.jpg");
  dome.setTexture(sky);
  
  //Starfield
  CX=width/2 ; CY=height/2;
  // s = new Star[numstars];
  for(int i=0;i<numstars;i++){
    s[i]=new Star();
    s[i].SetPosition();
  }
  
  //Grid
  Line1 = createShape();
    Line1.beginShape(LINES);
      Line1.stroke(255);
      Line1.vertex(width, height, 0);
      Line1.vertex(0, height, 0);      
    Line1.endShape();
  Line2 = createShape();
    Line2.beginShape(LINES);
      Line2.stroke(127);
      Line2.vertex(width, height, 0);
      Line2.vertex(0, height, 0);      
    Line2.endShape();
  Line3 = createShape();
    Line3.beginShape(LINES);
      Line3.stroke(127);
      Line3.vertex(width, height, 0);
      Line3.vertex(0, height, 0);      
    Line3.endShape();
  Line4 = createShape();
    Line4.beginShape(LINES);
      Line4.stroke(127);
      Line4.vertex(width, height, 0);
      Line4.vertex(0, height, 0);      
    Line4.endShape(); 

  //Shape variables
  //Piano graphics
  float CylinderAngle = 370.5 / GeometryDetail;
  for (int i = 0; i < GeometryDetail; i++) {
    tubeX[i] = cos(radians(i * CylinderAngle));
    tubeY[i] = sin(radians(i * CylinderAngle));
  }
  
  //Call variable methods
  OctaveVariables();
  ColorTextures();
  ColorTexturesMasks();
}

//Draw
void draw() {
  debug = new Debug();
//  debug.framerate();
  debug.clickToPrintVariables();

  //Sky
   noStroke();
   rotateY(radians(sphereRotateY));
   noStroke();
   shape(dome);
 //  sphereRotateY = sphereRotateY+0.05; //Animation/Gyro drift fix
  
//  //Starfield
//  for(int i=0;i<numstars;i++){
//    s[i].DrawStar();
//  }
  
  //Grids
//  translate(0, 0, Line1Z);
//  shape(Line1);
//  translate(0, 0, Line2Z);
//  shape(Line2);
//  translate(0, 0, Line3Z);
//  shape(Line3);
//  translate(0, 0, Line4Z); 
//  shape(Line4);
//  if (Line1Z < 2048) {
//    Line1Z = Line1Z + 2;
//  }
//  else if (Line1Z >= 0) {
//    Line1Z = -250;
//  }
  
  //Animation
    //Sine wave - Adapted from https://processing.org/examples/sine.html
    SineDepthm1 = 200 + (sin(SineAnglem1 + PI) * SineDiameter/2) + SineDiameter/2; SineAnglem1 +=  0.03125;
    SineDepth0  = 200 + (sin(SineAngle0  + PI) * SineDiameter/2) + SineDiameter/2; SineAngle0  +=  0.0625;
    SineDepth1  = 200 + (sin(SineAngle1  + PI) * SineDiameter/2) + SineDiameter/2; SineAngle1  +=  0.125;
    SineDepth2  = 200 + (sin(SineAngle2  + PI) * SineDiameter/2) + SineDiameter/2; SineAngle2  +=  0.25;
    SineDepth3  = 200 + (sin(SineAngle3  + PI) * SineDiameter/2) + SineDiameter/2; SineAngle3  +=  0.5;
    SineDepth4  = 200 + (sin(SineAngle4  + PI) * SineDiameter/2) + SineDiameter/2; SineAngle4  +=  1;
    SineDepth5  = 200 + (sin(SineAngle5  + PI) * SineDiameter/2) + SineDiameter/2; SineAngle5  +=  2;
    SineDepth6  = 200 + (sin(SineAngle6  + PI) * SineDiameter/2) + SineDiameter/2; SineAngle6  +=  4;
    SineDepth7  = 200 + (sin(SineAngle7  + PI) * SineDiameter/2) + SineDiameter/2; SineAngle7  +=  8;
    SineDepth8  = 200 + (sin(SineAngle8  + PI) * SineDiameter/2) + SineDiameter/2; SineAngle8  += 16;
    SineDepth9  = 200 + (sin(SineAngle9  + PI) * SineDiameter/2) + SineDiameter/2; SineAngle9  += 32;

    //Call Instrument GFX methods
    PianoGFXDisplay();
    ChromaticPercussionGFXDisplay();
    OrganGFXDisplay();
    // GuitarGFXDisplay();
    // BassGFXDisplay();
    // StringsGFXDisplay();
    // EnsembleGFXDisplay();
    // BrassGFXDisplay();
    // ReedGFXDisplay();
    // PipeGFXDisplay();
    // SynthLeadGFXDisplay();
    // SynthPadGFXDisplay();
    // SynthEffectsGFXDisplay();
    // EthnicGFXDisplay();
    // PercussiveGFXDisplay();
    // SoundEffectsGFXDisplay();
    // PercussionGFXDisplay();
    
    if (MaskOrganFrame >= 0 && MaskOrganFrame < 59) {
      MaskOrganFrame++;
    } else {
      MaskOrganFrame = 0;
    }

    //Organ
  OrganNoteColor[0].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[1].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[2].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[3].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[4].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[5].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[6].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[7].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[8].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[9].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[10].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[11].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[12].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[13].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[14].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[15].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[16].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[17].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[18].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[19].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[20].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[21].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[22].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[23].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[24].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[25].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[26].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[27].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[28].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[29].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[30].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[31].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[32].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[33].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[34].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[35].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[36].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[37].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[38].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[39].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[40].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[41].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[42].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[43].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[44].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[45].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[46].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[47].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[48].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[49].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[50].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[51].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[52].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[53].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[54].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[55].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[56].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[57].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[58].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[59].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[60].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[61].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[62].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[63].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[64].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[65].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[66].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[67].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[68].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[69].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[70].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[71].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[72].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[73].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[74].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[75].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[76].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[77].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[78].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[79].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[80].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[81].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[82].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[83].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[84].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[85].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[86].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[87].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[88].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[89].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[90].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[91].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[92].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[93].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[94].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[95].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[96].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[97].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[98].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[99].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[100].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[101].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[102].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[103].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[104].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[105].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[106].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[107].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[108].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[109].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[110].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[111].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[112].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[113].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[114].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[115].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[116].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[117].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[118].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[119].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[120].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[121].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[122].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[123].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[124].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[125].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[126].mask(OrganMask[MaskOrganFrame]);
  OrganNoteColor[127].mask(OrganMask[MaskOrganFrame]);
}
//Note on event
void noteOn(int channel, int pitch, int velocity) {
  
  //Update global variables
  Channel  = channel;
  Pitch    = pitch;
  Velocity = velocity;
  
  //Print global variables
  debug = new Debug();
  debug.noteOnReturn();
  
  //Call Instrument Note On variable update methods
  PianoChannelNoteOn();
  ChromaticPercussionChannelNoteOn();
  OrganChannelNoteOn();
  // GuitarChannelNoteOn();
  // BassChannelNoteOn();
  // StringsChannelNoteOn();
  // EnsembleChannelNoteOn();
  // BrassChannelNoteOn();
  // ReedChannelNoteOn();
  // PipeChannelNoteOn();
  // SynthLeadChannelNoteOn();
  // SynthPadChannelNoteOn();
  // SynthEffectsChannelNoteOn();
  // EthnicChannelNoteOn();
  // PercussiveChannelNoteOn();
  // SoundEffectsChannelNoteOn();
  // PercussionChannelNoteOn();
}

//Note off event
void noteOff(int channel, int pitch, int velocity) {
  
  //Update global variables
  Channel = channel;
  Pitch = pitch;
  Velocity = velocity;
  
  debug = new Debug();
  debug.noteOffReturn();

  //Call Instrument Note Off variable update methods
  PianoChannelNoteOff();
  ChromaticPercussionChannelNoteOff();
  OrganChannelNoteOff();
  // GuitarChannelNoteOff();
  // BassChannelNoteOff();
  // StringsChannelNoteOff();
  // EnsembleChannelNoteOff();
  // BrassChannelNoteOff();
  // ReedChannelNoteOff();
  // PipeChannelNoteOff();
  // SynthLeadChannelNoteOff();
  // SynthPadChannelNoteOff();
  // SynthEffectsChannelNoteOff();
  // EthnicChannelNoteOff();
  // PercussiveChannelNoteOff();
  // SoundEffectsChannelNoteOff();
  // PercussionChannelNoteOff();
}

void OctaveVariables(){
  //Note-to-color correspondence (In degrees, out of 360)
  PitchHues[0]  =   0; // C  - Red
  PitchHues[1]  = 210; // C# - Blue-Cyan
  PitchHues[2]  =  60; // D  - Yellow
  PitchHues[3]  = 270; // D# - Blue-Magenta
  PitchHues[4]  = 120; // E  - Green
  PitchHues[5]  = 330; // F  - Red-Magenta
  PitchHues[6]  = 180; // F# - Cyan
  PitchHues[7]  =  30; // G  - Orange
  PitchHues[8]  = 240; // G# - Blue
  PitchHues[9]  =  90; // A  - Yellow-Green
  PitchHues[10] = 300; // A# - Magenta
  PitchHues[11] = 150; // B  - Green-Cyans
  //Octave-to-saturation correspondence (out of 100)
  OctaveSaturations[0]  =  95; // Octave -1 saturation
  OctaveSaturations[1]  = 127; // Octave  0 saturation
  OctaveSaturations[2]  = 159; // Octave  1 saturation
  OctaveSaturations[3]  = 191; // Octave  2 saturation
  OctaveSaturations[4]  = 223; // Octave  3 saturation
  OctaveSaturations[5]  = 255; // Octave  4 saturation
  OctaveSaturations[6]  = 191; // Octave  5 saturation
  OctaveSaturations[7]  = 127; // Octave  6 saturation
  OctaveSaturations[8]  =  63; // Octave  7 saturation
  OctaveSaturations[9]  =   0; // Octave  8 saturation
  OctaveSaturations[10] =   0; // Octave  9 saturation
  //Octave-to-brightness correspondence (out of 100)
  OctaveBrightnesses[0]  =   0; // Octave -1 brightness
  OctaveBrightnesses[1]  =   0; // Octave  0 brightness
  OctaveBrightnesses[2]  =  31; // Octave  1 brightness
  OctaveBrightnesses[3]  =  63; // Octave  2 brightness
  OctaveBrightnesses[4]  =  95; // Octave  3 brightness
  OctaveBrightnesses[5]  = 127; // Octave  4 brightness
  OctaveBrightnesses[6]  = 191; // Octave  5 brightness
  OctaveBrightnesses[7]  = 255; // Octave  6 brightness
  OctaveBrightnesses[8]  = 255; // Octave  7 brightness
  OctaveBrightnesses[9]  = 255; // Octave  8 brightness
  OctaveBrightnesses[10] = 255; // Octave  9 brightness
}

void ColorTextures(){
//Color textures 
  //Piano
  PianoNoteColor[0]   = loadImage("Octavem1CColor.png");
  PianoNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
  PianoNoteColor[2]   = loadImage("Octavem1DColor.png");
  PianoNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
  PianoNoteColor[4]   = loadImage("Octavem1EColor.png");
  PianoNoteColor[5]   = loadImage("Octavem1FColor.png");
  PianoNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
  PianoNoteColor[7]   = loadImage("Octavem1GColor.png");
  PianoNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
  PianoNoteColor[9]   = loadImage("Octavem1AColor.png");
  PianoNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
  PianoNoteColor[11]  = loadImage("Octavem1BColor.png");
  PianoNoteColor[12]  = loadImage("Octave0CColor.png");
  PianoNoteColor[13]  = loadImage("Octave0CSharpColor.png");
  PianoNoteColor[14]  = loadImage("Octave0DColor.png");
  PianoNoteColor[15]  = loadImage("Octave0DSharpColor.png");
  PianoNoteColor[16]  = loadImage("Octave0EColor.png");
  PianoNoteColor[17]  = loadImage("Octave0FColor.png");
  PianoNoteColor[18]  = loadImage("Octave0FSharpColor.png");
  PianoNoteColor[19]  = loadImage("Octave0GColor.png");
  PianoNoteColor[20]  = loadImage("Octave0GSharpColor.png");
  PianoNoteColor[21]  = loadImage("Octave0AColor.png");
  PianoNoteColor[22]  = loadImage("Octave0ASharpColor.png");
  PianoNoteColor[23]  = loadImage("Octave0BColor.png");
  PianoNoteColor[24]  = loadImage("Octave1CColor.png");
  PianoNoteColor[25]  = loadImage("Octave1CSharpColor.png");
  PianoNoteColor[26]  = loadImage("Octave1DColor.png");
  PianoNoteColor[27]  = loadImage("Octave1DSharpColor.png");
  PianoNoteColor[28]  = loadImage("Octave1EColor.png");
  PianoNoteColor[29]  = loadImage("Octave1FColor.png");
  PianoNoteColor[30]  = loadImage("Octave1FSharpColor.png");
  PianoNoteColor[31]  = loadImage("Octave1GColor.png");
  PianoNoteColor[32]  = loadImage("Octave1GSharpColor.png");
  PianoNoteColor[33]  = loadImage("Octave1AColor.png");
  PianoNoteColor[34]  = loadImage("Octave1ASharpColor.png");
  PianoNoteColor[35]  = loadImage("Octave1BColor.png");
  PianoNoteColor[36]  = loadImage("Octave2CColor.png");
  PianoNoteColor[37]  = loadImage("Octave2CSharpColor.png");
  PianoNoteColor[38]  = loadImage("Octave2DColor.png");
  PianoNoteColor[39]  = loadImage("Octave2DSharpColor.png");
  PianoNoteColor[40]  = loadImage("Octave2EColor.png");
  PianoNoteColor[41]  = loadImage("Octave2FColor.png");
  PianoNoteColor[42]  = loadImage("Octave2FSharpColor.png");
  PianoNoteColor[43]  = loadImage("Octave2GColor.png");
  PianoNoteColor[44]  = loadImage("Octave2GSharpColor.png");
  PianoNoteColor[45]  = loadImage("Octave2AColor.png");
  PianoNoteColor[46]  = loadImage("Octave2ASharpColor.png");
  PianoNoteColor[47]  = loadImage("Octave2BColor.png");
  PianoNoteColor[48]  = loadImage("Octave3CColor.png");
  PianoNoteColor[49]  = loadImage("Octave3CSharpColor.png");
  PianoNoteColor[50]  = loadImage("Octave3DColor.png");
  PianoNoteColor[51]  = loadImage("Octave3DSharpColor.png");
  PianoNoteColor[52]  = loadImage("Octave3EColor.png");
  PianoNoteColor[53]  = loadImage("Octave3FColor.png");
  PianoNoteColor[54]  = loadImage("Octave3FSharpColor.png");
  PianoNoteColor[55]  = loadImage("Octave3GColor.png");
  PianoNoteColor[56]  = loadImage("Octave3GSharpColor.png");
  PianoNoteColor[57]  = loadImage("Octave3AColor.png");
  PianoNoteColor[58]  = loadImage("Octave3ASharpColor.png");
  PianoNoteColor[59]  = loadImage("Octave3BColor.png");
  PianoNoteColor[60]  = loadImage("Octave4CColor.png");
  PianoNoteColor[61]  = loadImage("Octave4CSharpColor.png");
  PianoNoteColor[62]  = loadImage("Octave4DColor.png");
  PianoNoteColor[63]  = loadImage("Octave4DSharpColor.png");
  PianoNoteColor[64]  = loadImage("Octave4EColor.png");
  PianoNoteColor[65]  = loadImage("Octave4FColor.png");
  PianoNoteColor[66]  = loadImage("Octave4FSharpColor.png");
  PianoNoteColor[67]  = loadImage("Octave4GColor.png");
  PianoNoteColor[68]  = loadImage("Octave4GSharpColor.png");
  PianoNoteColor[69]  = loadImage("Octave4AColor.png");
  PianoNoteColor[70]  = loadImage("Octave4ASharpColor.png");
  PianoNoteColor[71]  = loadImage("Octave4BColor.png");
  PianoNoteColor[72]  = loadImage("Octave5CColor.png");
  PianoNoteColor[73]  = loadImage("Octave5CSharpColor.png");
  PianoNoteColor[74]  = loadImage("Octave5DColor.png");
  PianoNoteColor[75]  = loadImage("Octave5DSharpColor.png");
  PianoNoteColor[76]  = loadImage("Octave5EColor.png");
  PianoNoteColor[77]  = loadImage("Octave5FColor.png");
  PianoNoteColor[78]  = loadImage("Octave5FSharpColor.png");
  PianoNoteColor[79]  = loadImage("Octave5GColor.png");
  PianoNoteColor[80]  = loadImage("Octave5GSharpColor.png");
  PianoNoteColor[81]  = loadImage("Octave5AColor.png");
  PianoNoteColor[82]  = loadImage("Octave5ASharpColor.png");
  PianoNoteColor[83]  = loadImage("Octave5BColor.png");
  PianoNoteColor[84]  = loadImage("Octave6CColor.png");
  PianoNoteColor[85]  = loadImage("Octave6CSharpColor.png");
  PianoNoteColor[86]  = loadImage("Octave6DColor.png");
  PianoNoteColor[87]  = loadImage("Octave6DSharpColor.png");
  PianoNoteColor[88]  = loadImage("Octave6EColor.png");
  PianoNoteColor[89]  = loadImage("Octave6FColor.png");
  PianoNoteColor[90]  = loadImage("Octave6FSharpColor.png");
  PianoNoteColor[91]  = loadImage("Octave6GColor.png");
  PianoNoteColor[92]  = loadImage("Octave6GSharpColor.png");
  PianoNoteColor[93]  = loadImage("Octave6AColor.png");
  PianoNoteColor[94]  = loadImage("Octave6ASharpColor.png");
  PianoNoteColor[95]  = loadImage("Octave6BColor.png");
  PianoNoteColor[96]  = loadImage("Octave7CColor.png");
  PianoNoteColor[97]  = loadImage("Octave7CSharpColor.png");
  PianoNoteColor[98]  = loadImage("Octave7DColor.png");
  PianoNoteColor[99]  = loadImage("Octave7DSharpColor.png");
  PianoNoteColor[100] = loadImage("Octave7EColor.png");
  PianoNoteColor[101] = loadImage("Octave7FColor.png");
  PianoNoteColor[102] = loadImage("Octave7FSharpColor.png");
  PianoNoteColor[103] = loadImage("Octave7GColor.png");
  PianoNoteColor[104] = loadImage("Octave7GSharpColor.png");
  PianoNoteColor[105] = loadImage("Octave7AColor.png");
  PianoNoteColor[106] = loadImage("Octave7ASharpColor.png");
  PianoNoteColor[107] = loadImage("Octave7BColor.png");
  PianoNoteColor[108] = loadImage("Octave8CColor.png");
  PianoNoteColor[109] = loadImage("Octave8CSharpColor.png");
  PianoNoteColor[110] = loadImage("Octave8DColor.png");
  PianoNoteColor[111] = loadImage("Octave8DSharpColor.png");
  PianoNoteColor[112] = loadImage("Octave8EColor.png");
  PianoNoteColor[113] = loadImage("Octave8FColor.png");
  PianoNoteColor[114] = loadImage("Octave8FSharpColor.png");
  PianoNoteColor[115] = loadImage("Octave8GColor.png");
  PianoNoteColor[116] = loadImage("Octave8GSharpColor.png");
  PianoNoteColor[117] = loadImage("Octave8AColor.png");
  PianoNoteColor[118] = loadImage("Octave8ASharpColor.png");
  PianoNoteColor[119] = loadImage("Octave8BColor.png");
  PianoNoteColor[120] = loadImage("Octave9CColor.png");
  PianoNoteColor[121] = loadImage("Octave9CSharpColor.png");
  PianoNoteColor[122] = loadImage("Octave9DColor.png");
  PianoNoteColor[123] = loadImage("Octave9DSharpColor.png");
  PianoNoteColor[124] = loadImage("Octave9EColor.png");
  PianoNoteColor[125] = loadImage("Octave9FColor.png");
  PianoNoteColor[126] = loadImage("Octave9FSharpColor.png");
  PianoNoteColor[127] = loadImage("Octave9GColor.png");
  PianoNoteColorSide[0]   = loadImage("Octavem1CColor.png");
  PianoNoteColorSide[1]   = loadImage("Octavem1CSharpColor.png");
  PianoNoteColorSide[2]   = loadImage("Octavem1DColor.png");
  PianoNoteColorSide[3]   = loadImage("Octavem1DSharpColor.png");
  PianoNoteColorSide[4]   = loadImage("Octavem1EColor.png");
  PianoNoteColorSide[5]   = loadImage("Octavem1FColor.png");
  PianoNoteColorSide[6]   = loadImage("Octavem1FSharpColor.png");
  PianoNoteColorSide[7]   = loadImage("Octavem1GColor.png");
  PianoNoteColorSide[8]   = loadImage("Octavem1GSharpColor.png");
  PianoNoteColorSide[9]   = loadImage("Octavem1AColor.png");
  PianoNoteColorSide[10]  = loadImage("Octavem1ASharpColor.png");
  PianoNoteColorSide[11]  = loadImage("Octavem1BColor.png");
  PianoNoteColorSide[12]  = loadImage("Octave0CColor.png");
  PianoNoteColorSide[13]  = loadImage("Octave0CSharpColor.png");
  PianoNoteColorSide[14]  = loadImage("Octave0DColor.png");
  PianoNoteColorSide[15]  = loadImage("Octave0DSharpColor.png");
  PianoNoteColorSide[16]  = loadImage("Octave0EColor.png");
  PianoNoteColorSide[17]  = loadImage("Octave0FColor.png");
  PianoNoteColorSide[18]  = loadImage("Octave0FSharpColor.png");
  PianoNoteColorSide[19]  = loadImage("Octave0GColor.png");
  PianoNoteColorSide[20]  = loadImage("Octave0GSharpColor.png");
  PianoNoteColorSide[21]  = loadImage("Octave0AColor.png");
  PianoNoteColorSide[22]  = loadImage("Octave0ASharpColor.png");
  PianoNoteColorSide[23]  = loadImage("Octave0BColor.png");
  PianoNoteColorSide[24]  = loadImage("Octave1CColor.png");
  PianoNoteColorSide[25]  = loadImage("Octave1CSharpColor.png");
  PianoNoteColorSide[26]  = loadImage("Octave1DColor.png");
  PianoNoteColorSide[27]  = loadImage("Octave1DSharpColor.png");
  PianoNoteColorSide[28]  = loadImage("Octave1EColor.png");
  PianoNoteColorSide[29]  = loadImage("Octave1FColor.png");
  PianoNoteColorSide[30]  = loadImage("Octave1FSharpColor.png");
  PianoNoteColorSide[31]  = loadImage("Octave1GColor.png");
  PianoNoteColorSide[32]  = loadImage("Octave1GSharpColor.png");
  PianoNoteColorSide[33]  = loadImage("Octave1AColor.png");
  PianoNoteColorSide[34]  = loadImage("Octave1ASharpColor.png");
  PianoNoteColorSide[35]  = loadImage("Octave1BColor.png");
  PianoNoteColorSide[36]  = loadImage("Octave2CColor.png");
  PianoNoteColorSide[37]  = loadImage("Octave2CSharpColor.png");
  PianoNoteColorSide[38]  = loadImage("Octave2DColor.png");
  PianoNoteColorSide[39]  = loadImage("Octave2DSharpColor.png");
  PianoNoteColorSide[40]  = loadImage("Octave2EColor.png");
  PianoNoteColorSide[41]  = loadImage("Octave2FColor.png");
  PianoNoteColorSide[42]  = loadImage("Octave2FSharpColor.png");
  PianoNoteColorSide[43]  = loadImage("Octave2GColor.png");
  PianoNoteColorSide[44]  = loadImage("Octave2GSharpColor.png");
  PianoNoteColorSide[45]  = loadImage("Octave2AColor.png");
  PianoNoteColorSide[46]  = loadImage("Octave2ASharpColor.png");
  PianoNoteColorSide[47]  = loadImage("Octave2BColor.png");
  PianoNoteColorSide[48]  = loadImage("Octave3CColor.png");
  PianoNoteColorSide[49]  = loadImage("Octave3CSharpColor.png");
  PianoNoteColorSide[50]  = loadImage("Octave3DColor.png");
  PianoNoteColorSide[51]  = loadImage("Octave3DSharpColor.png");
  PianoNoteColorSide[52]  = loadImage("Octave3EColor.png");
  PianoNoteColorSide[53]  = loadImage("Octave3FColor.png");
  PianoNoteColorSide[54]  = loadImage("Octave3FSharpColor.png");
  PianoNoteColorSide[55]  = loadImage("Octave3GColor.png");
  PianoNoteColorSide[56]  = loadImage("Octave3GSharpColor.png");
  PianoNoteColorSide[57]  = loadImage("Octave3AColor.png");
  PianoNoteColorSide[58]  = loadImage("Octave3ASharpColor.png");
  PianoNoteColorSide[59]  = loadImage("Octave3BColor.png");
  PianoNoteColorSide[60]  = loadImage("Octave4CColor.png");
  PianoNoteColorSide[61]  = loadImage("Octave4CSharpColor.png");
  PianoNoteColorSide[62]  = loadImage("Octave4DColor.png");
  PianoNoteColorSide[63]  = loadImage("Octave4DSharpColor.png");
  PianoNoteColorSide[64]  = loadImage("Octave4EColor.png");
  PianoNoteColorSide[65]  = loadImage("Octave4FColor.png");
  PianoNoteColorSide[66]  = loadImage("Octave4FSharpColor.png");
  PianoNoteColorSide[67]  = loadImage("Octave4GColor.png");
  PianoNoteColorSide[68]  = loadImage("Octave4GSharpColor.png");
  PianoNoteColorSide[69]  = loadImage("Octave4AColor.png");
  PianoNoteColorSide[70]  = loadImage("Octave4ASharpColor.png");
  PianoNoteColorSide[71]  = loadImage("Octave4BColor.png");
  PianoNoteColorSide[72]  = loadImage("Octave5CColor.png");
  PianoNoteColorSide[73]  = loadImage("Octave5CSharpColor.png");
  PianoNoteColorSide[74]  = loadImage("Octave5DColor.png");
  PianoNoteColorSide[75]  = loadImage("Octave5DSharpColor.png");
  PianoNoteColorSide[76]  = loadImage("Octave5EColor.png");
  PianoNoteColorSide[77]  = loadImage("Octave5FColor.png");
  PianoNoteColorSide[78]  = loadImage("Octave5FSharpColor.png");
  PianoNoteColorSide[79]  = loadImage("Octave5GColor.png");
  PianoNoteColorSide[80]  = loadImage("Octave5GSharpColor.png");
  PianoNoteColorSide[81]  = loadImage("Octave5AColor.png");
  PianoNoteColorSide[82]  = loadImage("Octave5ASharpColor.png");
  PianoNoteColorSide[83]  = loadImage("Octave5BColor.png");
  PianoNoteColorSide[84]  = loadImage("Octave6CColor.png");
  PianoNoteColorSide[85]  = loadImage("Octave6CSharpColor.png");
  PianoNoteColorSide[86]  = loadImage("Octave6DColor.png");
  PianoNoteColorSide[87]  = loadImage("Octave6DSharpColor.png");
  PianoNoteColorSide[88]  = loadImage("Octave6EColor.png");
  PianoNoteColorSide[89]  = loadImage("Octave6FColor.png");
  PianoNoteColorSide[90]  = loadImage("Octave6FSharpColor.png");
  PianoNoteColorSide[91]  = loadImage("Octave6GColor.png");
  PianoNoteColorSide[92]  = loadImage("Octave6GSharpColor.png");
  PianoNoteColorSide[93]  = loadImage("Octave6AColor.png");
  PianoNoteColorSide[94]  = loadImage("Octave6ASharpColor.png");
  PianoNoteColorSide[95]  = loadImage("Octave6BColor.png");
  PianoNoteColorSide[96]  = loadImage("Octave7CColor.png");
  PianoNoteColorSide[97]  = loadImage("Octave7CSharpColor.png");
  PianoNoteColorSide[98]  = loadImage("Octave7DColor.png");
  PianoNoteColorSide[99]  = loadImage("Octave7DSharpColor.png");
  PianoNoteColorSide[100] = loadImage("Octave7EColor.png");
  PianoNoteColorSide[101] = loadImage("Octave7FColor.png");
  PianoNoteColorSide[102] = loadImage("Octave7FSharpColor.png");
  PianoNoteColorSide[103] = loadImage("Octave7GColor.png");
  PianoNoteColorSide[104] = loadImage("Octave7GSharpColor.png");
  PianoNoteColorSide[105] = loadImage("Octave7AColor.png");
  PianoNoteColorSide[106] = loadImage("Octave7ASharpColor.png");
  PianoNoteColorSide[107] = loadImage("Octave7BColor.png");
  PianoNoteColorSide[108] = loadImage("Octave8CColor.png");
  PianoNoteColorSide[109] = loadImage("Octave8CSharpColor.png");
  PianoNoteColorSide[110] = loadImage("Octave8DColor.png");
  PianoNoteColorSide[111] = loadImage("Octave8DSharpColor.png");
  PianoNoteColorSide[112] = loadImage("Octave8EColor.png");
  PianoNoteColorSide[113] = loadImage("Octave8FColor.png");
  PianoNoteColorSide[114] = loadImage("Octave8FSharpColor.png");
  PianoNoteColorSide[115] = loadImage("Octave8GColor.png");
  PianoNoteColorSide[116] = loadImage("Octave8GSharpColor.png");
  PianoNoteColorSide[117] = loadImage("Octave8AColor.png");
  PianoNoteColorSide[118] = loadImage("Octave8ASharpColor.png");
  PianoNoteColorSide[119] = loadImage("Octave8BColor.png");
  PianoNoteColorSide[120] = loadImage("Octave9CColor.png");
  PianoNoteColorSide[121] = loadImage("Octave9CSharpColor.png");
  PianoNoteColorSide[122] = loadImage("Octave9DColor.png");
  PianoNoteColorSide[123] = loadImage("Octave9DSharpColor.png");
  PianoNoteColorSide[124] = loadImage("Octave9EColor.png");
  PianoNoteColorSide[125] = loadImage("Octave9FColor.png");
  PianoNoteColorSide[126] = loadImage("Octave9FSharpColor.png");
  PianoNoteColorSide[127] = loadImage("Octave9GColor.png");
  //Chromatic Percussion
  ChromaticPercussionNoteColor[0]   = loadImage("Octavem1CColor.png");
  ChromaticPercussionNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
  ChromaticPercussionNoteColor[2]   = loadImage("Octavem1DColor.png");
  ChromaticPercussionNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
  ChromaticPercussionNoteColor[4]   = loadImage("Octavem1EColor.png");
  ChromaticPercussionNoteColor[5]   = loadImage("Octavem1FColor.png");
  ChromaticPercussionNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
  ChromaticPercussionNoteColor[7]   = loadImage("Octavem1GColor.png");
  ChromaticPercussionNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
  ChromaticPercussionNoteColor[9]   = loadImage("Octavem1AColor.png");
  ChromaticPercussionNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
  ChromaticPercussionNoteColor[11]  = loadImage("Octavem1BColor.png");
  ChromaticPercussionNoteColor[12]  = loadImage("Octave0CColor.png");
  ChromaticPercussionNoteColor[13]  = loadImage("Octave0CSharpColor.png");
  ChromaticPercussionNoteColor[14]  = loadImage("Octave0DColor.png");
  ChromaticPercussionNoteColor[15]  = loadImage("Octave0DSharpColor.png");
  ChromaticPercussionNoteColor[16]  = loadImage("Octave0EColor.png");
  ChromaticPercussionNoteColor[17]  = loadImage("Octave0FColor.png");
  ChromaticPercussionNoteColor[18]  = loadImage("Octave0FSharpColor.png");
  ChromaticPercussionNoteColor[19]  = loadImage("Octave0GColor.png");
  ChromaticPercussionNoteColor[20]  = loadImage("Octave0GSharpColor.png");
  ChromaticPercussionNoteColor[21]  = loadImage("Octave0AColor.png");
  ChromaticPercussionNoteColor[22]  = loadImage("Octave0ASharpColor.png");
  ChromaticPercussionNoteColor[23]  = loadImage("Octave0BColor.png");
  ChromaticPercussionNoteColor[24]  = loadImage("Octave1CColor.png");
  ChromaticPercussionNoteColor[25]  = loadImage("Octave1CSharpColor.png");
  ChromaticPercussionNoteColor[26]  = loadImage("Octave1DColor.png");
  ChromaticPercussionNoteColor[27]  = loadImage("Octave1DSharpColor.png");
  ChromaticPercussionNoteColor[28]  = loadImage("Octave1EColor.png");
  ChromaticPercussionNoteColor[29]  = loadImage("Octave1FColor.png");
  ChromaticPercussionNoteColor[30]  = loadImage("Octave1FSharpColor.png");
  ChromaticPercussionNoteColor[31]  = loadImage("Octave1GColor.png");
  ChromaticPercussionNoteColor[32]  = loadImage("Octave1GSharpColor.png");
  ChromaticPercussionNoteColor[33]  = loadImage("Octave1AColor.png");
  ChromaticPercussionNoteColor[34]  = loadImage("Octave1ASharpColor.png");
  ChromaticPercussionNoteColor[35]  = loadImage("Octave1BColor.png");
  ChromaticPercussionNoteColor[36]  = loadImage("Octave2CColor.png");
  ChromaticPercussionNoteColor[37]  = loadImage("Octave2CSharpColor.png");
  ChromaticPercussionNoteColor[38]  = loadImage("Octave2DColor.png");
  ChromaticPercussionNoteColor[39]  = loadImage("Octave2DSharpColor.png");
  ChromaticPercussionNoteColor[40]  = loadImage("Octave2EColor.png");
  ChromaticPercussionNoteColor[41]  = loadImage("Octave2FColor.png");
  ChromaticPercussionNoteColor[42]  = loadImage("Octave2FSharpColor.png");
  ChromaticPercussionNoteColor[43]  = loadImage("Octave2GColor.png");
  ChromaticPercussionNoteColor[44]  = loadImage("Octave2GSharpColor.png");
  ChromaticPercussionNoteColor[45]  = loadImage("Octave2AColor.png");
  ChromaticPercussionNoteColor[46]  = loadImage("Octave2ASharpColor.png");
  ChromaticPercussionNoteColor[47]  = loadImage("Octave2BColor.png");
  ChromaticPercussionNoteColor[48]  = loadImage("Octave3CColor.png");
  ChromaticPercussionNoteColor[49]  = loadImage("Octave3CSharpColor.png");
  ChromaticPercussionNoteColor[50]  = loadImage("Octave3DColor.png");
  ChromaticPercussionNoteColor[51]  = loadImage("Octave3DSharpColor.png");
  ChromaticPercussionNoteColor[52]  = loadImage("Octave3EColor.png");
  ChromaticPercussionNoteColor[53]  = loadImage("Octave3FColor.png");
  ChromaticPercussionNoteColor[54]  = loadImage("Octave3FSharpColor.png");
  ChromaticPercussionNoteColor[55]  = loadImage("Octave3GColor.png");
  ChromaticPercussionNoteColor[56]  = loadImage("Octave3GSharpColor.png");
  ChromaticPercussionNoteColor[57]  = loadImage("Octave3AColor.png");
  ChromaticPercussionNoteColor[58]  = loadImage("Octave3ASharpColor.png");
  ChromaticPercussionNoteColor[59]  = loadImage("Octave3BColor.png");
  ChromaticPercussionNoteColor[60]  = loadImage("Octave4CColor.png");
  ChromaticPercussionNoteColor[61]  = loadImage("Octave4CSharpColor.png");
  ChromaticPercussionNoteColor[62]  = loadImage("Octave4DColor.png");
  ChromaticPercussionNoteColor[63]  = loadImage("Octave4DSharpColor.png");
  ChromaticPercussionNoteColor[64]  = loadImage("Octave4EColor.png");
  ChromaticPercussionNoteColor[65]  = loadImage("Octave4FColor.png");
  ChromaticPercussionNoteColor[66]  = loadImage("Octave4FSharpColor.png");
  ChromaticPercussionNoteColor[67]  = loadImage("Octave4GColor.png");
  ChromaticPercussionNoteColor[68]  = loadImage("Octave4GSharpColor.png");
  ChromaticPercussionNoteColor[69]  = loadImage("Octave4AColor.png");
  ChromaticPercussionNoteColor[70]  = loadImage("Octave4ASharpColor.png");
  ChromaticPercussionNoteColor[71]  = loadImage("Octave4BColor.png");
  ChromaticPercussionNoteColor[72]  = loadImage("Octave5CColor.png");
  ChromaticPercussionNoteColor[73]  = loadImage("Octave5CSharpColor.png");
  ChromaticPercussionNoteColor[74]  = loadImage("Octave5DColor.png");
  ChromaticPercussionNoteColor[75]  = loadImage("Octave5DSharpColor.png");
  ChromaticPercussionNoteColor[76]  = loadImage("Octave5EColor.png");
  ChromaticPercussionNoteColor[77]  = loadImage("Octave5FColor.png");
  ChromaticPercussionNoteColor[78]  = loadImage("Octave5FSharpColor.png");
  ChromaticPercussionNoteColor[79]  = loadImage("Octave5GColor.png");
  ChromaticPercussionNoteColor[80]  = loadImage("Octave5GSharpColor.png");
  ChromaticPercussionNoteColor[81]  = loadImage("Octave5AColor.png");
  ChromaticPercussionNoteColor[82]  = loadImage("Octave5ASharpColor.png");
  ChromaticPercussionNoteColor[83]  = loadImage("Octave5BColor.png");
  ChromaticPercussionNoteColor[84]  = loadImage("Octave6CColor.png");
  ChromaticPercussionNoteColor[85]  = loadImage("Octave6CSharpColor.png");
  ChromaticPercussionNoteColor[86]  = loadImage("Octave6DColor.png");
  ChromaticPercussionNoteColor[87]  = loadImage("Octave6DSharpColor.png");
  ChromaticPercussionNoteColor[88]  = loadImage("Octave6EColor.png");
  ChromaticPercussionNoteColor[89]  = loadImage("Octave6FColor.png");
  ChromaticPercussionNoteColor[90]  = loadImage("Octave6FSharpColor.png");
  ChromaticPercussionNoteColor[91]  = loadImage("Octave6GColor.png");
  ChromaticPercussionNoteColor[92]  = loadImage("Octave6GSharpColor.png");
  ChromaticPercussionNoteColor[93]  = loadImage("Octave6AColor.png");
  ChromaticPercussionNoteColor[94]  = loadImage("Octave6ASharpColor.png");
  ChromaticPercussionNoteColor[95]  = loadImage("Octave6BColor.png");
  ChromaticPercussionNoteColor[96]  = loadImage("Octave7CColor.png");
  ChromaticPercussionNoteColor[97]  = loadImage("Octave7CSharpColor.png");
  ChromaticPercussionNoteColor[98]  = loadImage("Octave7DColor.png");
  ChromaticPercussionNoteColor[99]  = loadImage("Octave7DSharpColor.png");
  ChromaticPercussionNoteColor[100] = loadImage("Octave7EColor.png");
  ChromaticPercussionNoteColor[101] = loadImage("Octave7FColor.png");
  ChromaticPercussionNoteColor[102] = loadImage("Octave7FSharpColor.png");
  ChromaticPercussionNoteColor[103] = loadImage("Octave7GColor.png");
  ChromaticPercussionNoteColor[104] = loadImage("Octave7GSharpColor.png");
  ChromaticPercussionNoteColor[105] = loadImage("Octave7AColor.png");
  ChromaticPercussionNoteColor[106] = loadImage("Octave7ASharpColor.png");
  ChromaticPercussionNoteColor[107] = loadImage("Octave7BColor.png");
  ChromaticPercussionNoteColor[108] = loadImage("Octave8CColor.png");
  ChromaticPercussionNoteColor[109] = loadImage("Octave8CSharpColor.png");
  ChromaticPercussionNoteColor[110] = loadImage("Octave8DColor.png");
  ChromaticPercussionNoteColor[111] = loadImage("Octave8DSharpColor.png");
  ChromaticPercussionNoteColor[112] = loadImage("Octave8EColor.png");
  ChromaticPercussionNoteColor[113] = loadImage("Octave8FColor.png");
  ChromaticPercussionNoteColor[114] = loadImage("Octave8FSharpColor.png");
  ChromaticPercussionNoteColor[115] = loadImage("Octave8GColor.png");
  ChromaticPercussionNoteColor[116] = loadImage("Octave8GSharpColor.png");
  ChromaticPercussionNoteColor[117] = loadImage("Octave8AColor.png");
  ChromaticPercussionNoteColor[118] = loadImage("Octave8ASharpColor.png");
  ChromaticPercussionNoteColor[119] = loadImage("Octave8BColor.png");
  ChromaticPercussionNoteColor[120] = loadImage("Octave9CColor.png");
  ChromaticPercussionNoteColor[121] = loadImage("Octave9CSharpColor.png");
  ChromaticPercussionNoteColor[122] = loadImage("Octave9DColor.png");
  ChromaticPercussionNoteColor[123] = loadImage("Octave9DSharpColor.png");
  ChromaticPercussionNoteColor[124] = loadImage("Octave9EColor.png");
  ChromaticPercussionNoteColor[125] = loadImage("Octave9FColor.png");
  ChromaticPercussionNoteColor[126] = loadImage("Octave9FSharpColor.png");
  ChromaticPercussionNoteColor[127] = loadImage("Octave9GColor.png");
 //Organ
 OrganNoteColor[0]   = loadImage("Octavem1CColor.png");
 OrganNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
 OrganNoteColor[2]   = loadImage("Octavem1DColor.png");
 OrganNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
 OrganNoteColor[4]   = loadImage("Octavem1EColor.png");
 OrganNoteColor[5]   = loadImage("Octavem1FColor.png");
 OrganNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
 OrganNoteColor[7]   = loadImage("Octavem1GColor.png");
 OrganNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
 OrganNoteColor[9]   = loadImage("Octavem1AColor.png");
 OrganNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
 OrganNoteColor[11]  = loadImage("Octavem1BColor.png");
 OrganNoteColor[12]  = loadImage("Octave0CColor.png");
 OrganNoteColor[13]  = loadImage("Octave0CSharpColor.png");
 OrganNoteColor[14]  = loadImage("Octave0DColor.png");
 OrganNoteColor[15]  = loadImage("Octave0DSharpColor.png");
 OrganNoteColor[16]  = loadImage("Octave0EColor.png");
 OrganNoteColor[17]  = loadImage("Octave0FColor.png");
 OrganNoteColor[18]  = loadImage("Octave0FSharpColor.png");
 OrganNoteColor[19]  = loadImage("Octave0GColor.png");
 OrganNoteColor[20]  = loadImage("Octave0GSharpColor.png");
 OrganNoteColor[21]  = loadImage("Octave0AColor.png");
 OrganNoteColor[22]  = loadImage("Octave0ASharpColor.png");
 OrganNoteColor[23]  = loadImage("Octave0BColor.png");
 OrganNoteColor[24]  = loadImage("Octave1CColor.png");
 OrganNoteColor[25]  = loadImage("Octave1CSharpColor.png");
 OrganNoteColor[26]  = loadImage("Octave1DColor.png");
 OrganNoteColor[27]  = loadImage("Octave1DSharpColor.png");
 OrganNoteColor[28]  = loadImage("Octave1EColor.png");
 OrganNoteColor[29]  = loadImage("Octave1FColor.png");
 OrganNoteColor[30]  = loadImage("Octave1FSharpColor.png");
 OrganNoteColor[31]  = loadImage("Octave1GColor.png");
 OrganNoteColor[32]  = loadImage("Octave1GSharpColor.png");
 OrganNoteColor[33]  = loadImage("Octave1AColor.png");
 OrganNoteColor[34]  = loadImage("Octave1ASharpColor.png");
 OrganNoteColor[35]  = loadImage("Octave1BColor.png");
 OrganNoteColor[36]  = loadImage("Octave2CColor.png");
 OrganNoteColor[37]  = loadImage("Octave2CSharpColor.png");
 OrganNoteColor[38]  = loadImage("Octave2DColor.png");
 OrganNoteColor[39]  = loadImage("Octave2DSharpColor.png");
 OrganNoteColor[40]  = loadImage("Octave2EColor.png");
 OrganNoteColor[41]  = loadImage("Octave2FColor.png");
 OrganNoteColor[42]  = loadImage("Octave2FSharpColor.png");
 OrganNoteColor[43]  = loadImage("Octave2GColor.png");
 OrganNoteColor[44]  = loadImage("Octave2GSharpColor.png");
 OrganNoteColor[45]  = loadImage("Octave2AColor.png");
 OrganNoteColor[46]  = loadImage("Octave2ASharpColor.png");
 OrganNoteColor[47]  = loadImage("Octave2BColor.png");
 OrganNoteColor[48]  = loadImage("Octave3CColor.png");
 OrganNoteColor[49]  = loadImage("Octave3CSharpColor.png");
 OrganNoteColor[50]  = loadImage("Octave3DColor.png");
 OrganNoteColor[51]  = loadImage("Octave3DSharpColor.png");
 OrganNoteColor[52]  = loadImage("Octave3EColor.png");
 OrganNoteColor[53]  = loadImage("Octave3FColor.png");
 OrganNoteColor[54]  = loadImage("Octave3FSharpColor.png");
 OrganNoteColor[55]  = loadImage("Octave3GColor.png");
 OrganNoteColor[56]  = loadImage("Octave3GSharpColor.png");
 OrganNoteColor[57]  = loadImage("Octave3AColor.png");
 OrganNoteColor[58]  = loadImage("Octave3ASharpColor.png");
 OrganNoteColor[59]  = loadImage("Octave3BColor.png");
 OrganNoteColor[60]  = loadImage("Octave4CColor.png");
 OrganNoteColor[61]  = loadImage("Octave4CSharpColor.png");
 OrganNoteColor[62]  = loadImage("Octave4DColor.png");
 OrganNoteColor[63]  = loadImage("Octave4DSharpColor.png");
 OrganNoteColor[64]  = loadImage("Octave4EColor.png");
 OrganNoteColor[65]  = loadImage("Octave4FColor.png");
 OrganNoteColor[66]  = loadImage("Octave4FSharpColor.png");
 OrganNoteColor[67]  = loadImage("Octave4GColor.png");
 OrganNoteColor[68]  = loadImage("Octave4GSharpColor.png");
 OrganNoteColor[69]  = loadImage("Octave4AColor.png");
 OrganNoteColor[70]  = loadImage("Octave4ASharpColor.png");
 OrganNoteColor[71]  = loadImage("Octave4BColor.png");
 OrganNoteColor[72]  = loadImage("Octave5CColor.png");
 OrganNoteColor[73]  = loadImage("Octave5CSharpColor.png");
 OrganNoteColor[74]  = loadImage("Octave5DColor.png");
 OrganNoteColor[75]  = loadImage("Octave5DSharpColor.png");
 OrganNoteColor[76]  = loadImage("Octave5EColor.png");
 OrganNoteColor[77]  = loadImage("Octave5FColor.png");
 OrganNoteColor[78]  = loadImage("Octave5FSharpColor.png");
 OrganNoteColor[79]  = loadImage("Octave5GColor.png");
 OrganNoteColor[80]  = loadImage("Octave5GSharpColor.png");
 OrganNoteColor[81]  = loadImage("Octave5AColor.png");
 OrganNoteColor[82]  = loadImage("Octave5ASharpColor.png");
 OrganNoteColor[83]  = loadImage("Octave5BColor.png");
 OrganNoteColor[84]  = loadImage("Octave6CColor.png");
 OrganNoteColor[85]  = loadImage("Octave6CSharpColor.png");
 OrganNoteColor[86]  = loadImage("Octave6DColor.png");
 OrganNoteColor[87]  = loadImage("Octave6DSharpColor.png");
 OrganNoteColor[88]  = loadImage("Octave6EColor.png");
 OrganNoteColor[89]  = loadImage("Octave6FColor.png");
 OrganNoteColor[90]  = loadImage("Octave6FSharpColor.png");
 OrganNoteColor[91]  = loadImage("Octave6GColor.png");
 OrganNoteColor[92]  = loadImage("Octave6GSharpColor.png");
 OrganNoteColor[93]  = loadImage("Octave6AColor.png");
 OrganNoteColor[94]  = loadImage("Octave6ASharpColor.png");
 OrganNoteColor[95]  = loadImage("Octave6BColor.png");
 OrganNoteColor[96]  = loadImage("Octave7CColor.png");
 OrganNoteColor[97]  = loadImage("Octave7CSharpColor.png");
 OrganNoteColor[98]  = loadImage("Octave7DColor.png");
 OrganNoteColor[99]  = loadImage("Octave7DSharpColor.png");
 OrganNoteColor[100] = loadImage("Octave7EColor.png");
 OrganNoteColor[101] = loadImage("Octave7FColor.png");
 OrganNoteColor[102] = loadImage("Octave7FSharpColor.png");
 OrganNoteColor[103] = loadImage("Octave7GColor.png");
 OrganNoteColor[104] = loadImage("Octave7GSharpColor.png");
 OrganNoteColor[105] = loadImage("Octave7AColor.png");
 OrganNoteColor[106] = loadImage("Octave7ASharpColor.png");
 OrganNoteColor[107] = loadImage("Octave7BColor.png");
 OrganNoteColor[108] = loadImage("Octave8CColor.png");
 OrganNoteColor[109] = loadImage("Octave8CSharpColor.png");
 OrganNoteColor[110] = loadImage("Octave8DColor.png");
 OrganNoteColor[111] = loadImage("Octave8DSharpColor.png");
 OrganNoteColor[112] = loadImage("Octave8EColor.png");
 OrganNoteColor[113] = loadImage("Octave8FColor.png");
 OrganNoteColor[114] = loadImage("Octave8FSharpColor.png");
 OrganNoteColor[115] = loadImage("Octave8GColor.png");
 OrganNoteColor[116] = loadImage("Octave8GSharpColor.png");
 OrganNoteColor[117] = loadImage("Octave8AColor.png");
 OrganNoteColor[118] = loadImage("Octave8ASharpColor.png");
 OrganNoteColor[119] = loadImage("Octave8BColor.png");
 OrganNoteColor[120] = loadImage("Octave9CColor.png");
 OrganNoteColor[121] = loadImage("Octave9CSharpColor.png");
 OrganNoteColor[122] = loadImage("Octave9DColor.png");
 OrganNoteColor[123] = loadImage("Octave9DSharpColor.png");
 OrganNoteColor[124] = loadImage("Octave9EColor.png");
 OrganNoteColor[125] = loadImage("Octave9FColor.png");
 OrganNoteColor[126] = loadImage("Octave9FSharpColor.png");
 OrganNoteColor[127] = loadImage("Octave9GColor.png");
//  //Guitar
//  GuitarNoteColor[0]   = loadImage("Octavem1CColor.png");
//  GuitarNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  GuitarNoteColor[2]   = loadImage("Octavem1DColor.png");
//  GuitarNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  GuitarNoteColor[4]   = loadImage("Octavem1EColor.png");
//  GuitarNoteColor[5]   = loadImage("Octavem1FColor.png");
//  GuitarNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  GuitarNoteColor[7]   = loadImage("Octavem1GColor.png");
//  GuitarNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  GuitarNoteColor[9]   = loadImage("Octavem1AColor.png");
//  GuitarNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  GuitarNoteColor[11]  = loadImage("Octavem1BColor.png");
//  GuitarNoteColor[12]  = loadImage("Octave0CColor.png");
//  GuitarNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  GuitarNoteColor[14]  = loadImage("Octave0DColor.png");
//  GuitarNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  GuitarNoteColor[16]  = loadImage("Octave0EColor.png");
//  GuitarNoteColor[17]  = loadImage("Octave0FColor.png");
//  GuitarNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  GuitarNoteColor[19]  = loadImage("Octave0GColor.png");
//  GuitarNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  GuitarNoteColor[21]  = loadImage("Octave0AColor.png");
//  GuitarNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  GuitarNoteColor[23]  = loadImage("Octave0BColor.png");
//  GuitarNoteColor[24]  = loadImage("Octave1CColor.png");
//  GuitarNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  GuitarNoteColor[26]  = loadImage("Octave1DColor.png");
//  GuitarNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  GuitarNoteColor[28]  = loadImage("Octave1EColor.png");
//  GuitarNoteColor[29]  = loadImage("Octave1FColor.png");
//  GuitarNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  GuitarNoteColor[31]  = loadImage("Octave1GColor.png");
//  GuitarNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  GuitarNoteColor[33]  = loadImage("Octave1AColor.png");
//  GuitarNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  GuitarNoteColor[35]  = loadImage("Octave1BColor.png");
//  GuitarNoteColor[36]  = loadImage("Octave2CColor.png");
//  GuitarNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  GuitarNoteColor[38]  = loadImage("Octave2DColor.png");
//  GuitarNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  GuitarNoteColor[40]  = loadImage("Octave2EColor.png");
//  GuitarNoteColor[41]  = loadImage("Octave2FColor.png");
//  GuitarNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  GuitarNoteColor[43]  = loadImage("Octave2GColor.png");
//  GuitarNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  GuitarNoteColor[45]  = loadImage("Octave2AColor.png");
//  GuitarNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  GuitarNoteColor[47]  = loadImage("Octave2BColor.png");
//  GuitarNoteColor[48]  = loadImage("Octave3CColor.png");
//  GuitarNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  GuitarNoteColor[50]  = loadImage("Octave3DColor.png");
//  GuitarNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  GuitarNoteColor[52]  = loadImage("Octave3EColor.png");
//  GuitarNoteColor[53]  = loadImage("Octave3FColor.png");
//  GuitarNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  GuitarNoteColor[55]  = loadImage("Octave3GColor.png");
//  GuitarNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  GuitarNoteColor[57]  = loadImage("Octave3AColor.png");
//  GuitarNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  GuitarNoteColor[59]  = loadImage("Octave3BColor.png");
//  GuitarNoteColor[60]  = loadImage("Octave4CColor.png");
//  GuitarNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  GuitarNoteColor[62]  = loadImage("Octave4DColor.png");
//  GuitarNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  GuitarNoteColor[64]  = loadImage("Octave4EColor.png");
//  GuitarNoteColor[65]  = loadImage("Octave4FColor.png");
//  GuitarNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  GuitarNoteColor[67]  = loadImage("Octave4GColor.png");
//  GuitarNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  GuitarNoteColor[69]  = loadImage("Octave4AColor.png");
//  GuitarNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  GuitarNoteColor[71]  = loadImage("Octave4BColor.png");
//  GuitarNoteColor[72]  = loadImage("Octave5CColor.png");
//  GuitarNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  GuitarNoteColor[74]  = loadImage("Octave5DColor.png");
//  GuitarNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  GuitarNoteColor[76]  = loadImage("Octave5EColor.png");
//  GuitarNoteColor[77]  = loadImage("Octave5FColor.png");
//  GuitarNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  GuitarNoteColor[79]  = loadImage("Octave5GColor.png");
//  GuitarNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  GuitarNoteColor[81]  = loadImage("Octave5AColor.png");
//  GuitarNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  GuitarNoteColor[83]  = loadImage("Octave5BColor.png");
//  GuitarNoteColor[84]  = loadImage("Octave6CColor.png");
//  GuitarNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  GuitarNoteColor[86]  = loadImage("Octave6DColor.png");
//  GuitarNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  GuitarNoteColor[88]  = loadImage("Octave6EColor.png");
//  GuitarNoteColor[89]  = loadImage("Octave6FColor.png");
//  GuitarNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  GuitarNoteColor[91]  = loadImage("Octave6GColor.png");
//  GuitarNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  GuitarNoteColor[93]  = loadImage("Octave6AColor.png");
//  GuitarNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  GuitarNoteColor[95]  = loadImage("Octave6BColor.png");
//  GuitarNoteColor[96]  = loadImage("Octave7CColor.png");
//  GuitarNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  GuitarNoteColor[98]  = loadImage("Octave7DColor.png");
//  GuitarNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  GuitarNoteColor[100] = loadImage("Octave7EColor.png");
//  GuitarNoteColor[101] = loadImage("Octave7FColor.png");
//  GuitarNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  GuitarNoteColor[103] = loadImage("Octave7GColor.png");
//  GuitarNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  GuitarNoteColor[105] = loadImage("Octave7AColor.png");
//  GuitarNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  GuitarNoteColor[107] = loadImage("Octave7BColor.png");
//  GuitarNoteColor[108] = loadImage("Octave8CColor.png");
//  GuitarNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  GuitarNoteColor[110] = loadImage("Octave8DColor.png");
//  GuitarNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  GuitarNoteColor[112] = loadImage("Octave8EColor.png");
//  GuitarNoteColor[113] = loadImage("Octave8FColor.png");
//  GuitarNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  GuitarNoteColor[115] = loadImage("Octave8GColor.png");
//  GuitarNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  GuitarNoteColor[117] = loadImage("Octave8AColor.png");
//  GuitarNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  GuitarNoteColor[119] = loadImage("Octave8BColor.png");
//  GuitarNoteColor[120] = loadImage("Octave9CColor.png");
//  GuitarNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  GuitarNoteColor[122] = loadImage("Octave9DColor.png");
//  GuitarNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  GuitarNoteColor[124] = loadImage("Octave9EColor.png");
//  GuitarNoteColor[125] = loadImage("Octave9FColor.png");
//  GuitarNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  GuitarNoteColor[127] = loadImage("Octave9GColor.png");
//  //Bass
//  BassNoteColor[0]   = loadImage("Octavem1CColor.png");
//  BassNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  BassNoteColor[2]   = loadImage("Octavem1DColor.png");
//  BassNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  BassNoteColor[4]   = loadImage("Octavem1EColor.png");
//  BassNoteColor[5]   = loadImage("Octavem1FColor.png");
//  BassNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  BassNoteColor[7]   = loadImage("Octavem1GColor.png");
//  BassNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  BassNoteColor[9]   = loadImage("Octavem1AColor.png");
//  BassNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  BassNoteColor[11]  = loadImage("Octavem1BColor.png");
//  BassNoteColor[12]  = loadImage("Octave0CColor.png");
//  BassNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  BassNoteColor[14]  = loadImage("Octave0DColor.png");
//  BassNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  BassNoteColor[16]  = loadImage("Octave0EColor.png");
//  BassNoteColor[17]  = loadImage("Octave0FColor.png");
//  BassNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  BassNoteColor[19]  = loadImage("Octave0GColor.png");
//  BassNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  BassNoteColor[21]  = loadImage("Octave0AColor.png");
//  BassNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  BassNoteColor[23]  = loadImage("Octave0BColor.png");
//  BassNoteColor[24]  = loadImage("Octave1CColor.png");
//  BassNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  BassNoteColor[26]  = loadImage("Octave1DColor.png");
//  BassNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  BassNoteColor[28]  = loadImage("Octave1EColor.png");
//  BassNoteColor[29]  = loadImage("Octave1FColor.png");
//  BassNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  BassNoteColor[31]  = loadImage("Octave1GColor.png");
//  BassNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  BassNoteColor[33]  = loadImage("Octave1AColor.png");
//  BassNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  BassNoteColor[35]  = loadImage("Octave1BColor.png");
//  BassNoteColor[36]  = loadImage("Octave2CColor.png");
//  BassNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  BassNoteColor[38]  = loadImage("Octave2DColor.png");
//  BassNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  BassNoteColor[40]  = loadImage("Octave2EColor.png");
//  BassNoteColor[41]  = loadImage("Octave2FColor.png");
//  BassNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  BassNoteColor[43]  = loadImage("Octave2GColor.png");
//  BassNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  BassNoteColor[45]  = loadImage("Octave2AColor.png");
//  BassNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  BassNoteColor[47]  = loadImage("Octave2BColor.png");
//  BassNoteColor[48]  = loadImage("Octave3CColor.png");
//  BassNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  BassNoteColor[50]  = loadImage("Octave3DColor.png");
//  BassNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  BassNoteColor[52]  = loadImage("Octave3EColor.png");
//  BassNoteColor[53]  = loadImage("Octave3FColor.png");
//  BassNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  BassNoteColor[55]  = loadImage("Octave3GColor.png");
//  BassNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  BassNoteColor[57]  = loadImage("Octave3AColor.png");
//  BassNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  BassNoteColor[59]  = loadImage("Octave3BColor.png");
//  BassNoteColor[60]  = loadImage("Octave4CColor.png");
//  BassNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  BassNoteColor[62]  = loadImage("Octave4DColor.png");
//  BassNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  BassNoteColor[64]  = loadImage("Octave4EColor.png");
//  BassNoteColor[65]  = loadImage("Octave4FColor.png");
//  BassNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  BassNoteColor[67]  = loadImage("Octave4GColor.png");
//  BassNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  BassNoteColor[69]  = loadImage("Octave4AColor.png");
//  BassNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  BassNoteColor[71]  = loadImage("Octave4BColor.png");
//  BassNoteColor[72]  = loadImage("Octave5CColor.png");
//  BassNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  BassNoteColor[74]  = loadImage("Octave5DColor.png");
//  BassNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  BassNoteColor[76]  = loadImage("Octave5EColor.png");
//  BassNoteColor[77]  = loadImage("Octave5FColor.png");
//  BassNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  BassNoteColor[79]  = loadImage("Octave5GColor.png");
//  BassNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  BassNoteColor[81]  = loadImage("Octave5AColor.png");
//  BassNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  BassNoteColor[83]  = loadImage("Octave5BColor.png");
//  BassNoteColor[84]  = loadImage("Octave6CColor.png");
//  BassNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  BassNoteColor[86]  = loadImage("Octave6DColor.png");
//  BassNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  BassNoteColor[88]  = loadImage("Octave6EColor.png");
//  BassNoteColor[89]  = loadImage("Octave6FColor.png");
//  BassNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  BassNoteColor[91]  = loadImage("Octave6GColor.png");
//  BassNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  BassNoteColor[93]  = loadImage("Octave6AColor.png");
//  BassNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  BassNoteColor[95]  = loadImage("Octave6BColor.png");
//  BassNoteColor[96]  = loadImage("Octave7CColor.png");
//  BassNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  BassNoteColor[98]  = loadImage("Octave7DColor.png");
//  BassNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  BassNoteColor[100] = loadImage("Octave7EColor.png");
//  BassNoteColor[101] = loadImage("Octave7FColor.png");
//  BassNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  BassNoteColor[103] = loadImage("Octave7GColor.png");
//  BassNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  BassNoteColor[105] = loadImage("Octave7AColor.png");
//  BassNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  BassNoteColor[107] = loadImage("Octave7BColor.png");
//  BassNoteColor[108] = loadImage("Octave8CColor.png");
//  BassNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  BassNoteColor[110] = loadImage("Octave8DColor.png");
//  BassNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  BassNoteColor[112] = loadImage("Octave8EColor.png");
//  BassNoteColor[113] = loadImage("Octave8FColor.png");
//  BassNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  BassNoteColor[115] = loadImage("Octave8GColor.png");
//  BassNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  BassNoteColor[117] = loadImage("Octave8AColor.png");
//  BassNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  BassNoteColor[119] = loadImage("Octave8BColor.png");
//  BassNoteColor[120] = loadImage("Octave9CColor.png");
//  BassNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  BassNoteColor[122] = loadImage("Octave9DColor.png");
//  BassNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  BassNoteColor[124] = loadImage("Octave9EColor.png");
//  BassNoteColor[125] = loadImage("Octave9FColor.png");
//  BassNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  BassNoteColor[127] = loadImage("Octave9GColor.png");
//  //Strings
//  StringsNoteColor[0]   = loadImage("Octavem1CColor.png");
//  StringsNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  StringsNoteColor[2]   = loadImage("Octavem1DColor.png");
//  StringsNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  StringsNoteColor[4]   = loadImage("Octavem1EColor.png");
//  StringsNoteColor[5]   = loadImage("Octavem1FColor.png");
//  StringsNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  StringsNoteColor[7]   = loadImage("Octavem1GColor.png");
//  StringsNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  StringsNoteColor[9]   = loadImage("Octavem1AColor.png");
//  StringsNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  StringsNoteColor[11]  = loadImage("Octavem1BColor.png");
//  StringsNoteColor[12]  = loadImage("Octave0CColor.png");
//  StringsNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  StringsNoteColor[14]  = loadImage("Octave0DColor.png");
//  StringsNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  StringsNoteColor[16]  = loadImage("Octave0EColor.png");
//  StringsNoteColor[17]  = loadImage("Octave0FColor.png");
//  StringsNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  StringsNoteColor[19]  = loadImage("Octave0GColor.png");
//  StringsNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  StringsNoteColor[21]  = loadImage("Octave0AColor.png");
//  StringsNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  StringsNoteColor[23]  = loadImage("Octave0BColor.png");
//  StringsNoteColor[24]  = loadImage("Octave1CColor.png");
//  StringsNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  StringsNoteColor[26]  = loadImage("Octave1DColor.png");
//  StringsNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  StringsNoteColor[28]  = loadImage("Octave1EColor.png");
//  StringsNoteColor[29]  = loadImage("Octave1FColor.png");
//  StringsNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  StringsNoteColor[31]  = loadImage("Octave1GColor.png");
//  StringsNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  StringsNoteColor[33]  = loadImage("Octave1AColor.png");
//  StringsNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  StringsNoteColor[35]  = loadImage("Octave1BColor.png");
//  StringsNoteColor[36]  = loadImage("Octave2CColor.png");
//  StringsNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  StringsNoteColor[38]  = loadImage("Octave2DColor.png");
//  StringsNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  StringsNoteColor[40]  = loadImage("Octave2EColor.png");
//  StringsNoteColor[41]  = loadImage("Octave2FColor.png");
//  StringsNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  StringsNoteColor[43]  = loadImage("Octave2GColor.png");
//  StringsNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  StringsNoteColor[45]  = loadImage("Octave2AColor.png");
//  StringsNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  StringsNoteColor[47]  = loadImage("Octave2BColor.png");
//  StringsNoteColor[48]  = loadImage("Octave3CColor.png");
//  StringsNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  StringsNoteColor[50]  = loadImage("Octave3DColor.png");
//  StringsNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  StringsNoteColor[52]  = loadImage("Octave3EColor.png");
//  StringsNoteColor[53]  = loadImage("Octave3FColor.png");
//  StringsNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  StringsNoteColor[55]  = loadImage("Octave3GColor.png");
//  StringsNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  StringsNoteColor[57]  = loadImage("Octave3AColor.png");
//  StringsNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  StringsNoteColor[59]  = loadImage("Octave3BColor.png");
//  StringsNoteColor[60]  = loadImage("Octave4CColor.png");
//  StringsNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  StringsNoteColor[62]  = loadImage("Octave4DColor.png");
//  StringsNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  StringsNoteColor[64]  = loadImage("Octave4EColor.png");
//  StringsNoteColor[65]  = loadImage("Octave4FColor.png");
//  StringsNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  StringsNoteColor[67]  = loadImage("Octave4GColor.png");
//  StringsNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  StringsNoteColor[69]  = loadImage("Octave4AColor.png");
//  StringsNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  StringsNoteColor[71]  = loadImage("Octave4BColor.png");
//  StringsNoteColor[72]  = loadImage("Octave5CColor.png");
//  StringsNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  StringsNoteColor[74]  = loadImage("Octave5DColor.png");
//  StringsNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  StringsNoteColor[76]  = loadImage("Octave5EColor.png");
//  StringsNoteColor[77]  = loadImage("Octave5FColor.png");
//  StringsNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  StringsNoteColor[79]  = loadImage("Octave5GColor.png");
//  StringsNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  StringsNoteColor[81]  = loadImage("Octave5AColor.png");
//  StringsNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  StringsNoteColor[83]  = loadImage("Octave5BColor.png");
//  StringsNoteColor[84]  = loadImage("Octave6CColor.png");
//  StringsNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  StringsNoteColor[86]  = loadImage("Octave6DColor.png");
//  StringsNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  StringsNoteColor[88]  = loadImage("Octave6EColor.png");
//  StringsNoteColor[89]  = loadImage("Octave6FColor.png");
//  StringsNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  StringsNoteColor[91]  = loadImage("Octave6GColor.png");
//  StringsNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  StringsNoteColor[93]  = loadImage("Octave6AColor.png");
//  StringsNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  StringsNoteColor[95]  = loadImage("Octave6BColor.png");
//  StringsNoteColor[96]  = loadImage("Octave7CColor.png");
//  StringsNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  StringsNoteColor[98]  = loadImage("Octave7DColor.png");
//  StringsNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  StringsNoteColor[100] = loadImage("Octave7EColor.png");
//  StringsNoteColor[101] = loadImage("Octave7FColor.png");
//  StringsNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  StringsNoteColor[103] = loadImage("Octave7GColor.png");
//  StringsNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  StringsNoteColor[105] = loadImage("Octave7AColor.png");
//  StringsNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  StringsNoteColor[107] = loadImage("Octave7BColor.png");
//  StringsNoteColor[108] = loadImage("Octave8CColor.png");
//  StringsNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  StringsNoteColor[110] = loadImage("Octave8DColor.png");
//  StringsNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  StringsNoteColor[112] = loadImage("Octave8EColor.png");
//  StringsNoteColor[113] = loadImage("Octave8FColor.png");
//  StringsNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  StringsNoteColor[115] = loadImage("Octave8GColor.png");
//  StringsNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  StringsNoteColor[117] = loadImage("Octave8AColor.png");
//  StringsNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  StringsNoteColor[119] = loadImage("Octave8BColor.png");
//  StringsNoteColor[120] = loadImage("Octave9CColor.png");
//  StringsNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  StringsNoteColor[122] = loadImage("Octave9DColor.png");
//  StringsNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  StringsNoteColor[124] = loadImage("Octave9EColor.png");
//  StringsNoteColor[125] = loadImage("Octave9FColor.png");
//  StringsNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  StringsNoteColor[127] = loadImage("Octave9GColor.png");
//  //Ensemble
//  EnsembleNoteColor[0]   = loadImage("Octavem1CColor.png");
//  EnsembleNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  EnsembleNoteColor[2]   = loadImage("Octavem1DColor.png");
//  EnsembleNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  EnsembleNoteColor[4]   = loadImage("Octavem1EColor.png");
//  EnsembleNoteColor[5]   = loadImage("Octavem1FColor.png");
//  EnsembleNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  EnsembleNoteColor[7]   = loadImage("Octavem1GColor.png");
//  EnsembleNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  EnsembleNoteColor[9]   = loadImage("Octavem1AColor.png");
//  EnsembleNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  EnsembleNoteColor[11]  = loadImage("Octavem1BColor.png");
//  EnsembleNoteColor[12]  = loadImage("Octave0CColor.png");
//  EnsembleNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  EnsembleNoteColor[14]  = loadImage("Octave0DColor.png");
//  EnsembleNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  EnsembleNoteColor[16]  = loadImage("Octave0EColor.png");
//  EnsembleNoteColor[17]  = loadImage("Octave0FColor.png");
//  EnsembleNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  EnsembleNoteColor[19]  = loadImage("Octave0GColor.png");
//  EnsembleNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  EnsembleNoteColor[21]  = loadImage("Octave0AColor.png");
//  EnsembleNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  EnsembleNoteColor[23]  = loadImage("Octave0BColor.png");
//  EnsembleNoteColor[24]  = loadImage("Octave1CColor.png");
//  EnsembleNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  EnsembleNoteColor[26]  = loadImage("Octave1DColor.png");
//  EnsembleNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  EnsembleNoteColor[28]  = loadImage("Octave1EColor.png");
//  EnsembleNoteColor[29]  = loadImage("Octave1FColor.png");
//  EnsembleNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  EnsembleNoteColor[31]  = loadImage("Octave1GColor.png");
//  EnsembleNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  EnsembleNoteColor[33]  = loadImage("Octave1AColor.png");
//  EnsembleNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  EnsembleNoteColor[35]  = loadImage("Octave1BColor.png");
//  EnsembleNoteColor[36]  = loadImage("Octave2CColor.png");
//  EnsembleNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  EnsembleNoteColor[38]  = loadImage("Octave2DColor.png");
//  EnsembleNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  EnsembleNoteColor[40]  = loadImage("Octave2EColor.png");
//  EnsembleNoteColor[41]  = loadImage("Octave2FColor.png");
//  EnsembleNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  EnsembleNoteColor[43]  = loadImage("Octave2GColor.png");
//  EnsembleNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  EnsembleNoteColor[45]  = loadImage("Octave2AColor.png");
//  EnsembleNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  EnsembleNoteColor[47]  = loadImage("Octave2BColor.png");
//  EnsembleNoteColor[48]  = loadImage("Octave3CColor.png");
//  EnsembleNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  EnsembleNoteColor[50]  = loadImage("Octave3DColor.png");
//  EnsembleNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  EnsembleNoteColor[52]  = loadImage("Octave3EColor.png");
//  EnsembleNoteColor[53]  = loadImage("Octave3FColor.png");
//  EnsembleNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  EnsembleNoteColor[55]  = loadImage("Octave3GColor.png");
//  EnsembleNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  EnsembleNoteColor[57]  = loadImage("Octave3AColor.png");
//  EnsembleNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  EnsembleNoteColor[59]  = loadImage("Octave3BColor.png");
//  EnsembleNoteColor[60]  = loadImage("Octave4CColor.png");
//  EnsembleNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  EnsembleNoteColor[62]  = loadImage("Octave4DColor.png");
//  EnsembleNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  EnsembleNoteColor[64]  = loadImage("Octave4EColor.png");
//  EnsembleNoteColor[65]  = loadImage("Octave4FColor.png");
//  EnsembleNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  EnsembleNoteColor[67]  = loadImage("Octave4GColor.png");
//  EnsembleNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  EnsembleNoteColor[69]  = loadImage("Octave4AColor.png");
//  EnsembleNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  EnsembleNoteColor[71]  = loadImage("Octave4BColor.png");
//  EnsembleNoteColor[72]  = loadImage("Octave5CColor.png");
//  EnsembleNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  EnsembleNoteColor[74]  = loadImage("Octave5DColor.png");
//  EnsembleNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  EnsembleNoteColor[76]  = loadImage("Octave5EColor.png");
//  EnsembleNoteColor[77]  = loadImage("Octave5FColor.png");
//  EnsembleNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  EnsembleNoteColor[79]  = loadImage("Octave5GColor.png");
//  EnsembleNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  EnsembleNoteColor[81]  = loadImage("Octave5AColor.png");
//  EnsembleNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  EnsembleNoteColor[83]  = loadImage("Octave5BColor.png");
//  EnsembleNoteColor[84]  = loadImage("Octave6CColor.png");
//  EnsembleNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  EnsembleNoteColor[86]  = loadImage("Octave6DColor.png");
//  EnsembleNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  EnsembleNoteColor[88]  = loadImage("Octave6EColor.png");
//  EnsembleNoteColor[89]  = loadImage("Octave6FColor.png");
//  EnsembleNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  EnsembleNoteColor[91]  = loadImage("Octave6GColor.png");
//  EnsembleNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  EnsembleNoteColor[93]  = loadImage("Octave6AColor.png");
//  EnsembleNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  EnsembleNoteColor[95]  = loadImage("Octave6BColor.png");
//  EnsembleNoteColor[96]  = loadImage("Octave7CColor.png");
//  EnsembleNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  EnsembleNoteColor[98]  = loadImage("Octave7DColor.png");
//  EnsembleNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  EnsembleNoteColor[100] = loadImage("Octave7EColor.png");
//  EnsembleNoteColor[101] = loadImage("Octave7FColor.png");
//  EnsembleNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  EnsembleNoteColor[103] = loadImage("Octave7GColor.png");
//  EnsembleNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  EnsembleNoteColor[105] = loadImage("Octave7AColor.png");
//  EnsembleNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  EnsembleNoteColor[107] = loadImage("Octave7BColor.png");
//  EnsembleNoteColor[108] = loadImage("Octave8CColor.png");
//  EnsembleNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  EnsembleNoteColor[110] = loadImage("Octave8DColor.png");
//  EnsembleNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  EnsembleNoteColor[112] = loadImage("Octave8EColor.png");
//  EnsembleNoteColor[113] = loadImage("Octave8FColor.png");
//  EnsembleNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  EnsembleNoteColor[115] = loadImage("Octave8GColor.png");
//  EnsembleNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  EnsembleNoteColor[117] = loadImage("Octave8AColor.png");
//  EnsembleNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  EnsembleNoteColor[119] = loadImage("Octave8BColor.png");
//  EnsembleNoteColor[120] = loadImage("Octave9CColor.png");
//  EnsembleNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  EnsembleNoteColor[122] = loadImage("Octave9DColor.png");
//  EnsembleNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  EnsembleNoteColor[124] = loadImage("Octave9EColor.png");
//  EnsembleNoteColor[125] = loadImage("Octave9FColor.png");
//  EnsembleNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  EnsembleNoteColor[127] = loadImage("Octave9GColor.png");
//  //Brass
//  BrassNoteColor[0]   = loadImage("Octavem1CColor.png");
//  BrassNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  BrassNoteColor[2]   = loadImage("Octavem1DColor.png");
//  BrassNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  BrassNoteColor[4]   = loadImage("Octavem1EColor.png");
//  BrassNoteColor[5]   = loadImage("Octavem1FColor.png");
//  BrassNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  BrassNoteColor[7]   = loadImage("Octavem1GColor.png");
//  BrassNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  BrassNoteColor[9]   = loadImage("Octavem1AColor.png");
//  BrassNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  BrassNoteColor[11]  = loadImage("Octavem1BColor.png");
//  BrassNoteColor[12]  = loadImage("Octave0CColor.png");
//  BrassNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  BrassNoteColor[14]  = loadImage("Octave0DColor.png");
//  BrassNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  BrassNoteColor[16]  = loadImage("Octave0EColor.png");
//  BrassNoteColor[17]  = loadImage("Octave0FColor.png");
//  BrassNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  BrassNoteColor[19]  = loadImage("Octave0GColor.png");
//  BrassNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  BrassNoteColor[21]  = loadImage("Octave0AColor.png");
//  BrassNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  BrassNoteColor[23]  = loadImage("Octave0BColor.png");
//  BrassNoteColor[24]  = loadImage("Octave1CColor.png");
//  BrassNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  BrassNoteColor[26]  = loadImage("Octave1DColor.png");
//  BrassNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  BrassNoteColor[28]  = loadImage("Octave1EColor.png");
//  BrassNoteColor[29]  = loadImage("Octave1FColor.png");
//  BrassNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  BrassNoteColor[31]  = loadImage("Octave1GColor.png");
//  BrassNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  BrassNoteColor[33]  = loadImage("Octave1AColor.png");
//  BrassNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  BrassNoteColor[35]  = loadImage("Octave1BColor.png");
//  BrassNoteColor[36]  = loadImage("Octave2CColor.png");
//  BrassNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  BrassNoteColor[38]  = loadImage("Octave2DColor.png");
//  BrassNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  BrassNoteColor[40]  = loadImage("Octave2EColor.png");
//  BrassNoteColor[41]  = loadImage("Octave2FColor.png");
//  BrassNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  BrassNoteColor[43]  = loadImage("Octave2GColor.png");
//  BrassNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  BrassNoteColor[45]  = loadImage("Octave2AColor.png");
//  BrassNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  BrassNoteColor[47]  = loadImage("Octave2BColor.png");
//  BrassNoteColor[48]  = loadImage("Octave3CColor.png");
//  BrassNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  BrassNoteColor[50]  = loadImage("Octave3DColor.png");
//  BrassNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  BrassNoteColor[52]  = loadImage("Octave3EColor.png");
//  BrassNoteColor[53]  = loadImage("Octave3FColor.png");
//  BrassNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  BrassNoteColor[55]  = loadImage("Octave3GColor.png");
//  BrassNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  BrassNoteColor[57]  = loadImage("Octave3AColor.png");
//  BrassNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  BrassNoteColor[59]  = loadImage("Octave3BColor.png");
//  BrassNoteColor[60]  = loadImage("Octave4CColor.png");
//  BrassNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  BrassNoteColor[62]  = loadImage("Octave4DColor.png");
//  BrassNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  BrassNoteColor[64]  = loadImage("Octave4EColor.png");
//  BrassNoteColor[65]  = loadImage("Octave4FColor.png");
//  BrassNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  BrassNoteColor[67]  = loadImage("Octave4GColor.png");
//  BrassNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  BrassNoteColor[69]  = loadImage("Octave4AColor.png");
//  BrassNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  BrassNoteColor[71]  = loadImage("Octave4BColor.png");
//  BrassNoteColor[72]  = loadImage("Octave5CColor.png");
//  BrassNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  BrassNoteColor[74]  = loadImage("Octave5DColor.png");
//  BrassNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  BrassNoteColor[76]  = loadImage("Octave5EColor.png");
//  BrassNoteColor[77]  = loadImage("Octave5FColor.png");
//  BrassNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  BrassNoteColor[79]  = loadImage("Octave5GColor.png");
//  BrassNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  BrassNoteColor[81]  = loadImage("Octave5AColor.png");
//  BrassNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  BrassNoteColor[83]  = loadImage("Octave5BColor.png");
//  BrassNoteColor[84]  = loadImage("Octave6CColor.png");
//  BrassNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  BrassNoteColor[86]  = loadImage("Octave6DColor.png");
//  BrassNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  BrassNoteColor[88]  = loadImage("Octave6EColor.png");
//  BrassNoteColor[89]  = loadImage("Octave6FColor.png");
//  BrassNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  BrassNoteColor[91]  = loadImage("Octave6GColor.png");
//  BrassNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  BrassNoteColor[93]  = loadImage("Octave6AColor.png");
//  BrassNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  BrassNoteColor[95]  = loadImage("Octave6BColor.png");
//  BrassNoteColor[96]  = loadImage("Octave7CColor.png");
//  BrassNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  BrassNoteColor[98]  = loadImage("Octave7DColor.png");
//  BrassNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  BrassNoteColor[100] = loadImage("Octave7EColor.png");
//  BrassNoteColor[101] = loadImage("Octave7FColor.png");
//  BrassNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  BrassNoteColor[103] = loadImage("Octave7GColor.png");
//  BrassNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  BrassNoteColor[105] = loadImage("Octave7AColor.png");
//  BrassNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  BrassNoteColor[107] = loadImage("Octave7BColor.png");
//  BrassNoteColor[108] = loadImage("Octave8CColor.png");
//  BrassNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  BrassNoteColor[110] = loadImage("Octave8DColor.png");
//  BrassNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  BrassNoteColor[112] = loadImage("Octave8EColor.png");
//  BrassNoteColor[113] = loadImage("Octave8FColor.png");
//  BrassNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  BrassNoteColor[115] = loadImage("Octave8GColor.png");
//  BrassNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  BrassNoteColor[117] = loadImage("Octave8AColor.png");
//  BrassNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  BrassNoteColor[119] = loadImage("Octave8BColor.png");
//  BrassNoteColor[120] = loadImage("Octave9CColor.png");
//  BrassNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  BrassNoteColor[122] = loadImage("Octave9DColor.png");
//  BrassNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  BrassNoteColor[124] = loadImage("Octave9EColor.png");
//  BrassNoteColor[125] = loadImage("Octave9FColor.png");
//  BrassNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  BrassNoteColor[127] = loadImage("Octave9GColor.png");
//  //Reed
//  ReedNoteColor[0]   = loadImage("Octavem1CColor.png");
//  ReedNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  ReedNoteColor[2]   = loadImage("Octavem1DColor.png");
//  ReedNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  ReedNoteColor[4]   = loadImage("Octavem1EColor.png");
//  ReedNoteColor[5]   = loadImage("Octavem1FColor.png");
//  ReedNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  ReedNoteColor[7]   = loadImage("Octavem1GColor.png");
//  ReedNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  ReedNoteColor[9]   = loadImage("Octavem1AColor.png");
//  ReedNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  ReedNoteColor[11]  = loadImage("Octavem1BColor.png");
//  ReedNoteColor[12]  = loadImage("Octave0CColor.png");
//  ReedNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  ReedNoteColor[14]  = loadImage("Octave0DColor.png");
//  ReedNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  ReedNoteColor[16]  = loadImage("Octave0EColor.png");
//  ReedNoteColor[17]  = loadImage("Octave0FColor.png");
//  ReedNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  ReedNoteColor[19]  = loadImage("Octave0GColor.png");
//  ReedNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  ReedNoteColor[21]  = loadImage("Octave0AColor.png");
//  ReedNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  ReedNoteColor[23]  = loadImage("Octave0BColor.png");
//  ReedNoteColor[24]  = loadImage("Octave1CColor.png");
//  ReedNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  ReedNoteColor[26]  = loadImage("Octave1DColor.png");
//  ReedNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  ReedNoteColor[28]  = loadImage("Octave1EColor.png");
//  ReedNoteColor[29]  = loadImage("Octave1FColor.png");
//  ReedNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  ReedNoteColor[31]  = loadImage("Octave1GColor.png");
//  ReedNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  ReedNoteColor[33]  = loadImage("Octave1AColor.png");
//  ReedNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  ReedNoteColor[35]  = loadImage("Octave1BColor.png");
//  ReedNoteColor[36]  = loadImage("Octave2CColor.png");
//  ReedNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  ReedNoteColor[38]  = loadImage("Octave2DColor.png");
//  ReedNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  ReedNoteColor[40]  = loadImage("Octave2EColor.png");
//  ReedNoteColor[41]  = loadImage("Octave2FColor.png");
//  ReedNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  ReedNoteColor[43]  = loadImage("Octave2GColor.png");
//  ReedNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  ReedNoteColor[45]  = loadImage("Octave2AColor.png");
//  ReedNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  ReedNoteColor[47]  = loadImage("Octave2BColor.png");
//  ReedNoteColor[48]  = loadImage("Octave3CColor.png");
//  ReedNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  ReedNoteColor[50]  = loadImage("Octave3DColor.png");
//  ReedNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  ReedNoteColor[52]  = loadImage("Octave3EColor.png");
//  ReedNoteColor[53]  = loadImage("Octave3FColor.png");
//  ReedNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  ReedNoteColor[55]  = loadImage("Octave3GColor.png");
//  ReedNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  ReedNoteColor[57]  = loadImage("Octave3AColor.png");
//  ReedNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  ReedNoteColor[59]  = loadImage("Octave3BColor.png");
//  ReedNoteColor[60]  = loadImage("Octave4CColor.png");
//  ReedNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  ReedNoteColor[62]  = loadImage("Octave4DColor.png");
//  ReedNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  ReedNoteColor[64]  = loadImage("Octave4EColor.png");
//  ReedNoteColor[65]  = loadImage("Octave4FColor.png");
//  ReedNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  ReedNoteColor[67]  = loadImage("Octave4GColor.png");
//  ReedNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  ReedNoteColor[69]  = loadImage("Octave4AColor.png");
//  ReedNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  ReedNoteColor[71]  = loadImage("Octave4BColor.png");
//  ReedNoteColor[72]  = loadImage("Octave5CColor.png");
//  ReedNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  ReedNoteColor[74]  = loadImage("Octave5DColor.png");
//  ReedNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  ReedNoteColor[76]  = loadImage("Octave5EColor.png");
//  ReedNoteColor[77]  = loadImage("Octave5FColor.png");
//  ReedNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  ReedNoteColor[79]  = loadImage("Octave5GColor.png");
//  ReedNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  ReedNoteColor[81]  = loadImage("Octave5AColor.png");
//  ReedNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  ReedNoteColor[83]  = loadImage("Octave5BColor.png");
//  ReedNoteColor[84]  = loadImage("Octave6CColor.png");
//  ReedNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  ReedNoteColor[86]  = loadImage("Octave6DColor.png");
//  ReedNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  ReedNoteColor[88]  = loadImage("Octave6EColor.png");
//  ReedNoteColor[89]  = loadImage("Octave6FColor.png");
//  ReedNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  ReedNoteColor[91]  = loadImage("Octave6GColor.png");
//  ReedNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  ReedNoteColor[93]  = loadImage("Octave6AColor.png");
//  ReedNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  ReedNoteColor[95]  = loadImage("Octave6BColor.png");
//  ReedNoteColor[96]  = loadImage("Octave7CColor.png");
//  ReedNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  ReedNoteColor[98]  = loadImage("Octave7DColor.png");
//  ReedNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  ReedNoteColor[100] = loadImage("Octave7EColor.png");
//  ReedNoteColor[101] = loadImage("Octave7FColor.png");
//  ReedNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  ReedNoteColor[103] = loadImage("Octave7GColor.png");
//  ReedNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  ReedNoteColor[105] = loadImage("Octave7AColor.png");
//  ReedNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  ReedNoteColor[107] = loadImage("Octave7BColor.png");
//  ReedNoteColor[108] = loadImage("Octave8CColor.png");
//  ReedNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  ReedNoteColor[110] = loadImage("Octave8DColor.png");
//  ReedNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  ReedNoteColor[112] = loadImage("Octave8EColor.png");
//  ReedNoteColor[113] = loadImage("Octave8FColor.png");
//  ReedNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  ReedNoteColor[115] = loadImage("Octave8GColor.png");
//  ReedNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  ReedNoteColor[117] = loadImage("Octave8AColor.png");
//  ReedNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  ReedNoteColor[119] = loadImage("Octave8BColor.png");
//  ReedNoteColor[120] = loadImage("Octave9CColor.png");
//  ReedNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  ReedNoteColor[122] = loadImage("Octave9DColor.png");
//  ReedNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  ReedNoteColor[124] = loadImage("Octave9EColor.png");
//  ReedNoteColor[125] = loadImage("Octave9FColor.png");
//  ReedNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  ReedNoteColor[127] = loadImage("Octave9GColor.png");
//  //Pipe
//  PipeNoteColor[0]   = loadImage("Octavem1CColor.png");
//  PipeNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  PipeNoteColor[2]   = loadImage("Octavem1DColor.png");
//  PipeNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  PipeNoteColor[4]   = loadImage("Octavem1EColor.png");
//  PipeNoteColor[5]   = loadImage("Octavem1FColor.png");
//  PipeNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  PipeNoteColor[7]   = loadImage("Octavem1GColor.png");
//  PipeNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  PipeNoteColor[9]   = loadImage("Octavem1AColor.png");
//  PipeNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  PipeNoteColor[11]  = loadImage("Octavem1BColor.png");
//  PipeNoteColor[12]  = loadImage("Octave0CColor.png");
//  PipeNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  PipeNoteColor[14]  = loadImage("Octave0DColor.png");
//  PipeNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  PipeNoteColor[16]  = loadImage("Octave0EColor.png");
//  PipeNoteColor[17]  = loadImage("Octave0FColor.png");
//  PipeNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  PipeNoteColor[19]  = loadImage("Octave0GColor.png");
//  PipeNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  PipeNoteColor[21]  = loadImage("Octave0AColor.png");
//  PipeNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  PipeNoteColor[23]  = loadImage("Octave0BColor.png");
//  PipeNoteColor[24]  = loadImage("Octave1CColor.png");
//  PipeNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  PipeNoteColor[26]  = loadImage("Octave1DColor.png");
//  PipeNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  PipeNoteColor[28]  = loadImage("Octave1EColor.png");
//  PipeNoteColor[29]  = loadImage("Octave1FColor.png");
//  PipeNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  PipeNoteColor[31]  = loadImage("Octave1GColor.png");
//  PipeNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  PipeNoteColor[33]  = loadImage("Octave1AColor.png");
//  PipeNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  PipeNoteColor[35]  = loadImage("Octave1BColor.png");
//  PipeNoteColor[36]  = loadImage("Octave2CColor.png");
//  PipeNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  PipeNoteColor[38]  = loadImage("Octave2DColor.png");
//  PipeNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  PipeNoteColor[40]  = loadImage("Octave2EColor.png");
//  PipeNoteColor[41]  = loadImage("Octave2FColor.png");
//  PipeNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  PipeNoteColor[43]  = loadImage("Octave2GColor.png");
//  PipeNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  PipeNoteColor[45]  = loadImage("Octave2AColor.png");
//  PipeNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  PipeNoteColor[47]  = loadImage("Octave2BColor.png");
//  PipeNoteColor[48]  = loadImage("Octave3CColor.png");
//  PipeNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  PipeNoteColor[50]  = loadImage("Octave3DColor.png");
//  PipeNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  PipeNoteColor[52]  = loadImage("Octave3EColor.png");
//  PipeNoteColor[53]  = loadImage("Octave3FColor.png");
//  PipeNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  PipeNoteColor[55]  = loadImage("Octave3GColor.png");
//  PipeNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  PipeNoteColor[57]  = loadImage("Octave3AColor.png");
//  PipeNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  PipeNoteColor[59]  = loadImage("Octave3BColor.png");
//  PipeNoteColor[60]  = loadImage("Octave4CColor.png");
//  PipeNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  PipeNoteColor[62]  = loadImage("Octave4DColor.png");
//  PipeNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  PipeNoteColor[64]  = loadImage("Octave4EColor.png");
//  PipeNoteColor[65]  = loadImage("Octave4FColor.png");
//  PipeNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  PipeNoteColor[67]  = loadImage("Octave4GColor.png");
//  PipeNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  PipeNoteColor[69]  = loadImage("Octave4AColor.png");
//  PipeNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  PipeNoteColor[71]  = loadImage("Octave4BColor.png");
//  PipeNoteColor[72]  = loadImage("Octave5CColor.png");
//  PipeNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  PipeNoteColor[74]  = loadImage("Octave5DColor.png");
//  PipeNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  PipeNoteColor[76]  = loadImage("Octave5EColor.png");
//  PipeNoteColor[77]  = loadImage("Octave5FColor.png");
//  PipeNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  PipeNoteColor[79]  = loadImage("Octave5GColor.png");
//  PipeNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  PipeNoteColor[81]  = loadImage("Octave5AColor.png");
//  PipeNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  PipeNoteColor[83]  = loadImage("Octave5BColor.png");
//  PipeNoteColor[84]  = loadImage("Octave6CColor.png");
//  PipeNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  PipeNoteColor[86]  = loadImage("Octave6DColor.png");
//  PipeNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  PipeNoteColor[88]  = loadImage("Octave6EColor.png");
//  PipeNoteColor[89]  = loadImage("Octave6FColor.png");
//  PipeNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  PipeNoteColor[91]  = loadImage("Octave6GColor.png");
//  PipeNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  PipeNoteColor[93]  = loadImage("Octave6AColor.png");
//  PipeNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  PipeNoteColor[95]  = loadImage("Octave6BColor.png");
//  PipeNoteColor[96]  = loadImage("Octave7CColor.png");
//  PipeNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  PipeNoteColor[98]  = loadImage("Octave7DColor.png");
//  PipeNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  PipeNoteColor[100] = loadImage("Octave7EColor.png");
//  PipeNoteColor[101] = loadImage("Octave7FColor.png");
//  PipeNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  PipeNoteColor[103] = loadImage("Octave7GColor.png");
//  PipeNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  PipeNoteColor[105] = loadImage("Octave7AColor.png");
//  PipeNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  PipeNoteColor[107] = loadImage("Octave7BColor.png");
//  PipeNoteColor[108] = loadImage("Octave8CColor.png");
//  PipeNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  PipeNoteColor[110] = loadImage("Octave8DColor.png");
//  PipeNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  PipeNoteColor[112] = loadImage("Octave8EColor.png");
//  PipeNoteColor[113] = loadImage("Octave8FColor.png");
//  PipeNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  PipeNoteColor[115] = loadImage("Octave8GColor.png");
//  PipeNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  PipeNoteColor[117] = loadImage("Octave8AColor.png");
//  PipeNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  PipeNoteColor[119] = loadImage("Octave8BColor.png");
//  PipeNoteColor[120] = loadImage("Octave9CColor.png");
//  PipeNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  PipeNoteColor[122] = loadImage("Octave9DColor.png");
//  PipeNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  PipeNoteColor[124] = loadImage("Octave9EColor.png");
//  PipeNoteColor[125] = loadImage("Octave9FColor.png");
//  PipeNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  PipeNoteColor[127] = loadImage("Octave9GColor.png");
//  //Synth Lead
//  SynthLeadNoteColor[0]   = loadImage("Octavem1CColor.png");
//  SynthLeadNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  SynthLeadNoteColor[2]   = loadImage("Octavem1DColor.png");
//  SynthLeadNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  SynthLeadNoteColor[4]   = loadImage("Octavem1EColor.png");
//  SynthLeadNoteColor[5]   = loadImage("Octavem1FColor.png");
//  SynthLeadNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  SynthLeadNoteColor[7]   = loadImage("Octavem1GColor.png");
//  SynthLeadNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  SynthLeadNoteColor[9]   = loadImage("Octavem1AColor.png");
//  SynthLeadNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  SynthLeadNoteColor[11]  = loadImage("Octavem1BColor.png");
//  SynthLeadNoteColor[12]  = loadImage("Octave0CColor.png");
//  SynthLeadNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  SynthLeadNoteColor[14]  = loadImage("Octave0DColor.png");
//  SynthLeadNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  SynthLeadNoteColor[16]  = loadImage("Octave0EColor.png");
//  SynthLeadNoteColor[17]  = loadImage("Octave0FColor.png");
//  SynthLeadNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  SynthLeadNoteColor[19]  = loadImage("Octave0GColor.png");
//  SynthLeadNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  SynthLeadNoteColor[21]  = loadImage("Octave0AColor.png");
//  SynthLeadNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  SynthLeadNoteColor[23]  = loadImage("Octave0BColor.png");
//  SynthLeadNoteColor[24]  = loadImage("Octave1CColor.png");
//  SynthLeadNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  SynthLeadNoteColor[26]  = loadImage("Octave1DColor.png");
//  SynthLeadNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  SynthLeadNoteColor[28]  = loadImage("Octave1EColor.png");
//  SynthLeadNoteColor[29]  = loadImage("Octave1FColor.png");
//  SynthLeadNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  SynthLeadNoteColor[31]  = loadImage("Octave1GColor.png");
//  SynthLeadNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  SynthLeadNoteColor[33]  = loadImage("Octave1AColor.png");
//  SynthLeadNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  SynthLeadNoteColor[35]  = loadImage("Octave1BColor.png");
//  SynthLeadNoteColor[36]  = loadImage("Octave2CColor.png");
//  SynthLeadNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  SynthLeadNoteColor[38]  = loadImage("Octave2DColor.png");
//  SynthLeadNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  SynthLeadNoteColor[40]  = loadImage("Octave2EColor.png");
//  SynthLeadNoteColor[41]  = loadImage("Octave2FColor.png");
//  SynthLeadNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  SynthLeadNoteColor[43]  = loadImage("Octave2GColor.png");
//  SynthLeadNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  SynthLeadNoteColor[45]  = loadImage("Octave2AColor.png");
//  SynthLeadNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  SynthLeadNoteColor[47]  = loadImage("Octave2BColor.png");
//  SynthLeadNoteColor[48]  = loadImage("Octave3CColor.png");
//  SynthLeadNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  SynthLeadNoteColor[50]  = loadImage("Octave3DColor.png");
//  SynthLeadNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  SynthLeadNoteColor[52]  = loadImage("Octave3EColor.png");
//  SynthLeadNoteColor[53]  = loadImage("Octave3FColor.png");
//  SynthLeadNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  SynthLeadNoteColor[55]  = loadImage("Octave3GColor.png");
//  SynthLeadNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  SynthLeadNoteColor[57]  = loadImage("Octave3AColor.png");
//  SynthLeadNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  SynthLeadNoteColor[59]  = loadImage("Octave3BColor.png");
//  SynthLeadNoteColor[60]  = loadImage("Octave4CColor.png");
//  SynthLeadNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  SynthLeadNoteColor[62]  = loadImage("Octave4DColor.png");
//  SynthLeadNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  SynthLeadNoteColor[64]  = loadImage("Octave4EColor.png");
//  SynthLeadNoteColor[65]  = loadImage("Octave4FColor.png");
//  SynthLeadNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  SynthLeadNoteColor[67]  = loadImage("Octave4GColor.png");
//  SynthLeadNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  SynthLeadNoteColor[69]  = loadImage("Octave4AColor.png");
//  SynthLeadNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  SynthLeadNoteColor[71]  = loadImage("Octave4BColor.png");
//  SynthLeadNoteColor[72]  = loadImage("Octave5CColor.png");
//  SynthLeadNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  SynthLeadNoteColor[74]  = loadImage("Octave5DColor.png");
//  SynthLeadNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  SynthLeadNoteColor[76]  = loadImage("Octave5EColor.png");
//  SynthLeadNoteColor[77]  = loadImage("Octave5FColor.png");
//  SynthLeadNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  SynthLeadNoteColor[79]  = loadImage("Octave5GColor.png");
//  SynthLeadNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  SynthLeadNoteColor[81]  = loadImage("Octave5AColor.png");
//  SynthLeadNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  SynthLeadNoteColor[83]  = loadImage("Octave5BColor.png");
//  SynthLeadNoteColor[84]  = loadImage("Octave6CColor.png");
//  SynthLeadNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  SynthLeadNoteColor[86]  = loadImage("Octave6DColor.png");
//  SynthLeadNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  SynthLeadNoteColor[88]  = loadImage("Octave6EColor.png");
//  SynthLeadNoteColor[89]  = loadImage("Octave6FColor.png");
//  SynthLeadNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  SynthLeadNoteColor[91]  = loadImage("Octave6GColor.png");
//  SynthLeadNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  SynthLeadNoteColor[93]  = loadImage("Octave6AColor.png");
//  SynthLeadNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  SynthLeadNoteColor[95]  = loadImage("Octave6BColor.png");
//  SynthLeadNoteColor[96]  = loadImage("Octave7CColor.png");
//  SynthLeadNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  SynthLeadNoteColor[98]  = loadImage("Octave7DColor.png");
//  SynthLeadNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  SynthLeadNoteColor[100] = loadImage("Octave7EColor.png");
//  SynthLeadNoteColor[101] = loadImage("Octave7FColor.png");
//  SynthLeadNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  SynthLeadNoteColor[103] = loadImage("Octave7GColor.png");
//  SynthLeadNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  SynthLeadNoteColor[105] = loadImage("Octave7AColor.png");
//  SynthLeadNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  SynthLeadNoteColor[107] = loadImage("Octave7BColor.png");
//  SynthLeadNoteColor[108] = loadImage("Octave8CColor.png");
//  SynthLeadNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  SynthLeadNoteColor[110] = loadImage("Octave8DColor.png");
//  SynthLeadNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  SynthLeadNoteColor[112] = loadImage("Octave8EColor.png");
//  SynthLeadNoteColor[113] = loadImage("Octave8FColor.png");
//  SynthLeadNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  SynthLeadNoteColor[115] = loadImage("Octave8GColor.png");
//  SynthLeadNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  SynthLeadNoteColor[117] = loadImage("Octave8AColor.png");
//  SynthLeadNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  SynthLeadNoteColor[119] = loadImage("Octave8BColor.png");
//  SynthLeadNoteColor[120] = loadImage("Octave9CColor.png");
//  SynthLeadNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  SynthLeadNoteColor[122] = loadImage("Octave9DColor.png");
//  SynthLeadNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  SynthLeadNoteColor[124] = loadImage("Octave9EColor.png");
//  SynthLeadNoteColor[125] = loadImage("Octave9FColor.png");
//  SynthLeadNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  SynthLeadNoteColor[127] = loadImage("Octave9GColor.png");
//  //Synth Pad
//  SynthPadNoteColor[0]   = loadImage("Octavem1CColor.png");
//  SynthPadNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  SynthPadNoteColor[2]   = loadImage("Octavem1DColor.png");
//  SynthPadNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  SynthPadNoteColor[4]   = loadImage("Octavem1EColor.png");
//  SynthPadNoteColor[5]   = loadImage("Octavem1FColor.png");
//  SynthPadNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  SynthPadNoteColor[7]   = loadImage("Octavem1GColor.png");
//  SynthPadNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  SynthPadNoteColor[9]   = loadImage("Octavem1AColor.png");
//  SynthPadNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  SynthPadNoteColor[11]  = loadImage("Octavem1BColor.png");
//  SynthPadNoteColor[12]  = loadImage("Octave0CColor.png");
//  SynthPadNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  SynthPadNoteColor[14]  = loadImage("Octave0DColor.png");
//  SynthPadNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  SynthPadNoteColor[16]  = loadImage("Octave0EColor.png");
//  SynthPadNoteColor[17]  = loadImage("Octave0FColor.png");
//  SynthPadNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  SynthPadNoteColor[19]  = loadImage("Octave0GColor.png");
//  SynthPadNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  SynthPadNoteColor[21]  = loadImage("Octave0AColor.png");
//  SynthPadNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  SynthPadNoteColor[23]  = loadImage("Octave0BColor.png");
//  SynthPadNoteColor[24]  = loadImage("Octave1CColor.png");
//  SynthPadNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  SynthPadNoteColor[26]  = loadImage("Octave1DColor.png");
//  SynthPadNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  SynthPadNoteColor[28]  = loadImage("Octave1EColor.png");
//  SynthPadNoteColor[29]  = loadImage("Octave1FColor.png");
//  SynthPadNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  SynthPadNoteColor[31]  = loadImage("Octave1GColor.png");
//  SynthPadNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  SynthPadNoteColor[33]  = loadImage("Octave1AColor.png");
//  SynthPadNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  SynthPadNoteColor[35]  = loadImage("Octave1BColor.png");
//  SynthPadNoteColor[36]  = loadImage("Octave2CColor.png");
//  SynthPadNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  SynthPadNoteColor[38]  = loadImage("Octave2DColor.png");
//  SynthPadNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  SynthPadNoteColor[40]  = loadImage("Octave2EColor.png");
//  SynthPadNoteColor[41]  = loadImage("Octave2FColor.png");
//  SynthPadNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  SynthPadNoteColor[43]  = loadImage("Octave2GColor.png");
//  SynthPadNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  SynthPadNoteColor[45]  = loadImage("Octave2AColor.png");
//  SynthPadNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  SynthPadNoteColor[47]  = loadImage("Octave2BColor.png");
//  SynthPadNoteColor[48]  = loadImage("Octave3CColor.png");
//  SynthPadNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  SynthPadNoteColor[50]  = loadImage("Octave3DColor.png");
//  SynthPadNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  SynthPadNoteColor[52]  = loadImage("Octave3EColor.png");
//  SynthPadNoteColor[53]  = loadImage("Octave3FColor.png");
//  SynthPadNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  SynthPadNoteColor[55]  = loadImage("Octave3GColor.png");
//  SynthPadNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  SynthPadNoteColor[57]  = loadImage("Octave3AColor.png");
//  SynthPadNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  SynthPadNoteColor[59]  = loadImage("Octave3BColor.png");
//  SynthPadNoteColor[60]  = loadImage("Octave4CColor.png");
//  SynthPadNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  SynthPadNoteColor[62]  = loadImage("Octave4DColor.png");
//  SynthPadNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  SynthPadNoteColor[64]  = loadImage("Octave4EColor.png");
//  SynthPadNoteColor[65]  = loadImage("Octave4FColor.png");
//  SynthPadNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  SynthPadNoteColor[67]  = loadImage("Octave4GColor.png");
//  SynthPadNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  SynthPadNoteColor[69]  = loadImage("Octave4AColor.png");
//  SynthPadNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  SynthPadNoteColor[71]  = loadImage("Octave4BColor.png");
//  SynthPadNoteColor[72]  = loadImage("Octave5CColor.png");
//  SynthPadNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  SynthPadNoteColor[74]  = loadImage("Octave5DColor.png");
//  SynthPadNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  SynthPadNoteColor[76]  = loadImage("Octave5EColor.png");
//  SynthPadNoteColor[77]  = loadImage("Octave5FColor.png");
//  SynthPadNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  SynthPadNoteColor[79]  = loadImage("Octave5GColor.png");
//  SynthPadNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  SynthPadNoteColor[81]  = loadImage("Octave5AColor.png");
//  SynthPadNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  SynthPadNoteColor[83]  = loadImage("Octave5BColor.png");
//  SynthPadNoteColor[84]  = loadImage("Octave6CColor.png");
//  SynthPadNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  SynthPadNoteColor[86]  = loadImage("Octave6DColor.png");
//  SynthPadNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  SynthPadNoteColor[88]  = loadImage("Octave6EColor.png");
//  SynthPadNoteColor[89]  = loadImage("Octave6FColor.png");
//  SynthPadNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  SynthPadNoteColor[91]  = loadImage("Octave6GColor.png");
//  SynthPadNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  SynthPadNoteColor[93]  = loadImage("Octave6AColor.png");
//  SynthPadNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  SynthPadNoteColor[95]  = loadImage("Octave6BColor.png");
//  SynthPadNoteColor[96]  = loadImage("Octave7CColor.png");
//  SynthPadNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  SynthPadNoteColor[98]  = loadImage("Octave7DColor.png");
//  SynthPadNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  SynthPadNoteColor[100] = loadImage("Octave7EColor.png");
//  SynthPadNoteColor[101] = loadImage("Octave7FColor.png");
//  SynthPadNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  SynthPadNoteColor[103] = loadImage("Octave7GColor.png");
//  SynthPadNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  SynthPadNoteColor[105] = loadImage("Octave7AColor.png");
//  SynthPadNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  SynthPadNoteColor[107] = loadImage("Octave7BColor.png");
//  SynthPadNoteColor[108] = loadImage("Octave8CColor.png");
//  SynthPadNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  SynthPadNoteColor[110] = loadImage("Octave8DColor.png");
//  SynthPadNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  SynthPadNoteColor[112] = loadImage("Octave8EColor.png");
//  SynthPadNoteColor[113] = loadImage("Octave8FColor.png");
//  SynthPadNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  SynthPadNoteColor[115] = loadImage("Octave8GColor.png");
//  SynthPadNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  SynthPadNoteColor[117] = loadImage("Octave8AColor.png");
//  SynthPadNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  SynthPadNoteColor[119] = loadImage("Octave8BColor.png");
//  SynthPadNoteColor[120] = loadImage("Octave9CColor.png");
//  SynthPadNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  SynthPadNoteColor[122] = loadImage("Octave9DColor.png");
//  SynthPadNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  SynthPadNoteColor[124] = loadImage("Octave9EColor.png");
//  SynthPadNoteColor[125] = loadImage("Octave9FColor.png");
//  SynthPadNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  SynthPadNoteColor[127] = loadImage("Octave9GColor.png");
//  //Synth Effects
//  SynthEffectsNoteColor[0]   = loadImage("Octavem1CColor.png");
//  SynthEffectsNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  SynthEffectsNoteColor[2]   = loadImage("Octavem1DColor.png");
//  SynthEffectsNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  SynthEffectsNoteColor[4]   = loadImage("Octavem1EColor.png");
//  SynthEffectsNoteColor[5]   = loadImage("Octavem1FColor.png");
//  SynthEffectsNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  SynthEffectsNoteColor[7]   = loadImage("Octavem1GColor.png");
//  SynthEffectsNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  SynthEffectsNoteColor[9]   = loadImage("Octavem1AColor.png");
//  SynthEffectsNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  SynthEffectsNoteColor[11]  = loadImage("Octavem1BColor.png");
//  SynthEffectsNoteColor[12]  = loadImage("Octave0CColor.png");
//  SynthEffectsNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  SynthEffectsNoteColor[14]  = loadImage("Octave0DColor.png");
//  SynthEffectsNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  SynthEffectsNoteColor[16]  = loadImage("Octave0EColor.png");
//  SynthEffectsNoteColor[17]  = loadImage("Octave0FColor.png");
//  SynthEffectsNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  SynthEffectsNoteColor[19]  = loadImage("Octave0GColor.png");
//  SynthEffectsNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  SynthEffectsNoteColor[21]  = loadImage("Octave0AColor.png");
//  SynthEffectsNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  SynthEffectsNoteColor[23]  = loadImage("Octave0BColor.png");
//  SynthEffectsNoteColor[24]  = loadImage("Octave1CColor.png");
//  SynthEffectsNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  SynthEffectsNoteColor[26]  = loadImage("Octave1DColor.png");
//  SynthEffectsNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  SynthEffectsNoteColor[28]  = loadImage("Octave1EColor.png");
//  SynthEffectsNoteColor[29]  = loadImage("Octave1FColor.png");
//  SynthEffectsNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  SynthEffectsNoteColor[31]  = loadImage("Octave1GColor.png");
//  SynthEffectsNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  SynthEffectsNoteColor[33]  = loadImage("Octave1AColor.png");
//  SynthEffectsNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  SynthEffectsNoteColor[35]  = loadImage("Octave1BColor.png");
//  SynthEffectsNoteColor[36]  = loadImage("Octave2CColor.png");
//  SynthEffectsNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  SynthEffectsNoteColor[38]  = loadImage("Octave2DColor.png");
//  SynthEffectsNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  SynthEffectsNoteColor[40]  = loadImage("Octave2EColor.png");
//  SynthEffectsNoteColor[41]  = loadImage("Octave2FColor.png");
//  SynthEffectsNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  SynthEffectsNoteColor[43]  = loadImage("Octave2GColor.png");
//  SynthEffectsNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  SynthEffectsNoteColor[45]  = loadImage("Octave2AColor.png");
//  SynthEffectsNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  SynthEffectsNoteColor[47]  = loadImage("Octave2BColor.png");
//  SynthEffectsNoteColor[48]  = loadImage("Octave3CColor.png");
//  SynthEffectsNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  SynthEffectsNoteColor[50]  = loadImage("Octave3DColor.png");
//  SynthEffectsNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  SynthEffectsNoteColor[52]  = loadImage("Octave3EColor.png");
//  SynthEffectsNoteColor[53]  = loadImage("Octave3FColor.png");
//  SynthEffectsNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  SynthEffectsNoteColor[55]  = loadImage("Octave3GColor.png");
//  SynthEffectsNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  SynthEffectsNoteColor[57]  = loadImage("Octave3AColor.png");
//  SynthEffectsNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  SynthEffectsNoteColor[59]  = loadImage("Octave3BColor.png");
//  SynthEffectsNoteColor[60]  = loadImage("Octave4CColor.png");
//  SynthEffectsNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  SynthEffectsNoteColor[62]  = loadImage("Octave4DColor.png");
//  SynthEffectsNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  SynthEffectsNoteColor[64]  = loadImage("Octave4EColor.png");
//  SynthEffectsNoteColor[65]  = loadImage("Octave4FColor.png");
//  SynthEffectsNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  SynthEffectsNoteColor[67]  = loadImage("Octave4GColor.png");
//  SynthEffectsNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  SynthEffectsNoteColor[69]  = loadImage("Octave4AColor.png");
//  SynthEffectsNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  SynthEffectsNoteColor[71]  = loadImage("Octave4BColor.png");
//  SynthEffectsNoteColor[72]  = loadImage("Octave5CColor.png");
//  SynthEffectsNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  SynthEffectsNoteColor[74]  = loadImage("Octave5DColor.png");
//  SynthEffectsNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  SynthEffectsNoteColor[76]  = loadImage("Octave5EColor.png");
//  SynthEffectsNoteColor[77]  = loadImage("Octave5FColor.png");
//  SynthEffectsNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  SynthEffectsNoteColor[79]  = loadImage("Octave5GColor.png");
//  SynthEffectsNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  SynthEffectsNoteColor[81]  = loadImage("Octave5AColor.png");
//  SynthEffectsNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  SynthEffectsNoteColor[83]  = loadImage("Octave5BColor.png");
//  SynthEffectsNoteColor[84]  = loadImage("Octave6CColor.png");
//  SynthEffectsNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  SynthEffectsNoteColor[86]  = loadImage("Octave6DColor.png");
//  SynthEffectsNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  SynthEffectsNoteColor[88]  = loadImage("Octave6EColor.png");
//  SynthEffectsNoteColor[89]  = loadImage("Octave6FColor.png");
//  SynthEffectsNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  SynthEffectsNoteColor[91]  = loadImage("Octave6GColor.png");
//  SynthEffectsNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  SynthEffectsNoteColor[93]  = loadImage("Octave6AColor.png");
//  SynthEffectsNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  SynthEffectsNoteColor[95]  = loadImage("Octave6BColor.png");
//  SynthEffectsNoteColor[96]  = loadImage("Octave7CColor.png");
//  SynthEffectsNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  SynthEffectsNoteColor[98]  = loadImage("Octave7DColor.png");
//  SynthEffectsNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  SynthEffectsNoteColor[100] = loadImage("Octave7EColor.png");
//  SynthEffectsNoteColor[101] = loadImage("Octave7FColor.png");
//  SynthEffectsNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  SynthEffectsNoteColor[103] = loadImage("Octave7GColor.png");
//  SynthEffectsNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  SynthEffectsNoteColor[105] = loadImage("Octave7AColor.png");
//  SynthEffectsNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  SynthEffectsNoteColor[107] = loadImage("Octave7BColor.png");
//  SynthEffectsNoteColor[108] = loadImage("Octave8CColor.png");
//  SynthEffectsNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  SynthEffectsNoteColor[110] = loadImage("Octave8DColor.png");
//  SynthEffectsNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  SynthEffectsNoteColor[112] = loadImage("Octave8EColor.png");
//  SynthEffectsNoteColor[113] = loadImage("Octave8FColor.png");
//  SynthEffectsNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  SynthEffectsNoteColor[115] = loadImage("Octave8GColor.png");
//  SynthEffectsNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  SynthEffectsNoteColor[117] = loadImage("Octave8AColor.png");
//  SynthEffectsNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  SynthEffectsNoteColor[119] = loadImage("Octave8BColor.png");
//  SynthEffectsNoteColor[120] = loadImage("Octave9CColor.png");
//  SynthEffectsNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  SynthEffectsNoteColor[122] = loadImage("Octave9DColor.png");
//  SynthEffectsNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  SynthEffectsNoteColor[124] = loadImage("Octave9EColor.png");
//  SynthEffectsNoteColor[125] = loadImage("Octave9FColor.png");
//  SynthEffectsNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  SynthEffectsNoteColor[127] = loadImage("Octave9GColor.png");
//  //Ethnic
//  EthnicNoteColor[0]   = loadImage("Octavem1CColor.png");
//  EthnicNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  EthnicNoteColor[2]   = loadImage("Octavem1DColor.png");
//  EthnicNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  EthnicNoteColor[4]   = loadImage("Octavem1EColor.png");
//  EthnicNoteColor[5]   = loadImage("Octavem1FColor.png");
//  EthnicNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  EthnicNoteColor[7]   = loadImage("Octavem1GColor.png");
//  EthnicNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  EthnicNoteColor[9]   = loadImage("Octavem1AColor.png");
//  EthnicNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  EthnicNoteColor[11]  = loadImage("Octavem1BColor.png");
//  EthnicNoteColor[12]  = loadImage("Octave0CColor.png");
//  EthnicNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  EthnicNoteColor[14]  = loadImage("Octave0DColor.png");
//  EthnicNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  EthnicNoteColor[16]  = loadImage("Octave0EColor.png");
//  EthnicNoteColor[17]  = loadImage("Octave0FColor.png");
//  EthnicNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  EthnicNoteColor[19]  = loadImage("Octave0GColor.png");
//  EthnicNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  EthnicNoteColor[21]  = loadImage("Octave0AColor.png");
//  EthnicNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  EthnicNoteColor[23]  = loadImage("Octave0BColor.png");
//  EthnicNoteColor[24]  = loadImage("Octave1CColor.png");
//  EthnicNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  EthnicNoteColor[26]  = loadImage("Octave1DColor.png");
//  EthnicNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  EthnicNoteColor[28]  = loadImage("Octave1EColor.png");
//  EthnicNoteColor[29]  = loadImage("Octave1FColor.png");
//  EthnicNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  EthnicNoteColor[31]  = loadImage("Octave1GColor.png");
//  EthnicNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  EthnicNoteColor[33]  = loadImage("Octave1AColor.png");
//  EthnicNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  EthnicNoteColor[35]  = loadImage("Octave1BColor.png");
//  EthnicNoteColor[36]  = loadImage("Octave2CColor.png");
//  EthnicNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  EthnicNoteColor[38]  = loadImage("Octave2DColor.png");
//  EthnicNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  EthnicNoteColor[40]  = loadImage("Octave2EColor.png");
//  EthnicNoteColor[41]  = loadImage("Octave2FColor.png");
//  EthnicNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  EthnicNoteColor[43]  = loadImage("Octave2GColor.png");
//  EthnicNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  EthnicNoteColor[45]  = loadImage("Octave2AColor.png");
//  EthnicNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  EthnicNoteColor[47]  = loadImage("Octave2BColor.png");
//  EthnicNoteColor[48]  = loadImage("Octave3CColor.png");
//  EthnicNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  EthnicNoteColor[50]  = loadImage("Octave3DColor.png");
//  EthnicNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  EthnicNoteColor[52]  = loadImage("Octave3EColor.png");
//  EthnicNoteColor[53]  = loadImage("Octave3FColor.png");
//  EthnicNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  EthnicNoteColor[55]  = loadImage("Octave3GColor.png");
//  EthnicNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  EthnicNoteColor[57]  = loadImage("Octave3AColor.png");
//  EthnicNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  EthnicNoteColor[59]  = loadImage("Octave3BColor.png");
//  EthnicNoteColor[60]  = loadImage("Octave4CColor.png");
//  EthnicNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  EthnicNoteColor[62]  = loadImage("Octave4DColor.png");
//  EthnicNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  EthnicNoteColor[64]  = loadImage("Octave4EColor.png");
//  EthnicNoteColor[65]  = loadImage("Octave4FColor.png");
//  EthnicNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  EthnicNoteColor[67]  = loadImage("Octave4GColor.png");
//  EthnicNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  EthnicNoteColor[69]  = loadImage("Octave4AColor.png");
//  EthnicNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  EthnicNoteColor[71]  = loadImage("Octave4BColor.png");
//  EthnicNoteColor[72]  = loadImage("Octave5CColor.png");
//  EthnicNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  EthnicNoteColor[74]  = loadImage("Octave5DColor.png");
//  EthnicNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  EthnicNoteColor[76]  = loadImage("Octave5EColor.png");
//  EthnicNoteColor[77]  = loadImage("Octave5FColor.png");
//  EthnicNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  EthnicNoteColor[79]  = loadImage("Octave5GColor.png");
//  EthnicNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  EthnicNoteColor[81]  = loadImage("Octave5AColor.png");
//  EthnicNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  EthnicNoteColor[83]  = loadImage("Octave5BColor.png");
//  EthnicNoteColor[84]  = loadImage("Octave6CColor.png");
//  EthnicNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  EthnicNoteColor[86]  = loadImage("Octave6DColor.png");
//  EthnicNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  EthnicNoteColor[88]  = loadImage("Octave6EColor.png");
//  EthnicNoteColor[89]  = loadImage("Octave6FColor.png");
//  EthnicNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  EthnicNoteColor[91]  = loadImage("Octave6GColor.png");
//  EthnicNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  EthnicNoteColor[93]  = loadImage("Octave6AColor.png");
//  EthnicNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  EthnicNoteColor[95]  = loadImage("Octave6BColor.png");
//  EthnicNoteColor[96]  = loadImage("Octave7CColor.png");
//  EthnicNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  EthnicNoteColor[98]  = loadImage("Octave7DColor.png");
//  EthnicNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  EthnicNoteColor[100] = loadImage("Octave7EColor.png");
//  EthnicNoteColor[101] = loadImage("Octave7FColor.png");
//  EthnicNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  EthnicNoteColor[103] = loadImage("Octave7GColor.png");
//  EthnicNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  EthnicNoteColor[105] = loadImage("Octave7AColor.png");
//  EthnicNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  EthnicNoteColor[107] = loadImage("Octave7BColor.png");
//  EthnicNoteColor[108] = loadImage("Octave8CColor.png");
//  EthnicNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  EthnicNoteColor[110] = loadImage("Octave8DColor.png");
//  EthnicNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  EthnicNoteColor[112] = loadImage("Octave8EColor.png");
//  EthnicNoteColor[113] = loadImage("Octave8FColor.png");
//  EthnicNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  EthnicNoteColor[115] = loadImage("Octave8GColor.png");
//  EthnicNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  EthnicNoteColor[117] = loadImage("Octave8AColor.png");
//  EthnicNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  EthnicNoteColor[119] = loadImage("Octave8BColor.png");
//  EthnicNoteColor[120] = loadImage("Octave9CColor.png");
//  EthnicNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  EthnicNoteColor[122] = loadImage("Octave9DColor.png");
//  EthnicNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  EthnicNoteColor[124] = loadImage("Octave9EColor.png");
//  EthnicNoteColor[125] = loadImage("Octave9FColor.png");
//  EthnicNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  EthnicNoteColor[127] = loadImage("Octave9GColor.png");
//  //Percussive
//  PercussiveNoteColor[0]   = loadImage("Octavem1CColor.png");
//  PercussiveNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  PercussiveNoteColor[2]   = loadImage("Octavem1DColor.png");
//  PercussiveNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  PercussiveNoteColor[4]   = loadImage("Octavem1EColor.png");
//  PercussiveNoteColor[5]   = loadImage("Octavem1FColor.png");
//  PercussiveNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  PercussiveNoteColor[7]   = loadImage("Octavem1GColor.png");
//  PercussiveNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  PercussiveNoteColor[9]   = loadImage("Octavem1AColor.png");
//  PercussiveNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  PercussiveNoteColor[11]  = loadImage("Octavem1BColor.png");
//  PercussiveNoteColor[12]  = loadImage("Octave0CColor.png");
//  PercussiveNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  PercussiveNoteColor[14]  = loadImage("Octave0DColor.png");
//  PercussiveNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  PercussiveNoteColor[16]  = loadImage("Octave0EColor.png");
//  PercussiveNoteColor[17]  = loadImage("Octave0FColor.png");
//  PercussiveNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  PercussiveNoteColor[19]  = loadImage("Octave0GColor.png");
//  PercussiveNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  PercussiveNoteColor[21]  = loadImage("Octave0AColor.png");
//  PercussiveNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  PercussiveNoteColor[23]  = loadImage("Octave0BColor.png");
//  PercussiveNoteColor[24]  = loadImage("Octave1CColor.png");
//  PercussiveNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  PercussiveNoteColor[26]  = loadImage("Octave1DColor.png");
//  PercussiveNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  PercussiveNoteColor[28]  = loadImage("Octave1EColor.png");
//  PercussiveNoteColor[29]  = loadImage("Octave1FColor.png");
//  PercussiveNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  PercussiveNoteColor[31]  = loadImage("Octave1GColor.png");
//  PercussiveNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  PercussiveNoteColor[33]  = loadImage("Octave1AColor.png");
//  PercussiveNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  PercussiveNoteColor[35]  = loadImage("Octave1BColor.png");
//  PercussiveNoteColor[36]  = loadImage("Octave2CColor.png");
//  PercussiveNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  PercussiveNoteColor[38]  = loadImage("Octave2DColor.png");
//  PercussiveNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  PercussiveNoteColor[40]  = loadImage("Octave2EColor.png");
//  PercussiveNoteColor[41]  = loadImage("Octave2FColor.png");
//  PercussiveNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  PercussiveNoteColor[43]  = loadImage("Octave2GColor.png");
//  PercussiveNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  PercussiveNoteColor[45]  = loadImage("Octave2AColor.png");
//  PercussiveNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  PercussiveNoteColor[47]  = loadImage("Octave2BColor.png");
//  PercussiveNoteColor[48]  = loadImage("Octave3CColor.png");
//  PercussiveNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  PercussiveNoteColor[50]  = loadImage("Octave3DColor.png");
//  PercussiveNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  PercussiveNoteColor[52]  = loadImage("Octave3EColor.png");
//  PercussiveNoteColor[53]  = loadImage("Octave3FColor.png");
//  PercussiveNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  PercussiveNoteColor[55]  = loadImage("Octave3GColor.png");
//  PercussiveNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  PercussiveNoteColor[57]  = loadImage("Octave3AColor.png");
//  PercussiveNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  PercussiveNoteColor[59]  = loadImage("Octave3BColor.png");
//  PercussiveNoteColor[60]  = loadImage("Octave4CColor.png");
//  PercussiveNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  PercussiveNoteColor[62]  = loadImage("Octave4DColor.png");
//  PercussiveNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  PercussiveNoteColor[64]  = loadImage("Octave4EColor.png");
//  PercussiveNoteColor[65]  = loadImage("Octave4FColor.png");
//  PercussiveNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  PercussiveNoteColor[67]  = loadImage("Octave4GColor.png");
//  PercussiveNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  PercussiveNoteColor[69]  = loadImage("Octave4AColor.png");
//  PercussiveNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  PercussiveNoteColor[71]  = loadImage("Octave4BColor.png");
//  PercussiveNoteColor[72]  = loadImage("Octave5CColor.png");
//  PercussiveNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  PercussiveNoteColor[74]  = loadImage("Octave5DColor.png");
//  PercussiveNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  PercussiveNoteColor[76]  = loadImage("Octave5EColor.png");
//  PercussiveNoteColor[77]  = loadImage("Octave5FColor.png");
//  PercussiveNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  PercussiveNoteColor[79]  = loadImage("Octave5GColor.png");
//  PercussiveNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  PercussiveNoteColor[81]  = loadImage("Octave5AColor.png");
//  PercussiveNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  PercussiveNoteColor[83]  = loadImage("Octave5BColor.png");
//  PercussiveNoteColor[84]  = loadImage("Octave6CColor.png");
//  PercussiveNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  PercussiveNoteColor[86]  = loadImage("Octave6DColor.png");
//  PercussiveNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  PercussiveNoteColor[88]  = loadImage("Octave6EColor.png");
//  PercussiveNoteColor[89]  = loadImage("Octave6FColor.png");
//  PercussiveNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  PercussiveNoteColor[91]  = loadImage("Octave6GColor.png");
//  PercussiveNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  PercussiveNoteColor[93]  = loadImage("Octave6AColor.png");
//  PercussiveNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  PercussiveNoteColor[95]  = loadImage("Octave6BColor.png");
//  PercussiveNoteColor[96]  = loadImage("Octave7CColor.png");
//  PercussiveNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  PercussiveNoteColor[98]  = loadImage("Octave7DColor.png");
//  PercussiveNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  PercussiveNoteColor[100] = loadImage("Octave7EColor.png");
//  PercussiveNoteColor[101] = loadImage("Octave7FColor.png");
//  PercussiveNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  PercussiveNoteColor[103] = loadImage("Octave7GColor.png");
//  PercussiveNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  PercussiveNoteColor[105] = loadImage("Octave7AColor.png");
//  PercussiveNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  PercussiveNoteColor[107] = loadImage("Octave7BColor.png");
//  PercussiveNoteColor[108] = loadImage("Octave8CColor.png");
//  PercussiveNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  PercussiveNoteColor[110] = loadImage("Octave8DColor.png");
//  PercussiveNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  PercussiveNoteColor[112] = loadImage("Octave8EColor.png");
//  PercussiveNoteColor[113] = loadImage("Octave8FColor.png");
//  PercussiveNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  PercussiveNoteColor[115] = loadImage("Octave8GColor.png");
//  PercussiveNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  PercussiveNoteColor[117] = loadImage("Octave8AColor.png");
//  PercussiveNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  PercussiveNoteColor[119] = loadImage("Octave8BColor.png");
//  PercussiveNoteColor[120] = loadImage("Octave9CColor.png");
//  PercussiveNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  PercussiveNoteColor[122] = loadImage("Octave9DColor.png");
//  PercussiveNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  PercussiveNoteColor[124] = loadImage("Octave9EColor.png");
//  PercussiveNoteColor[125] = loadImage("Octave9FColor.png");
//  PercussiveNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  PercussiveNoteColor[127] = loadImage("Octave9GColor.png");
//  //Sound Effects
//  SoundEffectsNoteColor[0]   = loadImage("Octavem1CColor.png");
//  SoundEffectsNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  SoundEffectsNoteColor[2]   = loadImage("Octavem1DColor.png");
//  SoundEffectsNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  SoundEffectsNoteColor[4]   = loadImage("Octavem1EColor.png");
//  SoundEffectsNoteColor[5]   = loadImage("Octavem1FColor.png");
//  SoundEffectsNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  SoundEffectsNoteColor[7]   = loadImage("Octavem1GColor.png");
//  SoundEffectsNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  SoundEffectsNoteColor[9]   = loadImage("Octavem1AColor.png");
//  SoundEffectsNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  SoundEffectsNoteColor[11]  = loadImage("Octavem1BColor.png");
//  SoundEffectsNoteColor[12]  = loadImage("Octave0CColor.png");
//  SoundEffectsNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  SoundEffectsNoteColor[14]  = loadImage("Octave0DColor.png");
//  SoundEffectsNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  SoundEffectsNoteColor[16]  = loadImage("Octave0EColor.png");
//  SoundEffectsNoteColor[17]  = loadImage("Octave0FColor.png");
//  SoundEffectsNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  SoundEffectsNoteColor[19]  = loadImage("Octave0GColor.png");
//  SoundEffectsNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  SoundEffectsNoteColor[21]  = loadImage("Octave0AColor.png");
//  SoundEffectsNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  SoundEffectsNoteColor[23]  = loadImage("Octave0BColor.png");
//  SoundEffectsNoteColor[24]  = loadImage("Octave1CColor.png");
//  SoundEffectsNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  SoundEffectsNoteColor[26]  = loadImage("Octave1DColor.png");
//  SoundEffectsNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  SoundEffectsNoteColor[28]  = loadImage("Octave1EColor.png");
//  SoundEffectsNoteColor[29]  = loadImage("Octave1FColor.png");
//  SoundEffectsNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  SoundEffectsNoteColor[31]  = loadImage("Octave1GColor.png");
//  SoundEffectsNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  SoundEffectsNoteColor[33]  = loadImage("Octave1AColor.png");
//  SoundEffectsNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  SoundEffectsNoteColor[35]  = loadImage("Octave1BColor.png");
//  SoundEffectsNoteColor[36]  = loadImage("Octave2CColor.png");
//  SoundEffectsNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  SoundEffectsNoteColor[38]  = loadImage("Octave2DColor.png");
//  SoundEffectsNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  SoundEffectsNoteColor[40]  = loadImage("Octave2EColor.png");
//  SoundEffectsNoteColor[41]  = loadImage("Octave2FColor.png");
//  SoundEffectsNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  SoundEffectsNoteColor[43]  = loadImage("Octave2GColor.png");
//  SoundEffectsNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  SoundEffectsNoteColor[45]  = loadImage("Octave2AColor.png");
//  SoundEffectsNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  SoundEffectsNoteColor[47]  = loadImage("Octave2BColor.png");
//  SoundEffectsNoteColor[48]  = loadImage("Octave3CColor.png");
//  SoundEffectsNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  SoundEffectsNoteColor[50]  = loadImage("Octave3DColor.png");
//  SoundEffectsNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  SoundEffectsNoteColor[52]  = loadImage("Octave3EColor.png");
//  SoundEffectsNoteColor[53]  = loadImage("Octave3FColor.png");
//  SoundEffectsNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  SoundEffectsNoteColor[55]  = loadImage("Octave3GColor.png");
//  SoundEffectsNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  SoundEffectsNoteColor[57]  = loadImage("Octave3AColor.png");
//  SoundEffectsNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  SoundEffectsNoteColor[59]  = loadImage("Octave3BColor.png");
//  SoundEffectsNoteColor[60]  = loadImage("Octave4CColor.png");
//  SoundEffectsNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  SoundEffectsNoteColor[62]  = loadImage("Octave4DColor.png");
//  SoundEffectsNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  SoundEffectsNoteColor[64]  = loadImage("Octave4EColor.png");
//  SoundEffectsNoteColor[65]  = loadImage("Octave4FColor.png");
//  SoundEffectsNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  SoundEffectsNoteColor[67]  = loadImage("Octave4GColor.png");
//  SoundEffectsNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  SoundEffectsNoteColor[69]  = loadImage("Octave4AColor.png");
//  SoundEffectsNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  SoundEffectsNoteColor[71]  = loadImage("Octave4BColor.png");
//  SoundEffectsNoteColor[72]  = loadImage("Octave5CColor.png");
//  SoundEffectsNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  SoundEffectsNoteColor[74]  = loadImage("Octave5DColor.png");
//  SoundEffectsNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  SoundEffectsNoteColor[76]  = loadImage("Octave5EColor.png");
//  SoundEffectsNoteColor[77]  = loadImage("Octave5FColor.png");
//  SoundEffectsNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  SoundEffectsNoteColor[79]  = loadImage("Octave5GColor.png");
//  SoundEffectsNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  SoundEffectsNoteColor[81]  = loadImage("Octave5AColor.png");
//  SoundEffectsNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  SoundEffectsNoteColor[83]  = loadImage("Octave5BColor.png");
//  SoundEffectsNoteColor[84]  = loadImage("Octave6CColor.png");
//  SoundEffectsNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  SoundEffectsNoteColor[86]  = loadImage("Octave6DColor.png");
//  SoundEffectsNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  SoundEffectsNoteColor[88]  = loadImage("Octave6EColor.png");
//  SoundEffectsNoteColor[89]  = loadImage("Octave6FColor.png");
//  SoundEffectsNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  SoundEffectsNoteColor[91]  = loadImage("Octave6GColor.png");
//  SoundEffectsNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  SoundEffectsNoteColor[93]  = loadImage("Octave6AColor.png");
//  SoundEffectsNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  SoundEffectsNoteColor[95]  = loadImage("Octave6BColor.png");
//  SoundEffectsNoteColor[96]  = loadImage("Octave7CColor.png");
//  SoundEffectsNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  SoundEffectsNoteColor[98]  = loadImage("Octave7DColor.png");
//  SoundEffectsNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  SoundEffectsNoteColor[100] = loadImage("Octave7EColor.png");
//  SoundEffectsNoteColor[101] = loadImage("Octave7FColor.png");
//  SoundEffectsNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  SoundEffectsNoteColor[103] = loadImage("Octave7GColor.png");
//  SoundEffectsNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  SoundEffectsNoteColor[105] = loadImage("Octave7AColor.png");
//  SoundEffectsNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  SoundEffectsNoteColor[107] = loadImage("Octave7BColor.png");
//  SoundEffectsNoteColor[108] = loadImage("Octave8CColor.png");
//  SoundEffectsNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  SoundEffectsNoteColor[110] = loadImage("Octave8DColor.png");
//  SoundEffectsNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  SoundEffectsNoteColor[112] = loadImage("Octave8EColor.png");
//  SoundEffectsNoteColor[113] = loadImage("Octave8FColor.png");
//  SoundEffectsNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  SoundEffectsNoteColor[115] = loadImage("Octave8GColor.png");
//  SoundEffectsNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  SoundEffectsNoteColor[117] = loadImage("Octave8AColor.png");
//  SoundEffectsNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  SoundEffectsNoteColor[119] = loadImage("Octave8BColor.png");
//  SoundEffectsNoteColor[120] = loadImage("Octave9CColor.png");
//  SoundEffectsNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  SoundEffectsNoteColor[122] = loadImage("Octave9DColor.png");
//  SoundEffectsNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  SoundEffectsNoteColor[124] = loadImage("Octave9EColor.png");
//  SoundEffectsNoteColor[125] = loadImage("Octave9FColor.png");
//  SoundEffectsNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  SoundEffectsNoteColor[127] = loadImage("Octave9GColor.png");
//  //Percussion
//  PercussionNoteColor[0]   = loadImage("Octavem1CColor.png");
//  PercussionNoteColor[1]   = loadImage("Octavem1CSharpColor.png");
//  PercussionNoteColor[2]   = loadImage("Octavem1DColor.png");
//  PercussionNoteColor[3]   = loadImage("Octavem1DSharpColor.png");
//  PercussionNoteColor[4]   = loadImage("Octavem1EColor.png");
//  PercussionNoteColor[5]   = loadImage("Octavem1FColor.png");
//  PercussionNoteColor[6]   = loadImage("Octavem1FSharpColor.png");
//  PercussionNoteColor[7]   = loadImage("Octavem1GColor.png");
//  PercussionNoteColor[8]   = loadImage("Octavem1GSharpColor.png");
//  PercussionNoteColor[9]   = loadImage("Octavem1AColor.png");
//  PercussionNoteColor[10]  = loadImage("Octavem1ASharpColor.png");
//  PercussionNoteColor[11]  = loadImage("Octavem1BColor.png");
//  PercussionNoteColor[12]  = loadImage("Octave0CColor.png");
//  PercussionNoteColor[13]  = loadImage("Octave0CSharpColor.png");
//  PercussionNoteColor[14]  = loadImage("Octave0DColor.png");
//  PercussionNoteColor[15]  = loadImage("Octave0DSharpColor.png");
//  PercussionNoteColor[16]  = loadImage("Octave0EColor.png");
//  PercussionNoteColor[17]  = loadImage("Octave0FColor.png");
//  PercussionNoteColor[18]  = loadImage("Octave0FSharpColor.png");
//  PercussionNoteColor[19]  = loadImage("Octave0GColor.png");
//  PercussionNoteColor[20]  = loadImage("Octave0GSharpColor.png");
//  PercussionNoteColor[21]  = loadImage("Octave0AColor.png");
//  PercussionNoteColor[22]  = loadImage("Octave0ASharpColor.png");
//  PercussionNoteColor[23]  = loadImage("Octave0BColor.png");
//  PercussionNoteColor[24]  = loadImage("Octave1CColor.png");
//  PercussionNoteColor[25]  = loadImage("Octave1CSharpColor.png");
//  PercussionNoteColor[26]  = loadImage("Octave1DColor.png");
//  PercussionNoteColor[27]  = loadImage("Octave1DSharpColor.png");
//  PercussionNoteColor[28]  = loadImage("Octave1EColor.png");
//  PercussionNoteColor[29]  = loadImage("Octave1FColor.png");
//  PercussionNoteColor[30]  = loadImage("Octave1FSharpColor.png");
//  PercussionNoteColor[31]  = loadImage("Octave1GColor.png");
//  PercussionNoteColor[32]  = loadImage("Octave1GSharpColor.png");
//  PercussionNoteColor[33]  = loadImage("Octave1AColor.png");
//  PercussionNoteColor[34]  = loadImage("Octave1ASharpColor.png");
//  PercussionNoteColor[35]  = loadImage("Octave1BColor.png");
//  PercussionNoteColor[36]  = loadImage("Octave2CColor.png");
//  PercussionNoteColor[37]  = loadImage("Octave2CSharpColor.png");
//  PercussionNoteColor[38]  = loadImage("Octave2DColor.png");
//  PercussionNoteColor[39]  = loadImage("Octave2DSharpColor.png");
//  PercussionNoteColor[40]  = loadImage("Octave2EColor.png");
//  PercussionNoteColor[41]  = loadImage("Octave2FColor.png");
//  PercussionNoteColor[42]  = loadImage("Octave2FSharpColor.png");
//  PercussionNoteColor[43]  = loadImage("Octave2GColor.png");
//  PercussionNoteColor[44]  = loadImage("Octave2GSharpColor.png");
//  PercussionNoteColor[45]  = loadImage("Octave2AColor.png");
//  PercussionNoteColor[46]  = loadImage("Octave2ASharpColor.png");
//  PercussionNoteColor[47]  = loadImage("Octave2BColor.png");
//  PercussionNoteColor[48]  = loadImage("Octave3CColor.png");
//  PercussionNoteColor[49]  = loadImage("Octave3CSharpColor.png");
//  PercussionNoteColor[50]  = loadImage("Octave3DColor.png");
//  PercussionNoteColor[51]  = loadImage("Octave3DSharpColor.png");
//  PercussionNoteColor[52]  = loadImage("Octave3EColor.png");
//  PercussionNoteColor[53]  = loadImage("Octave3FColor.png");
//  PercussionNoteColor[54]  = loadImage("Octave3FSharpColor.png");
//  PercussionNoteColor[55]  = loadImage("Octave3GColor.png");
//  PercussionNoteColor[56]  = loadImage("Octave3GSharpColor.png");
//  PercussionNoteColor[57]  = loadImage("Octave3AColor.png");
//  PercussionNoteColor[58]  = loadImage("Octave3ASharpColor.png");
//  PercussionNoteColor[59]  = loadImage("Octave3BColor.png");
//  PercussionNoteColor[60]  = loadImage("Octave4CColor.png");
//  PercussionNoteColor[61]  = loadImage("Octave4CSharpColor.png");
//  PercussionNoteColor[62]  = loadImage("Octave4DColor.png");
//  PercussionNoteColor[63]  = loadImage("Octave4DSharpColor.png");
//  PercussionNoteColor[64]  = loadImage("Octave4EColor.png");
//  PercussionNoteColor[65]  = loadImage("Octave4FColor.png");
//  PercussionNoteColor[66]  = loadImage("Octave4FSharpColor.png");
//  PercussionNoteColor[67]  = loadImage("Octave4GColor.png");
//  PercussionNoteColor[68]  = loadImage("Octave4GSharpColor.png");
//  PercussionNoteColor[69]  = loadImage("Octave4AColor.png");
//  PercussionNoteColor[70]  = loadImage("Octave4ASharpColor.png");
//  PercussionNoteColor[71]  = loadImage("Octave4BColor.png");
//  PercussionNoteColor[72]  = loadImage("Octave5CColor.png");
//  PercussionNoteColor[73]  = loadImage("Octave5CSharpColor.png");
//  PercussionNoteColor[74]  = loadImage("Octave5DColor.png");
//  PercussionNoteColor[75]  = loadImage("Octave5DSharpColor.png");
//  PercussionNoteColor[76]  = loadImage("Octave5EColor.png");
//  PercussionNoteColor[77]  = loadImage("Octave5FColor.png");
//  PercussionNoteColor[78]  = loadImage("Octave5FSharpColor.png");
//  PercussionNoteColor[79]  = loadImage("Octave5GColor.png");
//  PercussionNoteColor[80]  = loadImage("Octave5GSharpColor.png");
//  PercussionNoteColor[81]  = loadImage("Octave5AColor.png");
//  PercussionNoteColor[82]  = loadImage("Octave5ASharpColor.png");
//  PercussionNoteColor[83]  = loadImage("Octave5BColor.png");
//  PercussionNoteColor[84]  = loadImage("Octave6CColor.png");
//  PercussionNoteColor[85]  = loadImage("Octave6CSharpColor.png");
//  PercussionNoteColor[86]  = loadImage("Octave6DColor.png");
//  PercussionNoteColor[87]  = loadImage("Octave6DSharpColor.png");
//  PercussionNoteColor[88]  = loadImage("Octave6EColor.png");
//  PercussionNoteColor[89]  = loadImage("Octave6FColor.png");
//  PercussionNoteColor[90]  = loadImage("Octave6FSharpColor.png");
//  PercussionNoteColor[91]  = loadImage("Octave6GColor.png");
//  PercussionNoteColor[92]  = loadImage("Octave6GSharpColor.png");
//  PercussionNoteColor[93]  = loadImage("Octave6AColor.png");
//  PercussionNoteColor[94]  = loadImage("Octave6ASharpColor.png");
//  PercussionNoteColor[95]  = loadImage("Octave6BColor.png");
//  PercussionNoteColor[96]  = loadImage("Octave7CColor.png");
//  PercussionNoteColor[97]  = loadImage("Octave7CSharpColor.png");
//  PercussionNoteColor[98]  = loadImage("Octave7DColor.png");
//  PercussionNoteColor[99]  = loadImage("Octave7DSharpColor.png");
//  PercussionNoteColor[100] = loadImage("Octave7EColor.png");
//  PercussionNoteColor[101] = loadImage("Octave7FColor.png");
//  PercussionNoteColor[102] = loadImage("Octave7FSharpColor.png");
//  PercussionNoteColor[103] = loadImage("Octave7GColor.png");
//  PercussionNoteColor[104] = loadImage("Octave7GSharpColor.png");
//  PercussionNoteColor[105] = loadImage("Octave7AColor.png");
//  PercussionNoteColor[106] = loadImage("Octave7ASharpColor.png");
//  PercussionNoteColor[107] = loadImage("Octave7BColor.png");
//  PercussionNoteColor[108] = loadImage("Octave8CColor.png");
//  PercussionNoteColor[109] = loadImage("Octave8CSharpColor.png");
//  PercussionNoteColor[110] = loadImage("Octave8DColor.png");
//  PercussionNoteColor[111] = loadImage("Octave8DSharpColor.png");
//  PercussionNoteColor[112] = loadImage("Octave8EColor.png");
//  PercussionNoteColor[113] = loadImage("Octave8FColor.png");
//  PercussionNoteColor[114] = loadImage("Octave8FSharpColor.png");
//  PercussionNoteColor[115] = loadImage("Octave8GColor.png");
//  PercussionNoteColor[116] = loadImage("Octave8GSharpColor.png");
//  PercussionNoteColor[117] = loadImage("Octave8AColor.png");
//  PercussionNoteColor[118] = loadImage("Octave8ASharpColor.png");
//  PercussionNoteColor[119] = loadImage("Octave8BColor.png");
//  PercussionNoteColor[120] = loadImage("Octave9CColor.png");
//  PercussionNoteColor[121] = loadImage("Octave9CSharpColor.png");
//  PercussionNoteColor[122] = loadImage("Octave9DColor.png");
//  PercussionNoteColor[123] = loadImage("Octave9DSharpColor.png");
//  PercussionNoteColor[124] = loadImage("Octave9EColor.png");
//  PercussionNoteColor[125] = loadImage("Octave9FColor.png");
//  PercussionNoteColor[126] = loadImage("Octave9FSharpColor.png");
//  PercussionNoteColor[127] = loadImage("Octave9GColor.png");
}

void ColorTexturesMasks(){
  //Alpha masks
  PianoMask               = loadImage("Mask-Piano.png");
  PianoMaskSide           = loadImage("Mask-Piano-Side.png");
  ChromaticPercussionMask = loadImage("Mask-ChromaticPercussion.png");
  OrganMask[0]            = loadImage("Mask-Organ_00.png");
  OrganMask[1]            = loadImage("Mask-Organ_01.png");
  OrganMask[2]            = loadImage("Mask-Organ_02.png");
  OrganMask[3]            = loadImage("Mask-Organ_03.png");
  OrganMask[4]            = loadImage("Mask-Organ_04.png");
  OrganMask[5]            = loadImage("Mask-Organ_05.png");
  OrganMask[6]            = loadImage("Mask-Organ_06.png");
  OrganMask[7]            = loadImage("Mask-Organ_07.png");
  OrganMask[8]            = loadImage("Mask-Organ_08.png");
  OrganMask[9]            = loadImage("Mask-Organ_09.png");
  OrganMask[10]           = loadImage("Mask-Organ_10.png");
  OrganMask[11]           = loadImage("Mask-Organ_11.png");
  OrganMask[12]           = loadImage("Mask-Organ_12.png");
  OrganMask[13]           = loadImage("Mask-Organ_13.png");
  OrganMask[14]           = loadImage("Mask-Organ_14.png");
  OrganMask[15]           = loadImage("Mask-Organ_15.png");
  OrganMask[16]           = loadImage("Mask-Organ_16.png");
  OrganMask[17]           = loadImage("Mask-Organ_17.png");
  OrganMask[18]           = loadImage("Mask-Organ_18.png");
  OrganMask[19]           = loadImage("Mask-Organ_19.png");
  OrganMask[20]           = loadImage("Mask-Organ_20.png");
  OrganMask[21]           = loadImage("Mask-Organ_21.png");
  OrganMask[22]           = loadImage("Mask-Organ_22.png");
  OrganMask[23]           = loadImage("Mask-Organ_23.png");
  OrganMask[24]           = loadImage("Mask-Organ_24.png");
  OrganMask[25]           = loadImage("Mask-Organ_25.png");
  OrganMask[26]           = loadImage("Mask-Organ_26.png");
  OrganMask[27]           = loadImage("Mask-Organ_27.png");
  OrganMask[28]           = loadImage("Mask-Organ_28.png");
  OrganMask[29]           = loadImage("Mask-Organ_29.png");
  OrganMask[30]           = loadImage("Mask-Organ_30.png");
  OrganMask[31]           = loadImage("Mask-Organ_31.png");
  OrganMask[32]           = loadImage("Mask-Organ_32.png");
  OrganMask[33]           = loadImage("Mask-Organ_33.png");
  OrganMask[34]           = loadImage("Mask-Organ_34.png");
  OrganMask[35]           = loadImage("Mask-Organ_35.png");
  OrganMask[36]           = loadImage("Mask-Organ_36.png");
  OrganMask[37]           = loadImage("Mask-Organ_37.png");
  OrganMask[38]           = loadImage("Mask-Organ_38.png");
  OrganMask[39]           = loadImage("Mask-Organ_39.png");
  OrganMask[40]           = loadImage("Mask-Organ_40.png");
  OrganMask[41]           = loadImage("Mask-Organ_41.png");
  OrganMask[42]           = loadImage("Mask-Organ_42.png");
  OrganMask[43]           = loadImage("Mask-Organ_43.png");
  OrganMask[44]           = loadImage("Mask-Organ_44.png");
  OrganMask[45]           = loadImage("Mask-Organ_45.png");
  OrganMask[46]           = loadImage("Mask-Organ_46.png");
  OrganMask[47]           = loadImage("Mask-Organ_47.png");
  OrganMask[48]           = loadImage("Mask-Organ_48.png");
  OrganMask[49]           = loadImage("Mask-Organ_49.png");
  OrganMask[50]           = loadImage("Mask-Organ_50.png");
  OrganMask[51]           = loadImage("Mask-Organ_51.png");
  OrganMask[52]           = loadImage("Mask-Organ_52.png");
  OrganMask[53]           = loadImage("Mask-Organ_53.png");
  OrganMask[54]           = loadImage("Mask-Organ_54.png");
  OrganMask[55]           = loadImage("Mask-Organ_55.png");
  OrganMask[56]           = loadImage("Mask-Organ_56.png");
  OrganMask[57]           = loadImage("Mask-Organ_57.png");
  OrganMask[58]           = loadImage("Mask-Organ_58.png");
  OrganMask[59]           = loadImage("Mask-Organ_59.png");
//  GuitarMask              = loadImage("Mask-Guitar.png");
//  BassMask                = loadImage("Mask-Bass.png");
//  StringsMask             = loadImage("Mask-Strings.png");
//  EnsembleMask            = loadImage("Mask-Ensemble.png");
//  BrassMask               = loadImage("Mask-Brass.png");
//  ReedMask                = loadImage("Mask-Reed.png");
//  PipeMask                = loadImage("Mask-Pipe.png");
//  SynthLeadMask           = loadImage("Mask-SynthLead.png");
//  SynthPadMask            = loadImage("Mask-SynthPad.png");
//  SynthEffectsMask        = loadImage("Mask-SynthEffects.png");
//  EthnicMask              = loadImage("Mask-Ethnic.png");
//  PercussiveMask          = loadImage("Mask-Percussive.png");
//  SoundEffectsMask        = loadImage("Mask-SoundEffects.png");
//  PercussionMask          = loadImage("Mask-Percussion.png");
  
//Colors
  //Piano
  PianoNoteColor[0].mask(PianoMask);
  PianoNoteColor[1].mask(PianoMask);
  PianoNoteColor[2].mask(PianoMask);
  PianoNoteColor[3].mask(PianoMask);
  PianoNoteColor[4].mask(PianoMask);
  PianoNoteColor[5].mask(PianoMask);
  PianoNoteColor[6].mask(PianoMask);
  PianoNoteColor[7].mask(PianoMask);
  PianoNoteColor[8].mask(PianoMask);
  PianoNoteColor[9].mask(PianoMask);
  PianoNoteColor[10].mask(PianoMask);
  PianoNoteColor[11].mask(PianoMask);
  PianoNoteColor[12].mask(PianoMask);
  PianoNoteColor[13].mask(PianoMask);
  PianoNoteColor[14].mask(PianoMask);
  PianoNoteColor[15].mask(PianoMask);
  PianoNoteColor[16].mask(PianoMask);
  PianoNoteColor[17].mask(PianoMask);
  PianoNoteColor[18].mask(PianoMask);
  PianoNoteColor[19].mask(PianoMask);
  PianoNoteColor[20].mask(PianoMask);
  PianoNoteColor[21].mask(PianoMask);
  PianoNoteColor[22].mask(PianoMask);
  PianoNoteColor[23].mask(PianoMask);
  PianoNoteColor[24].mask(PianoMask);
  PianoNoteColor[25].mask(PianoMask);
  PianoNoteColor[26].mask(PianoMask);
  PianoNoteColor[27].mask(PianoMask);
  PianoNoteColor[28].mask(PianoMask);
  PianoNoteColor[29].mask(PianoMask);
  PianoNoteColor[30].mask(PianoMask);
  PianoNoteColor[31].mask(PianoMask);
  PianoNoteColor[32].mask(PianoMask);
  PianoNoteColor[33].mask(PianoMask);
  PianoNoteColor[34].mask(PianoMask);
  PianoNoteColor[35].mask(PianoMask);
  PianoNoteColor[36].mask(PianoMask);
  PianoNoteColor[37].mask(PianoMask);
  PianoNoteColor[38].mask(PianoMask);
  PianoNoteColor[39].mask(PianoMask);
  PianoNoteColor[40].mask(PianoMask);
  PianoNoteColor[41].mask(PianoMask);
  PianoNoteColor[42].mask(PianoMask);
  PianoNoteColor[43].mask(PianoMask);
  PianoNoteColor[44].mask(PianoMask);
  PianoNoteColor[45].mask(PianoMask);
  PianoNoteColor[46].mask(PianoMask);
  PianoNoteColor[47].mask(PianoMask);
  PianoNoteColor[48].mask(PianoMask);
  PianoNoteColor[49].mask(PianoMask);
  PianoNoteColor[50].mask(PianoMask);
  PianoNoteColor[51].mask(PianoMask);
  PianoNoteColor[52].mask(PianoMask);
  PianoNoteColor[53].mask(PianoMask);
  PianoNoteColor[54].mask(PianoMask);
  PianoNoteColor[55].mask(PianoMask);
  PianoNoteColor[56].mask(PianoMask);
  PianoNoteColor[57].mask(PianoMask);
  PianoNoteColor[58].mask(PianoMask);
  PianoNoteColor[59].mask(PianoMask);
  PianoNoteColor[60].mask(PianoMask);
  PianoNoteColor[61].mask(PianoMask);
  PianoNoteColor[62].mask(PianoMask);
  PianoNoteColor[63].mask(PianoMask);
  PianoNoteColor[64].mask(PianoMask);
  PianoNoteColor[65].mask(PianoMask);
  PianoNoteColor[66].mask(PianoMask);
  PianoNoteColor[67].mask(PianoMask);
  PianoNoteColor[68].mask(PianoMask);
  PianoNoteColor[69].mask(PianoMask);
  PianoNoteColor[70].mask(PianoMask);
  PianoNoteColor[71].mask(PianoMask);
  PianoNoteColor[72].mask(PianoMask);
  PianoNoteColor[73].mask(PianoMask);
  PianoNoteColor[74].mask(PianoMask);
  PianoNoteColor[75].mask(PianoMask);
  PianoNoteColor[76].mask(PianoMask);
  PianoNoteColor[77].mask(PianoMask);
  PianoNoteColor[78].mask(PianoMask);
  PianoNoteColor[79].mask(PianoMask);
  PianoNoteColor[80].mask(PianoMask);
  PianoNoteColor[81].mask(PianoMask);
  PianoNoteColor[82].mask(PianoMask);
  PianoNoteColor[83].mask(PianoMask);
  PianoNoteColor[84].mask(PianoMask);
  PianoNoteColor[85].mask(PianoMask);
  PianoNoteColor[86].mask(PianoMask);
  PianoNoteColor[87].mask(PianoMask);
  PianoNoteColor[88].mask(PianoMask);
  PianoNoteColor[89].mask(PianoMask);
  PianoNoteColor[90].mask(PianoMask);
  PianoNoteColor[91].mask(PianoMask);
  PianoNoteColor[92].mask(PianoMask);
  PianoNoteColor[93].mask(PianoMask);
  PianoNoteColor[94].mask(PianoMask);
  PianoNoteColor[95].mask(PianoMask);
  PianoNoteColor[96].mask(PianoMask);
  PianoNoteColor[97].mask(PianoMask);
  PianoNoteColor[98].mask(PianoMask);
  PianoNoteColor[99].mask(PianoMask);
  PianoNoteColor[100].mask(PianoMask);
  PianoNoteColor[101].mask(PianoMask);
  PianoNoteColor[102].mask(PianoMask);
  PianoNoteColor[103].mask(PianoMask);
  PianoNoteColor[104].mask(PianoMask);
  PianoNoteColor[105].mask(PianoMask);
  PianoNoteColor[106].mask(PianoMask);
  PianoNoteColor[107].mask(PianoMask);
  PianoNoteColor[108].mask(PianoMask);
  PianoNoteColor[109].mask(PianoMask);
  PianoNoteColor[110].mask(PianoMask);
  PianoNoteColor[111].mask(PianoMask);
  PianoNoteColor[112].mask(PianoMask);
  PianoNoteColor[113].mask(PianoMask);
  PianoNoteColor[114].mask(PianoMask);
  PianoNoteColor[115].mask(PianoMask);
  PianoNoteColor[116].mask(PianoMask);
  PianoNoteColor[117].mask(PianoMask);
  PianoNoteColor[118].mask(PianoMask);
  PianoNoteColor[119].mask(PianoMask);
  PianoNoteColor[120].mask(PianoMask);
  PianoNoteColor[121].mask(PianoMask);
  PianoNoteColor[122].mask(PianoMask);
  PianoNoteColor[123].mask(PianoMask);
  PianoNoteColor[124].mask(PianoMask);
  PianoNoteColor[125].mask(PianoMask);
  PianoNoteColor[126].mask(PianoMask);
  PianoNoteColor[127].mask(PianoMask);
  PianoNoteColorSide[0].mask(PianoMaskSide);
  PianoNoteColorSide[1].mask(PianoMaskSide);
  PianoNoteColorSide[2].mask(PianoMaskSide);
  PianoNoteColorSide[3].mask(PianoMaskSide);
  PianoNoteColorSide[4].mask(PianoMaskSide);
  PianoNoteColorSide[5].mask(PianoMaskSide);
  PianoNoteColorSide[6].mask(PianoMaskSide);
  PianoNoteColorSide[7].mask(PianoMaskSide);
  PianoNoteColorSide[8].mask(PianoMaskSide);
  PianoNoteColorSide[9].mask(PianoMaskSide);
  PianoNoteColorSide[10].mask(PianoMaskSide);
  PianoNoteColorSide[11].mask(PianoMaskSide);
  PianoNoteColorSide[12].mask(PianoMaskSide);
  PianoNoteColorSide[13].mask(PianoMaskSide);
  PianoNoteColorSide[14].mask(PianoMaskSide);
  PianoNoteColorSide[15].mask(PianoMaskSide);
  PianoNoteColorSide[16].mask(PianoMaskSide);
  PianoNoteColorSide[17].mask(PianoMaskSide);
  PianoNoteColorSide[18].mask(PianoMaskSide);
  PianoNoteColorSide[19].mask(PianoMaskSide);
  PianoNoteColorSide[20].mask(PianoMaskSide);
  PianoNoteColorSide[21].mask(PianoMaskSide);
  PianoNoteColorSide[22].mask(PianoMaskSide);
  PianoNoteColorSide[23].mask(PianoMaskSide);
  PianoNoteColorSide[24].mask(PianoMaskSide);
  PianoNoteColorSide[25].mask(PianoMaskSide);
  PianoNoteColorSide[26].mask(PianoMaskSide);
  PianoNoteColorSide[27].mask(PianoMaskSide);
  PianoNoteColorSide[28].mask(PianoMaskSide);
  PianoNoteColorSide[29].mask(PianoMaskSide);
  PianoNoteColorSide[30].mask(PianoMaskSide);
  PianoNoteColorSide[31].mask(PianoMaskSide);
  PianoNoteColorSide[32].mask(PianoMaskSide);
  PianoNoteColorSide[33].mask(PianoMaskSide);
  PianoNoteColorSide[34].mask(PianoMaskSide);
  PianoNoteColorSide[35].mask(PianoMaskSide);
  PianoNoteColorSide[36].mask(PianoMaskSide);
  PianoNoteColorSide[37].mask(PianoMaskSide);
  PianoNoteColorSide[38].mask(PianoMaskSide);
  PianoNoteColorSide[39].mask(PianoMaskSide);
  PianoNoteColorSide[40].mask(PianoMaskSide);
  PianoNoteColorSide[41].mask(PianoMaskSide);
  PianoNoteColorSide[42].mask(PianoMaskSide);
  PianoNoteColorSide[43].mask(PianoMaskSide);
  PianoNoteColorSide[44].mask(PianoMaskSide);
  PianoNoteColorSide[45].mask(PianoMaskSide);
  PianoNoteColorSide[46].mask(PianoMaskSide);
  PianoNoteColorSide[47].mask(PianoMaskSide);
  PianoNoteColorSide[48].mask(PianoMaskSide);
  PianoNoteColorSide[49].mask(PianoMaskSide);
  PianoNoteColorSide[50].mask(PianoMaskSide);
  PianoNoteColorSide[51].mask(PianoMaskSide);
  PianoNoteColorSide[52].mask(PianoMaskSide);
  PianoNoteColorSide[53].mask(PianoMaskSide);
  PianoNoteColorSide[54].mask(PianoMaskSide);
  PianoNoteColorSide[55].mask(PianoMaskSide);
  PianoNoteColorSide[56].mask(PianoMaskSide);
  PianoNoteColorSide[57].mask(PianoMaskSide);
  PianoNoteColorSide[58].mask(PianoMaskSide);
  PianoNoteColorSide[59].mask(PianoMaskSide);
  PianoNoteColorSide[60].mask(PianoMaskSide);
  PianoNoteColorSide[61].mask(PianoMaskSide);
  PianoNoteColorSide[62].mask(PianoMaskSide);
  PianoNoteColorSide[63].mask(PianoMaskSide);
  PianoNoteColorSide[64].mask(PianoMaskSide);
  PianoNoteColorSide[65].mask(PianoMaskSide);
  PianoNoteColorSide[66].mask(PianoMaskSide);
  PianoNoteColorSide[67].mask(PianoMaskSide);
  PianoNoteColorSide[68].mask(PianoMaskSide);
  PianoNoteColorSide[69].mask(PianoMaskSide);
  PianoNoteColorSide[70].mask(PianoMaskSide);
  PianoNoteColorSide[71].mask(PianoMaskSide);
  PianoNoteColorSide[72].mask(PianoMaskSide);
  PianoNoteColorSide[73].mask(PianoMaskSide);
  PianoNoteColorSide[74].mask(PianoMaskSide);
  PianoNoteColorSide[75].mask(PianoMaskSide);
  PianoNoteColorSide[76].mask(PianoMaskSide);
  PianoNoteColorSide[77].mask(PianoMaskSide);
  PianoNoteColorSide[78].mask(PianoMaskSide);
  PianoNoteColorSide[79].mask(PianoMaskSide);
  PianoNoteColorSide[80].mask(PianoMaskSide);
  PianoNoteColorSide[81].mask(PianoMaskSide);
  PianoNoteColorSide[82].mask(PianoMaskSide);
  PianoNoteColorSide[83].mask(PianoMaskSide);
  PianoNoteColorSide[84].mask(PianoMaskSide);
  PianoNoteColorSide[85].mask(PianoMaskSide);
  PianoNoteColorSide[86].mask(PianoMaskSide);
  PianoNoteColorSide[87].mask(PianoMaskSide);
  PianoNoteColorSide[88].mask(PianoMaskSide);
  PianoNoteColorSide[89].mask(PianoMaskSide);
  PianoNoteColorSide[90].mask(PianoMaskSide);
  PianoNoteColorSide[91].mask(PianoMaskSide);
  PianoNoteColorSide[92].mask(PianoMaskSide);
  PianoNoteColorSide[93].mask(PianoMaskSide);
  PianoNoteColorSide[94].mask(PianoMaskSide);
  PianoNoteColorSide[95].mask(PianoMaskSide);
  PianoNoteColorSide[96].mask(PianoMaskSide);
  PianoNoteColorSide[97].mask(PianoMaskSide);
  PianoNoteColorSide[98].mask(PianoMaskSide);
  PianoNoteColorSide[99].mask(PianoMaskSide);
  PianoNoteColorSide[100].mask(PianoMaskSide);
  PianoNoteColorSide[101].mask(PianoMaskSide);
  PianoNoteColorSide[102].mask(PianoMaskSide);
  PianoNoteColorSide[103].mask(PianoMaskSide);
  PianoNoteColorSide[104].mask(PianoMaskSide);
  PianoNoteColorSide[105].mask(PianoMaskSide);
  PianoNoteColorSide[106].mask(PianoMaskSide);
  PianoNoteColorSide[107].mask(PianoMaskSide);
  PianoNoteColorSide[108].mask(PianoMaskSide);
  PianoNoteColorSide[109].mask(PianoMaskSide);
  PianoNoteColorSide[110].mask(PianoMaskSide);
  PianoNoteColorSide[111].mask(PianoMaskSide);
  PianoNoteColorSide[112].mask(PianoMaskSide);
  PianoNoteColorSide[113].mask(PianoMaskSide);
  PianoNoteColorSide[114].mask(PianoMaskSide);
  PianoNoteColorSide[115].mask(PianoMaskSide);
  PianoNoteColorSide[116].mask(PianoMaskSide);
  PianoNoteColorSide[117].mask(PianoMaskSide);
  PianoNoteColorSide[118].mask(PianoMaskSide);
  PianoNoteColorSide[119].mask(PianoMaskSide);
  PianoNoteColorSide[120].mask(PianoMaskSide);
  PianoNoteColorSide[121].mask(PianoMaskSide);
  PianoNoteColorSide[122].mask(PianoMaskSide);
  PianoNoteColorSide[123].mask(PianoMaskSide);
  PianoNoteColorSide[124].mask(PianoMaskSide);
  PianoNoteColorSide[125].mask(PianoMaskSide);
  PianoNoteColorSide[126].mask(PianoMaskSide);
  PianoNoteColorSide[127].mask(PianoMaskSide);
  //Chromatic Percussion
  ChromaticPercussionNoteColor[0].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[1].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[2].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[3].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[4].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[5].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[6].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[7].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[8].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[9].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[10].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[11].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[12].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[13].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[14].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[15].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[16].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[17].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[18].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[19].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[20].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[21].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[22].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[23].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[24].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[25].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[26].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[27].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[28].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[29].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[30].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[31].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[32].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[33].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[34].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[35].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[36].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[37].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[38].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[39].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[40].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[41].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[42].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[43].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[44].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[45].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[46].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[47].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[48].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[49].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[50].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[51].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[52].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[53].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[54].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[55].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[56].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[57].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[58].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[59].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[60].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[61].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[62].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[63].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[64].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[65].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[66].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[67].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[68].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[69].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[70].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[71].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[72].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[73].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[74].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[75].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[76].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[77].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[78].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[79].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[80].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[81].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[82].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[83].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[84].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[85].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[86].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[87].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[88].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[89].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[90].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[91].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[92].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[93].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[94].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[95].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[96].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[97].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[98].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[99].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[100].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[101].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[102].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[103].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[104].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[105].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[106].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[107].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[108].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[109].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[110].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[111].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[112].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[113].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[114].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[115].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[116].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[117].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[118].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[119].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[120].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[121].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[122].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[123].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[124].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[125].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[126].mask(ChromaticPercussionMask);
  ChromaticPercussionNoteColor[127].mask(ChromaticPercussionMask);
  
  // //Guitar
  // GuitarNoteColor[0].mask(GuitarMask);
  // GuitarNoteColor[1].mask(GuitarMask);
  // GuitarNoteColor[2].mask(GuitarMask);
  // GuitarNoteColor[3].mask(GuitarMask);
  // GuitarNoteColor[4].mask(GuitarMask);
  // GuitarNoteColor[5].mask(GuitarMask);
  // GuitarNoteColor[6].mask(GuitarMask);
  // GuitarNoteColor[7].mask(GuitarMask);
  // GuitarNoteColor[8].mask(GuitarMask);
  // GuitarNoteColor[9].mask(GuitarMask);
  // GuitarNoteColor[10].mask(GuitarMask);
  // GuitarNoteColor[11].mask(GuitarMask);
  // GuitarNoteColor[12].mask(GuitarMask);
  // GuitarNoteColor[13].mask(GuitarMask);
  // GuitarNoteColor[14].mask(GuitarMask);
  // GuitarNoteColor[15].mask(GuitarMask);
  // GuitarNoteColor[16].mask(GuitarMask);
  // GuitarNoteColor[17].mask(GuitarMask);
  // GuitarNoteColor[18].mask(GuitarMask);
  // GuitarNoteColor[19].mask(GuitarMask);
  // GuitarNoteColor[20].mask(GuitarMask);
  // GuitarNoteColor[21].mask(GuitarMask);
  // GuitarNoteColor[22].mask(GuitarMask);
  // GuitarNoteColor[23].mask(GuitarMask);
  // GuitarNoteColor[24].mask(GuitarMask);
  // GuitarNoteColor[25].mask(GuitarMask);
  // GuitarNoteColor[26].mask(GuitarMask);
  // GuitarNoteColor[27].mask(GuitarMask);
  // GuitarNoteColor[28].mask(GuitarMask);
  // GuitarNoteColor[29].mask(GuitarMask);
  // GuitarNoteColor[30].mask(GuitarMask);
  // GuitarNoteColor[31].mask(GuitarMask);
  // GuitarNoteColor[32].mask(GuitarMask);
  // GuitarNoteColor[33].mask(GuitarMask);
  // GuitarNoteColor[34].mask(GuitarMask);
  // GuitarNoteColor[35].mask(GuitarMask);
  // GuitarNoteColor[36].mask(GuitarMask);
  // GuitarNoteColor[37].mask(GuitarMask);
  // GuitarNoteColor[38].mask(GuitarMask);
  // GuitarNoteColor[39].mask(GuitarMask);
  // GuitarNoteColor[40].mask(GuitarMask);
  // GuitarNoteColor[41].mask(GuitarMask);
  // GuitarNoteColor[42].mask(GuitarMask);
  // GuitarNoteColor[43].mask(GuitarMask);
  // GuitarNoteColor[44].mask(GuitarMask);
  // GuitarNoteColor[45].mask(GuitarMask);
  // GuitarNoteColor[46].mask(GuitarMask);
  // GuitarNoteColor[47].mask(GuitarMask);
  // GuitarNoteColor[48].mask(GuitarMask);
  // GuitarNoteColor[49].mask(GuitarMask);
  // GuitarNoteColor[50].mask(GuitarMask);
  // GuitarNoteColor[51].mask(GuitarMask);
  // GuitarNoteColor[52].mask(GuitarMask);
  // GuitarNoteColor[53].mask(GuitarMask);
  // GuitarNoteColor[54].mask(GuitarMask);
  // GuitarNoteColor[55].mask(GuitarMask);
  // GuitarNoteColor[56].mask(GuitarMask);
  // GuitarNoteColor[57].mask(GuitarMask);
  // GuitarNoteColor[58].mask(GuitarMask);
  // GuitarNoteColor[59].mask(GuitarMask);
  // GuitarNoteColor[60].mask(GuitarMask);
  // GuitarNoteColor[61].mask(GuitarMask);
  // GuitarNoteColor[62].mask(GuitarMask);
  // GuitarNoteColor[63].mask(GuitarMask);
  // GuitarNoteColor[64].mask(GuitarMask);
  // GuitarNoteColor[65].mask(GuitarMask);
  // GuitarNoteColor[66].mask(GuitarMask);
  // GuitarNoteColor[67].mask(GuitarMask);
  // GuitarNoteColor[68].mask(GuitarMask);
  // GuitarNoteColor[69].mask(GuitarMask);
  // GuitarNoteColor[70].mask(GuitarMask);
  // GuitarNoteColor[71].mask(GuitarMask);
  // GuitarNoteColor[72].mask(GuitarMask);
  // GuitarNoteColor[73].mask(GuitarMask);
  // GuitarNoteColor[74].mask(GuitarMask);
  // GuitarNoteColor[75].mask(GuitarMask);
  // GuitarNoteColor[76].mask(GuitarMask);
  // GuitarNoteColor[77].mask(GuitarMask);
  // GuitarNoteColor[78].mask(GuitarMask);
  // GuitarNoteColor[79].mask(GuitarMask);
  // GuitarNoteColor[80].mask(GuitarMask);
  // GuitarNoteColor[81].mask(GuitarMask);
  // GuitarNoteColor[82].mask(GuitarMask);
  // GuitarNoteColor[83].mask(GuitarMask);
  // GuitarNoteColor[84].mask(GuitarMask);
  // GuitarNoteColor[85].mask(GuitarMask);
  // GuitarNoteColor[86].mask(GuitarMask);
  // GuitarNoteColor[87].mask(GuitarMask);
  // GuitarNoteColor[88].mask(GuitarMask);
  // GuitarNoteColor[89].mask(GuitarMask);
  // GuitarNoteColor[90].mask(GuitarMask);
  // GuitarNoteColor[91].mask(GuitarMask);
  // GuitarNoteColor[92].mask(GuitarMask);
  // GuitarNoteColor[93].mask(GuitarMask);
  // GuitarNoteColor[94].mask(GuitarMask);
  // GuitarNoteColor[95].mask(GuitarMask);
  // GuitarNoteColor[96].mask(GuitarMask);
  // GuitarNoteColor[97].mask(GuitarMask);
  // GuitarNoteColor[98].mask(GuitarMask);
  // GuitarNoteColor[99].mask(GuitarMask);
  // GuitarNoteColor[100].mask(GuitarMask);
  // GuitarNoteColor[101].mask(GuitarMask);
  // GuitarNoteColor[102].mask(GuitarMask);
  // GuitarNoteColor[103].mask(GuitarMask);
  // GuitarNoteColor[104].mask(GuitarMask);
  // GuitarNoteColor[105].mask(GuitarMask);
  // GuitarNoteColor[106].mask(GuitarMask);
  // GuitarNoteColor[107].mask(GuitarMask);
  // GuitarNoteColor[108].mask(GuitarMask);
  // GuitarNoteColor[109].mask(GuitarMask);
  // GuitarNoteColor[110].mask(GuitarMask);
  // GuitarNoteColor[111].mask(GuitarMask);
  // GuitarNoteColor[112].mask(GuitarMask);
  // GuitarNoteColor[113].mask(GuitarMask);
  // GuitarNoteColor[114].mask(GuitarMask);
  // GuitarNoteColor[115].mask(GuitarMask);
  // GuitarNoteColor[116].mask(GuitarMask);
  // GuitarNoteColor[117].mask(GuitarMask);
  // GuitarNoteColor[118].mask(GuitarMask);
  // GuitarNoteColor[119].mask(GuitarMask);
  // GuitarNoteColor[120].mask(GuitarMask);
  // GuitarNoteColor[121].mask(GuitarMask);
  // GuitarNoteColor[122].mask(GuitarMask);
  // GuitarNoteColor[123].mask(GuitarMask);
  // GuitarNoteColor[124].mask(GuitarMask);
  // GuitarNoteColor[125].mask(GuitarMask);
  // GuitarNoteColor[126].mask(GuitarMask);
  // GuitarNoteColor[127].mask(GuitarMask);
  // //Bass
  // BassNoteColor[0].mask(BassMask);
  // BassNoteColor[1].mask(BassMask);
  // BassNoteColor[2].mask(BassMask);
  // BassNoteColor[3].mask(BassMask);
  // BassNoteColor[4].mask(BassMask);
  // BassNoteColor[5].mask(BassMask);
  // BassNoteColor[6].mask(BassMask);
  // BassNoteColor[7].mask(BassMask);
  // BassNoteColor[8].mask(BassMask);
  // BassNoteColor[9].mask(BassMask);
  // BassNoteColor[10].mask(BassMask);
  // BassNoteColor[11].mask(BassMask);
  // BassNoteColor[12].mask(BassMask);
  // BassNoteColor[13].mask(BassMask);
  // BassNoteColor[14].mask(BassMask);
  // BassNoteColor[15].mask(BassMask);
  // BassNoteColor[16].mask(BassMask);
  // BassNoteColor[17].mask(BassMask);
  // BassNoteColor[18].mask(BassMask);
  // BassNoteColor[19].mask(BassMask);
  // BassNoteColor[20].mask(BassMask);
  // BassNoteColor[21].mask(BassMask);
  // BassNoteColor[22].mask(BassMask);
  // BassNoteColor[23].mask(BassMask);
  // BassNoteColor[24].mask(BassMask);
  // BassNoteColor[25].mask(BassMask);
  // BassNoteColor[26].mask(BassMask);
  // BassNoteColor[27].mask(BassMask);
  // BassNoteColor[28].mask(BassMask);
  // BassNoteColor[29].mask(BassMask);
  // BassNoteColor[30].mask(BassMask);
  // BassNoteColor[31].mask(BassMask);
  // BassNoteColor[32].mask(BassMask);
  // BassNoteColor[33].mask(BassMask);
  // BassNoteColor[34].mask(BassMask);
  // BassNoteColor[35].mask(BassMask);
  // BassNoteColor[36].mask(BassMask);
  // BassNoteColor[37].mask(BassMask);
  // BassNoteColor[38].mask(BassMask);
  // BassNoteColor[39].mask(BassMask);
  // BassNoteColor[40].mask(BassMask);
  // BassNoteColor[41].mask(BassMask);
  // BassNoteColor[42].mask(BassMask);
  // BassNoteColor[43].mask(BassMask);
  // BassNoteColor[44].mask(BassMask);
  // BassNoteColor[45].mask(BassMask);
  // BassNoteColor[46].mask(BassMask);
  // BassNoteColor[47].mask(BassMask);
  // BassNoteColor[48].mask(BassMask);
  // BassNoteColor[49].mask(BassMask);
  // BassNoteColor[50].mask(BassMask);
  // BassNoteColor[51].mask(BassMask);
  // BassNoteColor[52].mask(BassMask);
  // BassNoteColor[53].mask(BassMask);
  // BassNoteColor[54].mask(BassMask);
  // BassNoteColor[55].mask(BassMask);
  // BassNoteColor[56].mask(BassMask);
  // BassNoteColor[57].mask(BassMask);
  // BassNoteColor[58].mask(BassMask);
  // BassNoteColor[59].mask(BassMask);
  // BassNoteColor[60].mask(BassMask);
  // BassNoteColor[61].mask(BassMask);
  // BassNoteColor[62].mask(BassMask);
  // BassNoteColor[63].mask(BassMask);
  // BassNoteColor[64].mask(BassMask);
  // BassNoteColor[65].mask(BassMask);
  // BassNoteColor[66].mask(BassMask);
  // BassNoteColor[67].mask(BassMask);
  // BassNoteColor[68].mask(BassMask);
  // BassNoteColor[69].mask(BassMask);
  // BassNoteColor[70].mask(BassMask);
  // BassNoteColor[71].mask(BassMask);
  // BassNoteColor[72].mask(BassMask);
  // BassNoteColor[73].mask(BassMask);
  // BassNoteColor[74].mask(BassMask);
  // BassNoteColor[75].mask(BassMask);
  // BassNoteColor[76].mask(BassMask);
  // BassNoteColor[77].mask(BassMask);
  // BassNoteColor[78].mask(BassMask);
  // BassNoteColor[79].mask(BassMask);
  // BassNoteColor[80].mask(BassMask);
  // BassNoteColor[81].mask(BassMask);
  // BassNoteColor[82].mask(BassMask);
  // BassNoteColor[83].mask(BassMask);
  // BassNoteColor[84].mask(BassMask);
  // BassNoteColor[85].mask(BassMask);
  // BassNoteColor[86].mask(BassMask);
  // BassNoteColor[87].mask(BassMask);
  // BassNoteColor[88].mask(BassMask);
  // BassNoteColor[89].mask(BassMask);
  // BassNoteColor[90].mask(BassMask);
  // BassNoteColor[91].mask(BassMask);
  // BassNoteColor[92].mask(BassMask);
  // BassNoteColor[93].mask(BassMask);
  // BassNoteColor[94].mask(BassMask);
  // BassNoteColor[95].mask(BassMask);
  // BassNoteColor[96].mask(BassMask);
  // BassNoteColor[97].mask(BassMask);
  // BassNoteColor[98].mask(BassMask);
  // BassNoteColor[99].mask(BassMask);
  // BassNoteColor[100].mask(BassMask);
  // BassNoteColor[101].mask(BassMask);
  // BassNoteColor[102].mask(BassMask);
  // BassNoteColor[103].mask(BassMask);
  // BassNoteColor[104].mask(BassMask);
  // BassNoteColor[105].mask(BassMask);
  // BassNoteColor[106].mask(BassMask);
  // BassNoteColor[107].mask(BassMask);
  // BassNoteColor[108].mask(BassMask);
  // BassNoteColor[109].mask(BassMask);
  // BassNoteColor[110].mask(BassMask);
  // BassNoteColor[111].mask(BassMask);
  // BassNoteColor[112].mask(BassMask);
  // BassNoteColor[113].mask(BassMask);
  // BassNoteColor[114].mask(BassMask);
  // BassNoteColor[115].mask(BassMask);
  // BassNoteColor[116].mask(BassMask);
  // BassNoteColor[117].mask(BassMask);
  // BassNoteColor[118].mask(BassMask);
  // BassNoteColor[119].mask(BassMask);
  // BassNoteColor[120].mask(BassMask);
  // BassNoteColor[121].mask(BassMask);
  // BassNoteColor[122].mask(BassMask);
  // BassNoteColor[123].mask(BassMask);
  // BassNoteColor[124].mask(BassMask);
  // BassNoteColor[125].mask(BassMask);
  // BassNoteColor[126].mask(BassMask);
  // BassNoteColor[127].mask(BassMask);
  // //Strings
  // StringsNoteColor[0].mask(StringsMask);
  // StringsNoteColor[1].mask(StringsMask);
  // StringsNoteColor[2].mask(StringsMask);
  // StringsNoteColor[3].mask(StringsMask);
  // StringsNoteColor[4].mask(StringsMask);
  // StringsNoteColor[5].mask(StringsMask);
  // StringsNoteColor[6].mask(StringsMask);
  // StringsNoteColor[7].mask(StringsMask);
  // StringsNoteColor[8].mask(StringsMask);
  // StringsNoteColor[9].mask(StringsMask);
  // StringsNoteColor[10].mask(StringsMask);
  // StringsNoteColor[11].mask(StringsMask);
  // StringsNoteColor[12].mask(StringsMask);
  // StringsNoteColor[13].mask(StringsMask);
  // StringsNoteColor[14].mask(StringsMask);
  // StringsNoteColor[15].mask(StringsMask);
  // StringsNoteColor[16].mask(StringsMask);
  // StringsNoteColor[17].mask(StringsMask);
  // StringsNoteColor[18].mask(StringsMask);
  // StringsNoteColor[19].mask(StringsMask);
  // StringsNoteColor[20].mask(StringsMask);
  // StringsNoteColor[21].mask(StringsMask);
  // StringsNoteColor[22].mask(StringsMask);
  // StringsNoteColor[23].mask(StringsMask);
  // StringsNoteColor[24].mask(StringsMask);
  // StringsNoteColor[25].mask(StringsMask);
  // StringsNoteColor[26].mask(StringsMask);
  // StringsNoteColor[27].mask(StringsMask);
  // StringsNoteColor[28].mask(StringsMask);
  // StringsNoteColor[29].mask(StringsMask);
  // StringsNoteColor[30].mask(StringsMask);
  // StringsNoteColor[31].mask(StringsMask);
  // StringsNoteColor[32].mask(StringsMask);
  // StringsNoteColor[33].mask(StringsMask);
  // StringsNoteColor[34].mask(StringsMask);
  // StringsNoteColor[35].mask(StringsMask);
  // StringsNoteColor[36].mask(StringsMask);
  // StringsNoteColor[37].mask(StringsMask);
  // StringsNoteColor[38].mask(StringsMask);
  // StringsNoteColor[39].mask(StringsMask);
  // StringsNoteColor[40].mask(StringsMask);
  // StringsNoteColor[41].mask(StringsMask);
  // StringsNoteColor[42].mask(StringsMask);
  // StringsNoteColor[43].mask(StringsMask);
  // StringsNoteColor[44].mask(StringsMask);
  // StringsNoteColor[45].mask(StringsMask);
  // StringsNoteColor[46].mask(StringsMask);
  // StringsNoteColor[47].mask(StringsMask);
  // StringsNoteColor[48].mask(StringsMask);
  // StringsNoteColor[49].mask(StringsMask);
  // StringsNoteColor[50].mask(StringsMask);
  // StringsNoteColor[51].mask(StringsMask);
  // StringsNoteColor[52].mask(StringsMask);
  // StringsNoteColor[53].mask(StringsMask);
  // StringsNoteColor[54].mask(StringsMask);
  // StringsNoteColor[55].mask(StringsMask);
  // StringsNoteColor[56].mask(StringsMask);
  // StringsNoteColor[57].mask(StringsMask);
  // StringsNoteColor[58].mask(StringsMask);
  // StringsNoteColor[59].mask(StringsMask);
  // StringsNoteColor[60].mask(StringsMask);
  // StringsNoteColor[61].mask(StringsMask);
  // StringsNoteColor[62].mask(StringsMask);
  // StringsNoteColor[63].mask(StringsMask);
  // StringsNoteColor[64].mask(StringsMask);
  // StringsNoteColor[65].mask(StringsMask);
  // StringsNoteColor[66].mask(StringsMask);
  // StringsNoteColor[67].mask(StringsMask);
  // StringsNoteColor[68].mask(StringsMask);
  // StringsNoteColor[69].mask(StringsMask);
  // StringsNoteColor[70].mask(StringsMask);
  // StringsNoteColor[71].mask(StringsMask);
  // StringsNoteColor[72].mask(StringsMask);
  // StringsNoteColor[73].mask(StringsMask);
  // StringsNoteColor[74].mask(StringsMask);
  // StringsNoteColor[75].mask(StringsMask);
  // StringsNoteColor[76].mask(StringsMask);
  // StringsNoteColor[77].mask(StringsMask);
  // StringsNoteColor[78].mask(StringsMask);
  // StringsNoteColor[79].mask(StringsMask);
  // StringsNoteColor[80].mask(StringsMask);
  // StringsNoteColor[81].mask(StringsMask);
  // StringsNoteColor[82].mask(StringsMask);
  // StringsNoteColor[83].mask(StringsMask);
  // StringsNoteColor[84].mask(StringsMask);
  // StringsNoteColor[85].mask(StringsMask);
  // StringsNoteColor[86].mask(StringsMask);
  // StringsNoteColor[87].mask(StringsMask);
  // StringsNoteColor[88].mask(StringsMask);
  // StringsNoteColor[89].mask(StringsMask);
  // StringsNoteColor[90].mask(StringsMask);
  // StringsNoteColor[91].mask(StringsMask);
  // StringsNoteColor[92].mask(StringsMask);
  // StringsNoteColor[93].mask(StringsMask);
  // StringsNoteColor[94].mask(StringsMask);
  // StringsNoteColor[95].mask(StringsMask);
  // StringsNoteColor[96].mask(StringsMask);
  // StringsNoteColor[97].mask(StringsMask);
  // StringsNoteColor[98].mask(StringsMask);
  // StringsNoteColor[99].mask(StringsMask);
  // StringsNoteColor[100].mask(StringsMask);
  // StringsNoteColor[101].mask(StringsMask);
  // StringsNoteColor[102].mask(StringsMask);
  // StringsNoteColor[103].mask(StringsMask);
  // StringsNoteColor[104].mask(StringsMask);
  // StringsNoteColor[105].mask(StringsMask);
  // StringsNoteColor[106].mask(StringsMask);
  // StringsNoteColor[107].mask(StringsMask);
  // StringsNoteColor[108].mask(StringsMask);
  // StringsNoteColor[109].mask(StringsMask);
  // StringsNoteColor[110].mask(StringsMask);
  // StringsNoteColor[111].mask(StringsMask);
  // StringsNoteColor[112].mask(StringsMask);
  // StringsNoteColor[113].mask(StringsMask);
  // StringsNoteColor[114].mask(StringsMask);
  // StringsNoteColor[115].mask(StringsMask);
  // StringsNoteColor[116].mask(StringsMask);
  // StringsNoteColor[117].mask(StringsMask);
  // StringsNoteColor[118].mask(StringsMask);
  // StringsNoteColor[119].mask(StringsMask);
  // StringsNoteColor[120].mask(StringsMask);
  // StringsNoteColor[121].mask(StringsMask);
  // StringsNoteColor[122].mask(StringsMask);
  // StringsNoteColor[123].mask(StringsMask);
  // StringsNoteColor[124].mask(StringsMask);
  // StringsNoteColor[125].mask(StringsMask);
  // StringsNoteColor[126].mask(StringsMask);
  // StringsNoteColor[127].mask(StringsMask);
  // //Ensemble
  // EnsembleNoteColor[0].mask(EnsembleMask);
  // EnsembleNoteColor[1].mask(EnsembleMask);
  // EnsembleNoteColor[2].mask(EnsembleMask);
  // EnsembleNoteColor[3].mask(EnsembleMask);
  // EnsembleNoteColor[4].mask(EnsembleMask);
  // EnsembleNoteColor[5].mask(EnsembleMask);
  // EnsembleNoteColor[6].mask(EnsembleMask);
  // EnsembleNoteColor[7].mask(EnsembleMask);
  // EnsembleNoteColor[8].mask(EnsembleMask);
  // EnsembleNoteColor[9].mask(EnsembleMask);
  // EnsembleNoteColor[10].mask(EnsembleMask);
  // EnsembleNoteColor[11].mask(EnsembleMask);
  // EnsembleNoteColor[12].mask(EnsembleMask);
  // EnsembleNoteColor[13].mask(EnsembleMask);
  // EnsembleNoteColor[14].mask(EnsembleMask);
  // EnsembleNoteColor[15].mask(EnsembleMask);
  // EnsembleNoteColor[16].mask(EnsembleMask);
  // EnsembleNoteColor[17].mask(EnsembleMask);
  // EnsembleNoteColor[18].mask(EnsembleMask);
  // EnsembleNoteColor[19].mask(EnsembleMask);
  // EnsembleNoteColor[20].mask(EnsembleMask);
  // EnsembleNoteColor[21].mask(EnsembleMask);
  // EnsembleNoteColor[22].mask(EnsembleMask);
  // EnsembleNoteColor[23].mask(EnsembleMask);
  // EnsembleNoteColor[24].mask(EnsembleMask);
  // EnsembleNoteColor[25].mask(EnsembleMask);
  // EnsembleNoteColor[26].mask(EnsembleMask);
  // EnsembleNoteColor[27].mask(EnsembleMask);
  // EnsembleNoteColor[28].mask(EnsembleMask);
  // EnsembleNoteColor[29].mask(EnsembleMask);
  // EnsembleNoteColor[30].mask(EnsembleMask);
  // EnsembleNoteColor[31].mask(EnsembleMask);
  // EnsembleNoteColor[32].mask(EnsembleMask);
  // EnsembleNoteColor[33].mask(EnsembleMask);
  // EnsembleNoteColor[34].mask(EnsembleMask);
  // EnsembleNoteColor[35].mask(EnsembleMask);
  // EnsembleNoteColor[36].mask(EnsembleMask);
  // EnsembleNoteColor[37].mask(EnsembleMask);
  // EnsembleNoteColor[38].mask(EnsembleMask);
  // EnsembleNoteColor[39].mask(EnsembleMask);
  // EnsembleNoteColor[40].mask(EnsembleMask);
  // EnsembleNoteColor[41].mask(EnsembleMask);
  // EnsembleNoteColor[42].mask(EnsembleMask);
  // EnsembleNoteColor[43].mask(EnsembleMask);
  // EnsembleNoteColor[44].mask(EnsembleMask);
  // EnsembleNoteColor[45].mask(EnsembleMask);
  // EnsembleNoteColor[46].mask(EnsembleMask);
  // EnsembleNoteColor[47].mask(EnsembleMask);
  // EnsembleNoteColor[48].mask(EnsembleMask);
  // EnsembleNoteColor[49].mask(EnsembleMask);
  // EnsembleNoteColor[50].mask(EnsembleMask);
  // EnsembleNoteColor[51].mask(EnsembleMask);
  // EnsembleNoteColor[52].mask(EnsembleMask);
  // EnsembleNoteColor[53].mask(EnsembleMask);
  // EnsembleNoteColor[54].mask(EnsembleMask);
  // EnsembleNoteColor[55].mask(EnsembleMask);
  // EnsembleNoteColor[56].mask(EnsembleMask);
  // EnsembleNoteColor[57].mask(EnsembleMask);
  // EnsembleNoteColor[58].mask(EnsembleMask);
  // EnsembleNoteColor[59].mask(EnsembleMask);
  // EnsembleNoteColor[60].mask(EnsembleMask);
  // EnsembleNoteColor[61].mask(EnsembleMask);
  // EnsembleNoteColor[62].mask(EnsembleMask);
  // EnsembleNoteColor[63].mask(EnsembleMask);
  // EnsembleNoteColor[64].mask(EnsembleMask);
  // EnsembleNoteColor[65].mask(EnsembleMask);
  // EnsembleNoteColor[66].mask(EnsembleMask);
  // EnsembleNoteColor[67].mask(EnsembleMask);
  // EnsembleNoteColor[68].mask(EnsembleMask);
  // EnsembleNoteColor[69].mask(EnsembleMask);
  // EnsembleNoteColor[70].mask(EnsembleMask);
  // EnsembleNoteColor[71].mask(EnsembleMask);
  // EnsembleNoteColor[72].mask(EnsembleMask);
  // EnsembleNoteColor[73].mask(EnsembleMask);
  // EnsembleNoteColor[74].mask(EnsembleMask);
  // EnsembleNoteColor[75].mask(EnsembleMask);
  // EnsembleNoteColor[76].mask(EnsembleMask);
  // EnsembleNoteColor[77].mask(EnsembleMask);
  // EnsembleNoteColor[78].mask(EnsembleMask);
  // EnsembleNoteColor[79].mask(EnsembleMask);
  // EnsembleNoteColor[80].mask(EnsembleMask);
  // EnsembleNoteColor[81].mask(EnsembleMask);
  // EnsembleNoteColor[82].mask(EnsembleMask);
  // EnsembleNoteColor[83].mask(EnsembleMask);
  // EnsembleNoteColor[84].mask(EnsembleMask);
  // EnsembleNoteColor[85].mask(EnsembleMask);
  // EnsembleNoteColor[86].mask(EnsembleMask);
  // EnsembleNoteColor[87].mask(EnsembleMask);
  // EnsembleNoteColor[88].mask(EnsembleMask);
  // EnsembleNoteColor[89].mask(EnsembleMask);
  // EnsembleNoteColor[90].mask(EnsembleMask);
  // EnsembleNoteColor[91].mask(EnsembleMask);
  // EnsembleNoteColor[92].mask(EnsembleMask);
  // EnsembleNoteColor[93].mask(EnsembleMask);
  // EnsembleNoteColor[94].mask(EnsembleMask);
  // EnsembleNoteColor[95].mask(EnsembleMask);
  // EnsembleNoteColor[96].mask(EnsembleMask);
  // EnsembleNoteColor[97].mask(EnsembleMask);
  // EnsembleNoteColor[98].mask(EnsembleMask);
  // EnsembleNoteColor[99].mask(EnsembleMask);
  // EnsembleNoteColor[100].mask(EnsembleMask);
  // EnsembleNoteColor[101].mask(EnsembleMask);
  // EnsembleNoteColor[102].mask(EnsembleMask);
  // EnsembleNoteColor[103].mask(EnsembleMask);
  // EnsembleNoteColor[104].mask(EnsembleMask);
  // EnsembleNoteColor[105].mask(EnsembleMask);
  // EnsembleNoteColor[106].mask(EnsembleMask);
  // EnsembleNoteColor[107].mask(EnsembleMask);
  // EnsembleNoteColor[108].mask(EnsembleMask);
  // EnsembleNoteColor[109].mask(EnsembleMask);
  // EnsembleNoteColor[110].mask(EnsembleMask);
  // EnsembleNoteColor[111].mask(EnsembleMask);
  // EnsembleNoteColor[112].mask(EnsembleMask);
  // EnsembleNoteColor[113].mask(EnsembleMask);
  // EnsembleNoteColor[114].mask(EnsembleMask);
  // EnsembleNoteColor[115].mask(EnsembleMask);
  // EnsembleNoteColor[116].mask(EnsembleMask);
  // EnsembleNoteColor[117].mask(EnsembleMask);
  // EnsembleNoteColor[118].mask(EnsembleMask);
  // EnsembleNoteColor[119].mask(EnsembleMask);
  // EnsembleNoteColor[120].mask(EnsembleMask);
  // EnsembleNoteColor[121].mask(EnsembleMask);
  // EnsembleNoteColor[122].mask(EnsembleMask);
  // EnsembleNoteColor[123].mask(EnsembleMask);
  // EnsembleNoteColor[124].mask(EnsembleMask);
  // EnsembleNoteColor[125].mask(EnsembleMask);
  // EnsembleNoteColor[126].mask(EnsembleMask);
  // EnsembleNoteColor[127].mask(EnsembleMask);
  // //Brass
  // BrassNoteColor[0].mask(BrassMask);
  // BrassNoteColor[1].mask(BrassMask);
  // BrassNoteColor[2].mask(BrassMask);
  // BrassNoteColor[3].mask(BrassMask);
  // BrassNoteColor[4].mask(BrassMask);
  // BrassNoteColor[5].mask(BrassMask);
  // BrassNoteColor[6].mask(BrassMask);
  // BrassNoteColor[7].mask(BrassMask);
  // BrassNoteColor[8].mask(BrassMask);
  // BrassNoteColor[9].mask(BrassMask);
  // BrassNoteColor[10].mask(BrassMask);
  // BrassNoteColor[11].mask(BrassMask);
  // BrassNoteColor[12].mask(BrassMask);
  // BrassNoteColor[13].mask(BrassMask);
  // BrassNoteColor[14].mask(BrassMask);
  // BrassNoteColor[15].mask(BrassMask);
  // BrassNoteColor[16].mask(BrassMask);
  // BrassNoteColor[17].mask(BrassMask);
  // BrassNoteColor[18].mask(BrassMask);
  // BrassNoteColor[19].mask(BrassMask);
  // BrassNoteColor[20].mask(BrassMask);
  // BrassNoteColor[21].mask(BrassMask);
  // BrassNoteColor[22].mask(BrassMask);
  // BrassNoteColor[23].mask(BrassMask);
  // BrassNoteColor[24].mask(BrassMask);
  // BrassNoteColor[25].mask(BrassMask);
  // BrassNoteColor[26].mask(BrassMask);
  // BrassNoteColor[27].mask(BrassMask);
  // BrassNoteColor[28].mask(BrassMask);
  // BrassNoteColor[29].mask(BrassMask);
  // BrassNoteColor[30].mask(BrassMask);
  // BrassNoteColor[31].mask(BrassMask);
  // BrassNoteColor[32].mask(BrassMask);
  // BrassNoteColor[33].mask(BrassMask);
  // BrassNoteColor[34].mask(BrassMask);
  // BrassNoteColor[35].mask(BrassMask);
  // BrassNoteColor[36].mask(BrassMask);
  // BrassNoteColor[37].mask(BrassMask);
  // BrassNoteColor[38].mask(BrassMask);
  // BrassNoteColor[39].mask(BrassMask);
  // BrassNoteColor[40].mask(BrassMask);
  // BrassNoteColor[41].mask(BrassMask);
  // BrassNoteColor[42].mask(BrassMask);
  // BrassNoteColor[43].mask(BrassMask);
  // BrassNoteColor[44].mask(BrassMask);
  // BrassNoteColor[45].mask(BrassMask);
  // BrassNoteColor[46].mask(BrassMask);
  // BrassNoteColor[47].mask(BrassMask);
  // BrassNoteColor[48].mask(BrassMask);
  // BrassNoteColor[49].mask(BrassMask);
  // BrassNoteColor[50].mask(BrassMask);
  // BrassNoteColor[51].mask(BrassMask);
  // BrassNoteColor[52].mask(BrassMask);
  // BrassNoteColor[53].mask(BrassMask);
  // BrassNoteColor[54].mask(BrassMask);
  // BrassNoteColor[55].mask(BrassMask);
  // BrassNoteColor[56].mask(BrassMask);
  // BrassNoteColor[57].mask(BrassMask);
  // BrassNoteColor[58].mask(BrassMask);
  // BrassNoteColor[59].mask(BrassMask);
  // BrassNoteColor[60].mask(BrassMask);
  // BrassNoteColor[61].mask(BrassMask);
  // BrassNoteColor[62].mask(BrassMask);
  // BrassNoteColor[63].mask(BrassMask);
  // BrassNoteColor[64].mask(BrassMask);
  // BrassNoteColor[65].mask(BrassMask);
  // BrassNoteColor[66].mask(BrassMask);
  // BrassNoteColor[67].mask(BrassMask);
  // BrassNoteColor[68].mask(BrassMask);
  // BrassNoteColor[69].mask(BrassMask);
  // BrassNoteColor[70].mask(BrassMask);
  // BrassNoteColor[71].mask(BrassMask);
  // BrassNoteColor[72].mask(BrassMask);
  // BrassNoteColor[73].mask(BrassMask);
  // BrassNoteColor[74].mask(BrassMask);
  // BrassNoteColor[75].mask(BrassMask);
  // BrassNoteColor[76].mask(BrassMask);
  // BrassNoteColor[77].mask(BrassMask);
  // BrassNoteColor[78].mask(BrassMask);
  // BrassNoteColor[79].mask(BrassMask);
  // BrassNoteColor[80].mask(BrassMask);
  // BrassNoteColor[81].mask(BrassMask);
  // BrassNoteColor[82].mask(BrassMask);
  // BrassNoteColor[83].mask(BrassMask);
  // BrassNoteColor[84].mask(BrassMask);
  // BrassNoteColor[85].mask(BrassMask);
  // BrassNoteColor[86].mask(BrassMask);
  // BrassNoteColor[87].mask(BrassMask);
  // BrassNoteColor[88].mask(BrassMask);
  // BrassNoteColor[89].mask(BrassMask);
  // BrassNoteColor[90].mask(BrassMask);
  // BrassNoteColor[91].mask(BrassMask);
  // BrassNoteColor[92].mask(BrassMask);
  // BrassNoteColor[93].mask(BrassMask);
  // BrassNoteColor[94].mask(BrassMask);
  // BrassNoteColor[95].mask(BrassMask);
  // BrassNoteColor[96].mask(BrassMask);
  // BrassNoteColor[97].mask(BrassMask);
  // BrassNoteColor[98].mask(BrassMask);
  // BrassNoteColor[99].mask(BrassMask);
  // BrassNoteColor[100].mask(BrassMask);
  // BrassNoteColor[101].mask(BrassMask);
  // BrassNoteColor[102].mask(BrassMask);
  // BrassNoteColor[103].mask(BrassMask);
  // BrassNoteColor[104].mask(BrassMask);
  // BrassNoteColor[105].mask(BrassMask);
  // BrassNoteColor[106].mask(BrassMask);
  // BrassNoteColor[107].mask(BrassMask);
  // BrassNoteColor[108].mask(BrassMask);
  // BrassNoteColor[109].mask(BrassMask);
  // BrassNoteColor[110].mask(BrassMask);
  // BrassNoteColor[111].mask(BrassMask);
  // BrassNoteColor[112].mask(BrassMask);
  // BrassNoteColor[113].mask(BrassMask);
  // BrassNoteColor[114].mask(BrassMask);
  // BrassNoteColor[115].mask(BrassMask);
  // BrassNoteColor[116].mask(BrassMask);
  // BrassNoteColor[117].mask(BrassMask);
  // BrassNoteColor[118].mask(BrassMask);
  // BrassNoteColor[119].mask(BrassMask);
  // BrassNoteColor[120].mask(BrassMask);
  // BrassNoteColor[121].mask(BrassMask);
  // BrassNoteColor[122].mask(BrassMask);
  // BrassNoteColor[123].mask(BrassMask);
  // BrassNoteColor[124].mask(BrassMask);
  // BrassNoteColor[125].mask(BrassMask);
  // BrassNoteColor[126].mask(BrassMask);
  // BrassNoteColor[127].mask(BrassMask);
  // //Reed
  // ReedNoteColor[0].mask(ReedMask);
  // ReedNoteColor[1].mask(ReedMask);
  // ReedNoteColor[2].mask(ReedMask);
  // ReedNoteColor[3].mask(ReedMask);
  // ReedNoteColor[4].mask(ReedMask);
  // ReedNoteColor[5].mask(ReedMask);
  // ReedNoteColor[6].mask(ReedMask);
  // ReedNoteColor[7].mask(ReedMask);
  // ReedNoteColor[8].mask(ReedMask);
  // ReedNoteColor[9].mask(ReedMask);
  // ReedNoteColor[10].mask(ReedMask);
  // ReedNoteColor[11].mask(ReedMask);
  // ReedNoteColor[12].mask(ReedMask);
  // ReedNoteColor[13].mask(ReedMask);
  // ReedNoteColor[14].mask(ReedMask);
  // ReedNoteColor[15].mask(ReedMask);
  // ReedNoteColor[16].mask(ReedMask);
  // ReedNoteColor[17].mask(ReedMask);
  // ReedNoteColor[18].mask(ReedMask);
  // ReedNoteColor[19].mask(ReedMask);
  // ReedNoteColor[20].mask(ReedMask);
  // ReedNoteColor[21].mask(ReedMask);
  // ReedNoteColor[22].mask(ReedMask);
  // ReedNoteColor[23].mask(ReedMask);
  // ReedNoteColor[24].mask(ReedMask);
  // ReedNoteColor[25].mask(ReedMask);
  // ReedNoteColor[26].mask(ReedMask);
  // ReedNoteColor[27].mask(ReedMask);
  // ReedNoteColor[28].mask(ReedMask);
  // ReedNoteColor[29].mask(ReedMask);
  // ReedNoteColor[30].mask(ReedMask);
  // ReedNoteColor[31].mask(ReedMask);
  // ReedNoteColor[32].mask(ReedMask);
  // ReedNoteColor[33].mask(ReedMask);
  // ReedNoteColor[34].mask(ReedMask);
  // ReedNoteColor[35].mask(ReedMask);
  // ReedNoteColor[36].mask(ReedMask);
  // ReedNoteColor[37].mask(ReedMask);
  // ReedNoteColor[38].mask(ReedMask);
  // ReedNoteColor[39].mask(ReedMask);
  // ReedNoteColor[40].mask(ReedMask);
  // ReedNoteColor[41].mask(ReedMask);
  // ReedNoteColor[42].mask(ReedMask);
  // ReedNoteColor[43].mask(ReedMask);
  // ReedNoteColor[44].mask(ReedMask);
  // ReedNoteColor[45].mask(ReedMask);
  // ReedNoteColor[46].mask(ReedMask);
  // ReedNoteColor[47].mask(ReedMask);
  // ReedNoteColor[48].mask(ReedMask);
  // ReedNoteColor[49].mask(ReedMask);
  // ReedNoteColor[50].mask(ReedMask);
  // ReedNoteColor[51].mask(ReedMask);
  // ReedNoteColor[52].mask(ReedMask);
  // ReedNoteColor[53].mask(ReedMask);
  // ReedNoteColor[54].mask(ReedMask);
  // ReedNoteColor[55].mask(ReedMask);
  // ReedNoteColor[56].mask(ReedMask);
  // ReedNoteColor[57].mask(ReedMask);
  // ReedNoteColor[58].mask(ReedMask);
  // ReedNoteColor[59].mask(ReedMask);
  // ReedNoteColor[60].mask(ReedMask);
  // ReedNoteColor[61].mask(ReedMask);
  // ReedNoteColor[62].mask(ReedMask);
  // ReedNoteColor[63].mask(ReedMask);
  // ReedNoteColor[64].mask(ReedMask);
  // ReedNoteColor[65].mask(ReedMask);
  // ReedNoteColor[66].mask(ReedMask);
  // ReedNoteColor[67].mask(ReedMask);
  // ReedNoteColor[68].mask(ReedMask);
  // ReedNoteColor[69].mask(ReedMask);
  // ReedNoteColor[70].mask(ReedMask);
  // ReedNoteColor[71].mask(ReedMask);
  // ReedNoteColor[72].mask(ReedMask);
  // ReedNoteColor[73].mask(ReedMask);
  // ReedNoteColor[74].mask(ReedMask);
  // ReedNoteColor[75].mask(ReedMask);
  // ReedNoteColor[76].mask(ReedMask);
  // ReedNoteColor[77].mask(ReedMask);
  // ReedNoteColor[78].mask(ReedMask);
  // ReedNoteColor[79].mask(ReedMask);
  // ReedNoteColor[80].mask(ReedMask);
  // ReedNoteColor[81].mask(ReedMask);
  // ReedNoteColor[82].mask(ReedMask);
  // ReedNoteColor[83].mask(ReedMask);
  // ReedNoteColor[84].mask(ReedMask);
  // ReedNoteColor[85].mask(ReedMask);
  // ReedNoteColor[86].mask(ReedMask);
  // ReedNoteColor[87].mask(ReedMask);
  // ReedNoteColor[88].mask(ReedMask);
  // ReedNoteColor[89].mask(ReedMask);
  // ReedNoteColor[90].mask(ReedMask);
  // ReedNoteColor[91].mask(ReedMask);
  // ReedNoteColor[92].mask(ReedMask);
  // ReedNoteColor[93].mask(ReedMask);
  // ReedNoteColor[94].mask(ReedMask);
  // ReedNoteColor[95].mask(ReedMask);
  // ReedNoteColor[96].mask(ReedMask);
  // ReedNoteColor[97].mask(ReedMask);
  // ReedNoteColor[98].mask(ReedMask);
  // ReedNoteColor[99].mask(ReedMask);
  // ReedNoteColor[100].mask(ReedMask);
  // ReedNoteColor[101].mask(ReedMask);
  // ReedNoteColor[102].mask(ReedMask);
  // ReedNoteColor[103].mask(ReedMask);
  // ReedNoteColor[104].mask(ReedMask);
  // ReedNoteColor[105].mask(ReedMask);
  // ReedNoteColor[106].mask(ReedMask);
  // ReedNoteColor[107].mask(ReedMask);
  // ReedNoteColor[108].mask(ReedMask);
  // ReedNoteColor[109].mask(ReedMask);
  // ReedNoteColor[110].mask(ReedMask);
  // ReedNoteColor[111].mask(ReedMask);
  // ReedNoteColor[112].mask(ReedMask);
  // ReedNoteColor[113].mask(ReedMask);
  // ReedNoteColor[114].mask(ReedMask);
  // ReedNoteColor[115].mask(ReedMask);
  // ReedNoteColor[116].mask(ReedMask);
  // ReedNoteColor[117].mask(ReedMask);
  // ReedNoteColor[118].mask(ReedMask);
  // ReedNoteColor[119].mask(ReedMask);
  // ReedNoteColor[120].mask(ReedMask);
  // ReedNoteColor[121].mask(ReedMask);
  // ReedNoteColor[122].mask(ReedMask);
  // ReedNoteColor[123].mask(ReedMask);
  // ReedNoteColor[124].mask(ReedMask);
  // ReedNoteColor[125].mask(ReedMask);
  // ReedNoteColor[126].mask(ReedMask);
  // ReedNoteColor[127].mask(ReedMask);
  // //Pipe
  // PipeNoteColor[0].mask(PipeMask);
  // PipeNoteColor[1].mask(PipeMask);
  // PipeNoteColor[2].mask(PipeMask);
  // PipeNoteColor[3].mask(PipeMask);
  // PipeNoteColor[4].mask(PipeMask);
  // PipeNoteColor[5].mask(PipeMask);
  // PipeNoteColor[6].mask(PipeMask);
  // PipeNoteColor[7].mask(PipeMask);
  // PipeNoteColor[8].mask(PipeMask);
  // PipeNoteColor[9].mask(PipeMask);
  // PipeNoteColor[10].mask(PipeMask);
  // PipeNoteColor[11].mask(PipeMask);
  // PipeNoteColor[12].mask(PipeMask);
  // PipeNoteColor[13].mask(PipeMask);
  // PipeNoteColor[14].mask(PipeMask);
  // PipeNoteColor[15].mask(PipeMask);
  // PipeNoteColor[16].mask(PipeMask);
  // PipeNoteColor[17].mask(PipeMask);
  // PipeNoteColor[18].mask(PipeMask);
  // PipeNoteColor[19].mask(PipeMask);
  // PipeNoteColor[20].mask(PipeMask);
  // PipeNoteColor[21].mask(PipeMask);
  // PipeNoteColor[22].mask(PipeMask);
  // PipeNoteColor[23].mask(PipeMask);
  // PipeNoteColor[24].mask(PipeMask);
  // PipeNoteColor[25].mask(PipeMask);
  // PipeNoteColor[26].mask(PipeMask);
  // PipeNoteColor[27].mask(PipeMask);
  // PipeNoteColor[28].mask(PipeMask);
  // PipeNoteColor[29].mask(PipeMask);
  // PipeNoteColor[30].mask(PipeMask);
  // PipeNoteColor[31].mask(PipeMask);
  // PipeNoteColor[32].mask(PipeMask);
  // PipeNoteColor[33].mask(PipeMask);
  // PipeNoteColor[34].mask(PipeMask);
  // PipeNoteColor[35].mask(PipeMask);
  // PipeNoteColor[36].mask(PipeMask);
  // PipeNoteColor[37].mask(PipeMask);
  // PipeNoteColor[38].mask(PipeMask);
  // PipeNoteColor[39].mask(PipeMask);
  // PipeNoteColor[40].mask(PipeMask);
  // PipeNoteColor[41].mask(PipeMask);
  // PipeNoteColor[42].mask(PipeMask);
  // PipeNoteColor[43].mask(PipeMask);
  // PipeNoteColor[44].mask(PipeMask);
  // PipeNoteColor[45].mask(PipeMask);
  // PipeNoteColor[46].mask(PipeMask);
  // PipeNoteColor[47].mask(PipeMask);
  // PipeNoteColor[48].mask(PipeMask);
  // PipeNoteColor[49].mask(PipeMask);
  // PipeNoteColor[50].mask(PipeMask);
  // PipeNoteColor[51].mask(PipeMask);
  // PipeNoteColor[52].mask(PipeMask);
  // PipeNoteColor[53].mask(PipeMask);
  // PipeNoteColor[54].mask(PipeMask);
  // PipeNoteColor[55].mask(PipeMask);
  // PipeNoteColor[56].mask(PipeMask);
  // PipeNoteColor[57].mask(PipeMask);
  // PipeNoteColor[58].mask(PipeMask);
  // PipeNoteColor[59].mask(PipeMask);
  // PipeNoteColor[60].mask(PipeMask);
  // PipeNoteColor[61].mask(PipeMask);
  // PipeNoteColor[62].mask(PipeMask);
  // PipeNoteColor[63].mask(PipeMask);
  // PipeNoteColor[64].mask(PipeMask);
  // PipeNoteColor[65].mask(PipeMask);
  // PipeNoteColor[66].mask(PipeMask);
  // PipeNoteColor[67].mask(PipeMask);
  // PipeNoteColor[68].mask(PipeMask);
  // PipeNoteColor[69].mask(PipeMask);
  // PipeNoteColor[70].mask(PipeMask);
  // PipeNoteColor[71].mask(PipeMask);
  // PipeNoteColor[72].mask(PipeMask);
  // PipeNoteColor[73].mask(PipeMask);
  // PipeNoteColor[74].mask(PipeMask);
  // PipeNoteColor[75].mask(PipeMask);
  // PipeNoteColor[76].mask(PipeMask);
  // PipeNoteColor[77].mask(PipeMask);
  // PipeNoteColor[78].mask(PipeMask);
  // PipeNoteColor[79].mask(PipeMask);
  // PipeNoteColor[80].mask(PipeMask);
  // PipeNoteColor[81].mask(PipeMask);
  // PipeNoteColor[82].mask(PipeMask);
  // PipeNoteColor[83].mask(PipeMask);
  // PipeNoteColor[84].mask(PipeMask);
  // PipeNoteColor[85].mask(PipeMask);
  // PipeNoteColor[86].mask(PipeMask);
  // PipeNoteColor[87].mask(PipeMask);
  // PipeNoteColor[88].mask(PipeMask);
  // PipeNoteColor[89].mask(PipeMask);
  // PipeNoteColor[90].mask(PipeMask);
  // PipeNoteColor[91].mask(PipeMask);
  // PipeNoteColor[92].mask(PipeMask);
  // PipeNoteColor[93].mask(PipeMask);
  // PipeNoteColor[94].mask(PipeMask);
  // PipeNoteColor[95].mask(PipeMask);
  // PipeNoteColor[96].mask(PipeMask);
  // PipeNoteColor[97].mask(PipeMask);
  // PipeNoteColor[98].mask(PipeMask);
  // PipeNoteColor[99].mask(PipeMask);
  // PipeNoteColor[100].mask(PipeMask);
  // PipeNoteColor[101].mask(PipeMask);
  // PipeNoteColor[102].mask(PipeMask);
  // PipeNoteColor[103].mask(PipeMask);
  // PipeNoteColor[104].mask(PipeMask);
  // PipeNoteColor[105].mask(PipeMask);
  // PipeNoteColor[106].mask(PipeMask);
  // PipeNoteColor[107].mask(PipeMask);
  // PipeNoteColor[108].mask(PipeMask);
  // PipeNoteColor[109].mask(PipeMask);
  // PipeNoteColor[110].mask(PipeMask);
  // PipeNoteColor[111].mask(PipeMask);
  // PipeNoteColor[112].mask(PipeMask);
  // PipeNoteColor[113].mask(PipeMask);
  // PipeNoteColor[114].mask(PipeMask);
  // PipeNoteColor[115].mask(PipeMask);
  // PipeNoteColor[116].mask(PipeMask);
  // PipeNoteColor[117].mask(PipeMask);
  // PipeNoteColor[118].mask(PipeMask);
  // PipeNoteColor[119].mask(PipeMask);
  // PipeNoteColor[120].mask(PipeMask);
  // PipeNoteColor[121].mask(PipeMask);
  // PipeNoteColor[122].mask(PipeMask);
  // PipeNoteColor[123].mask(PipeMask);
  // PipeNoteColor[124].mask(PipeMask);
  // PipeNoteColor[125].mask(PipeMask);
  // PipeNoteColor[126].mask(PipeMask);
  // PipeNoteColor[127].mask(PipeMask);
  // //Synth Lead
  // SynthLeadNoteColor[0].mask(SynthLeadMask);
  // SynthLeadNoteColor[1].mask(SynthLeadMask);
  // SynthLeadNoteColor[2].mask(SynthLeadMask);
  // SynthLeadNoteColor[3].mask(SynthLeadMask);
  // SynthLeadNoteColor[4].mask(SynthLeadMask);
  // SynthLeadNoteColor[5].mask(SynthLeadMask);
  // SynthLeadNoteColor[6].mask(SynthLeadMask);
  // SynthLeadNoteColor[7].mask(SynthLeadMask);
  // SynthLeadNoteColor[8].mask(SynthLeadMask);
  // SynthLeadNoteColor[9].mask(SynthLeadMask);
  // SynthLeadNoteColor[10].mask(SynthLeadMask);
  // SynthLeadNoteColor[11].mask(SynthLeadMask);
  // SynthLeadNoteColor[12].mask(SynthLeadMask);
  // SynthLeadNoteColor[13].mask(SynthLeadMask);
  // SynthLeadNoteColor[14].mask(SynthLeadMask);
  // SynthLeadNoteColor[15].mask(SynthLeadMask);
  // SynthLeadNoteColor[16].mask(SynthLeadMask);
  // SynthLeadNoteColor[17].mask(SynthLeadMask);
  // SynthLeadNoteColor[18].mask(SynthLeadMask);
  // SynthLeadNoteColor[19].mask(SynthLeadMask);
  // SynthLeadNoteColor[20].mask(SynthLeadMask);
  // SynthLeadNoteColor[21].mask(SynthLeadMask);
  // SynthLeadNoteColor[22].mask(SynthLeadMask);
  // SynthLeadNoteColor[23].mask(SynthLeadMask);
  // SynthLeadNoteColor[24].mask(SynthLeadMask);
  // SynthLeadNoteColor[25].mask(SynthLeadMask);
  // SynthLeadNoteColor[26].mask(SynthLeadMask);
  // SynthLeadNoteColor[27].mask(SynthLeadMask);
  // SynthLeadNoteColor[28].mask(SynthLeadMask);
  // SynthLeadNoteColor[29].mask(SynthLeadMask);
  // SynthLeadNoteColor[30].mask(SynthLeadMask);
  // SynthLeadNoteColor[31].mask(SynthLeadMask);
  // SynthLeadNoteColor[32].mask(SynthLeadMask);
  // SynthLeadNoteColor[33].mask(SynthLeadMask);
  // SynthLeadNoteColor[34].mask(SynthLeadMask);
  // SynthLeadNoteColor[35].mask(SynthLeadMask);
  // SynthLeadNoteColor[36].mask(SynthLeadMask);
  // SynthLeadNoteColor[37].mask(SynthLeadMask);
  // SynthLeadNoteColor[38].mask(SynthLeadMask);
  // SynthLeadNoteColor[39].mask(SynthLeadMask);
  // SynthLeadNoteColor[40].mask(SynthLeadMask);
  // SynthLeadNoteColor[41].mask(SynthLeadMask);
  // SynthLeadNoteColor[42].mask(SynthLeadMask);
  // SynthLeadNoteColor[43].mask(SynthLeadMask);
  // SynthLeadNoteColor[44].mask(SynthLeadMask);
  // SynthLeadNoteColor[45].mask(SynthLeadMask);
  // SynthLeadNoteColor[46].mask(SynthLeadMask);
  // SynthLeadNoteColor[47].mask(SynthLeadMask);
  // SynthLeadNoteColor[48].mask(SynthLeadMask);
  // SynthLeadNoteColor[49].mask(SynthLeadMask);
  // SynthLeadNoteColor[50].mask(SynthLeadMask);
  // SynthLeadNoteColor[51].mask(SynthLeadMask);
  // SynthLeadNoteColor[52].mask(SynthLeadMask);
  // SynthLeadNoteColor[53].mask(SynthLeadMask);
  // SynthLeadNoteColor[54].mask(SynthLeadMask);
  // SynthLeadNoteColor[55].mask(SynthLeadMask);
  // SynthLeadNoteColor[56].mask(SynthLeadMask);
  // SynthLeadNoteColor[57].mask(SynthLeadMask);
  // SynthLeadNoteColor[58].mask(SynthLeadMask);
  // SynthLeadNoteColor[59].mask(SynthLeadMask);
  // SynthLeadNoteColor[60].mask(SynthLeadMask);
  // SynthLeadNoteColor[61].mask(SynthLeadMask);
  // SynthLeadNoteColor[62].mask(SynthLeadMask);
  // SynthLeadNoteColor[63].mask(SynthLeadMask);
  // SynthLeadNoteColor[64].mask(SynthLeadMask);
  // SynthLeadNoteColor[65].mask(SynthLeadMask);
  // SynthLeadNoteColor[66].mask(SynthLeadMask);
  // SynthLeadNoteColor[67].mask(SynthLeadMask);
  // SynthLeadNoteColor[68].mask(SynthLeadMask);
  // SynthLeadNoteColor[69].mask(SynthLeadMask);
  // SynthLeadNoteColor[70].mask(SynthLeadMask);
  // SynthLeadNoteColor[71].mask(SynthLeadMask);
  // SynthLeadNoteColor[72].mask(SynthLeadMask);
  // SynthLeadNoteColor[73].mask(SynthLeadMask);
  // SynthLeadNoteColor[74].mask(SynthLeadMask);
  // SynthLeadNoteColor[75].mask(SynthLeadMask);
  // SynthLeadNoteColor[76].mask(SynthLeadMask);
  // SynthLeadNoteColor[77].mask(SynthLeadMask);
  // SynthLeadNoteColor[78].mask(SynthLeadMask);
  // SynthLeadNoteColor[79].mask(SynthLeadMask);
  // SynthLeadNoteColor[80].mask(SynthLeadMask);
  // SynthLeadNoteColor[81].mask(SynthLeadMask);
  // SynthLeadNoteColor[82].mask(SynthLeadMask);
  // SynthLeadNoteColor[83].mask(SynthLeadMask);
  // SynthLeadNoteColor[84].mask(SynthLeadMask);
  // SynthLeadNoteColor[85].mask(SynthLeadMask);
  // SynthLeadNoteColor[86].mask(SynthLeadMask);
  // SynthLeadNoteColor[87].mask(SynthLeadMask);
  // SynthLeadNoteColor[88].mask(SynthLeadMask);
  // SynthLeadNoteColor[89].mask(SynthLeadMask);
  // SynthLeadNoteColor[90].mask(SynthLeadMask);
  // SynthLeadNoteColor[91].mask(SynthLeadMask);
  // SynthLeadNoteColor[92].mask(SynthLeadMask);
  // SynthLeadNoteColor[93].mask(SynthLeadMask);
  // SynthLeadNoteColor[94].mask(SynthLeadMask);
  // SynthLeadNoteColor[95].mask(SynthLeadMask);
  // SynthLeadNoteColor[96].mask(SynthLeadMask);
  // SynthLeadNoteColor[97].mask(SynthLeadMask);
  // SynthLeadNoteColor[98].mask(SynthLeadMask);
  // SynthLeadNoteColor[99].mask(SynthLeadMask);
  // SynthLeadNoteColor[100].mask(SynthLeadMask);
  // SynthLeadNoteColor[101].mask(SynthLeadMask);
  // SynthLeadNoteColor[102].mask(SynthLeadMask);
  // SynthLeadNoteColor[103].mask(SynthLeadMask);
  // SynthLeadNoteColor[104].mask(SynthLeadMask);
  // SynthLeadNoteColor[105].mask(SynthLeadMask);
  // SynthLeadNoteColor[106].mask(SynthLeadMask);
  // SynthLeadNoteColor[107].mask(SynthLeadMask);
  // SynthLeadNoteColor[108].mask(SynthLeadMask);
  // SynthLeadNoteColor[109].mask(SynthLeadMask);
  // SynthLeadNoteColor[110].mask(SynthLeadMask);
  // SynthLeadNoteColor[111].mask(SynthLeadMask);
  // SynthLeadNoteColor[112].mask(SynthLeadMask);
  // SynthLeadNoteColor[113].mask(SynthLeadMask);
  // SynthLeadNoteColor[114].mask(SynthLeadMask);
  // SynthLeadNoteColor[115].mask(SynthLeadMask);
  // SynthLeadNoteColor[116].mask(SynthLeadMask);
  // SynthLeadNoteColor[117].mask(SynthLeadMask);
  // SynthLeadNoteColor[118].mask(SynthLeadMask);
  // SynthLeadNoteColor[119].mask(SynthLeadMask);
  // SynthLeadNoteColor[120].mask(SynthLeadMask);
  // SynthLeadNoteColor[121].mask(SynthLeadMask);
  // SynthLeadNoteColor[122].mask(SynthLeadMask);
  // SynthLeadNoteColor[123].mask(SynthLeadMask);
  // SynthLeadNoteColor[124].mask(SynthLeadMask);
  // SynthLeadNoteColor[125].mask(SynthLeadMask);
  // SynthLeadNoteColor[126].mask(SynthLeadMask);
  // SynthLeadNoteColor[127].mask(SynthLeadMask);
  // //Synth Pad
  // SynthPadNoteColor[0].mask(SynthPadMask);
  // SynthPadNoteColor[1].mask(SynthPadMask);
  // SynthPadNoteColor[2].mask(SynthPadMask);
  // SynthPadNoteColor[3].mask(SynthPadMask);
  // SynthPadNoteColor[4].mask(SynthPadMask);
  // SynthPadNoteColor[5].mask(SynthPadMask);
  // SynthPadNoteColor[6].mask(SynthPadMask);
  // SynthPadNoteColor[7].mask(SynthPadMask);
  // SynthPadNoteColor[8].mask(SynthPadMask);
  // SynthPadNoteColor[9].mask(SynthPadMask);
  // SynthPadNoteColor[10].mask(SynthPadMask);
  // SynthPadNoteColor[11].mask(SynthPadMask);
  // SynthPadNoteColor[12].mask(SynthPadMask);
  // SynthPadNoteColor[13].mask(SynthPadMask);
  // SynthPadNoteColor[14].mask(SynthPadMask);
  // SynthPadNoteColor[15].mask(SynthPadMask);
  // SynthPadNoteColor[16].mask(SynthPadMask);
  // SynthPadNoteColor[17].mask(SynthPadMask);
  // SynthPadNoteColor[18].mask(SynthPadMask);
  // SynthPadNoteColor[19].mask(SynthPadMask);
  // SynthPadNoteColor[20].mask(SynthPadMask);
  // SynthPadNoteColor[21].mask(SynthPadMask);
  // SynthPadNoteColor[22].mask(SynthPadMask);
  // SynthPadNoteColor[23].mask(SynthPadMask);
  // SynthPadNoteColor[24].mask(SynthPadMask);
  // SynthPadNoteColor[25].mask(SynthPadMask);
  // SynthPadNoteColor[26].mask(SynthPadMask);
  // SynthPadNoteColor[27].mask(SynthPadMask);
  // SynthPadNoteColor[28].mask(SynthPadMask);
  // SynthPadNoteColor[29].mask(SynthPadMask);
  // SynthPadNoteColor[30].mask(SynthPadMask);
  // SynthPadNoteColor[31].mask(SynthPadMask);
  // SynthPadNoteColor[32].mask(SynthPadMask);
  // SynthPadNoteColor[33].mask(SynthPadMask);
  // SynthPadNoteColor[34].mask(SynthPadMask);
  // SynthPadNoteColor[35].mask(SynthPadMask);
  // SynthPadNoteColor[36].mask(SynthPadMask);
  // SynthPadNoteColor[37].mask(SynthPadMask);
  // SynthPadNoteColor[38].mask(SynthPadMask);
  // SynthPadNoteColor[39].mask(SynthPadMask);
  // SynthPadNoteColor[40].mask(SynthPadMask);
  // SynthPadNoteColor[41].mask(SynthPadMask);
  // SynthPadNoteColor[42].mask(SynthPadMask);
  // SynthPadNoteColor[43].mask(SynthPadMask);
  // SynthPadNoteColor[44].mask(SynthPadMask);
  // SynthPadNoteColor[45].mask(SynthPadMask);
  // SynthPadNoteColor[46].mask(SynthPadMask);
  // SynthPadNoteColor[47].mask(SynthPadMask);
  // SynthPadNoteColor[48].mask(SynthPadMask);
  // SynthPadNoteColor[49].mask(SynthPadMask);
  // SynthPadNoteColor[50].mask(SynthPadMask);
  // SynthPadNoteColor[51].mask(SynthPadMask);
  // SynthPadNoteColor[52].mask(SynthPadMask);
  // SynthPadNoteColor[53].mask(SynthPadMask);
  // SynthPadNoteColor[54].mask(SynthPadMask);
  // SynthPadNoteColor[55].mask(SynthPadMask);
  // SynthPadNoteColor[56].mask(SynthPadMask);
  // SynthPadNoteColor[57].mask(SynthPadMask);
  // SynthPadNoteColor[58].mask(SynthPadMask);
  // SynthPadNoteColor[59].mask(SynthPadMask);
  // SynthPadNoteColor[60].mask(SynthPadMask);
  // SynthPadNoteColor[61].mask(SynthPadMask);
  // SynthPadNoteColor[62].mask(SynthPadMask);
  // SynthPadNoteColor[63].mask(SynthPadMask);
  // SynthPadNoteColor[64].mask(SynthPadMask);
  // SynthPadNoteColor[65].mask(SynthPadMask);
  // SynthPadNoteColor[66].mask(SynthPadMask);
  // SynthPadNoteColor[67].mask(SynthPadMask);
  // SynthPadNoteColor[68].mask(SynthPadMask);
  // SynthPadNoteColor[69].mask(SynthPadMask);
  // SynthPadNoteColor[70].mask(SynthPadMask);
  // SynthPadNoteColor[71].mask(SynthPadMask);
  // SynthPadNoteColor[72].mask(SynthPadMask);
  // SynthPadNoteColor[73].mask(SynthPadMask);
  // SynthPadNoteColor[74].mask(SynthPadMask);
  // SynthPadNoteColor[75].mask(SynthPadMask);
  // SynthPadNoteColor[76].mask(SynthPadMask);
  // SynthPadNoteColor[77].mask(SynthPadMask);
  // SynthPadNoteColor[78].mask(SynthPadMask);
  // SynthPadNoteColor[79].mask(SynthPadMask);
  // SynthPadNoteColor[80].mask(SynthPadMask);
  // SynthPadNoteColor[81].mask(SynthPadMask);
  // SynthPadNoteColor[82].mask(SynthPadMask);
  // SynthPadNoteColor[83].mask(SynthPadMask);
  // SynthPadNoteColor[84].mask(SynthPadMask);
  // SynthPadNoteColor[85].mask(SynthPadMask);
  // SynthPadNoteColor[86].mask(SynthPadMask);
  // SynthPadNoteColor[87].mask(SynthPadMask);
  // SynthPadNoteColor[88].mask(SynthPadMask);
  // SynthPadNoteColor[89].mask(SynthPadMask);
  // SynthPadNoteColor[90].mask(SynthPadMask);
  // SynthPadNoteColor[91].mask(SynthPadMask);
  // SynthPadNoteColor[92].mask(SynthPadMask);
  // SynthPadNoteColor[93].mask(SynthPadMask);
  // SynthPadNoteColor[94].mask(SynthPadMask);
  // SynthPadNoteColor[95].mask(SynthPadMask);
  // SynthPadNoteColor[96].mask(SynthPadMask);
  // SynthPadNoteColor[97].mask(SynthPadMask);
  // SynthPadNoteColor[98].mask(SynthPadMask);
  // SynthPadNoteColor[99].mask(SynthPadMask);
  // SynthPadNoteColor[100].mask(SynthPadMask);
  // SynthPadNoteColor[101].mask(SynthPadMask);
  // SynthPadNoteColor[102].mask(SynthPadMask);
  // SynthPadNoteColor[103].mask(SynthPadMask);
  // SynthPadNoteColor[104].mask(SynthPadMask);
  // SynthPadNoteColor[105].mask(SynthPadMask);
  // SynthPadNoteColor[106].mask(SynthPadMask);
  // SynthPadNoteColor[107].mask(SynthPadMask);
  // SynthPadNoteColor[108].mask(SynthPadMask);
  // SynthPadNoteColor[109].mask(SynthPadMask);
  // SynthPadNoteColor[110].mask(SynthPadMask);
  // SynthPadNoteColor[111].mask(SynthPadMask);
  // SynthPadNoteColor[112].mask(SynthPadMask);
  // SynthPadNoteColor[113].mask(SynthPadMask);
  // SynthPadNoteColor[114].mask(SynthPadMask);
  // SynthPadNoteColor[115].mask(SynthPadMask);
  // SynthPadNoteColor[116].mask(SynthPadMask);
  // SynthPadNoteColor[117].mask(SynthPadMask);
  // SynthPadNoteColor[118].mask(SynthPadMask);
  // SynthPadNoteColor[119].mask(SynthPadMask);
  // SynthPadNoteColor[120].mask(SynthPadMask);
  // SynthPadNoteColor[121].mask(SynthPadMask);
  // SynthPadNoteColor[122].mask(SynthPadMask);
  // SynthPadNoteColor[123].mask(SynthPadMask);
  // SynthPadNoteColor[124].mask(SynthPadMask);
  // SynthPadNoteColor[125].mask(SynthPadMask);
  // SynthPadNoteColor[126].mask(SynthPadMask);
  // SynthPadNoteColor[127].mask(SynthPadMask);
  // //Synth Effects
  // SynthEffectsNoteColor[0].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[1].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[2].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[3].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[4].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[5].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[6].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[7].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[8].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[9].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[10].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[11].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[12].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[13].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[14].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[15].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[16].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[17].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[18].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[19].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[20].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[21].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[22].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[23].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[24].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[25].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[26].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[27].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[28].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[29].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[30].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[31].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[32].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[33].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[34].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[35].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[36].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[37].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[38].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[39].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[40].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[41].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[42].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[43].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[44].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[45].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[46].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[47].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[48].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[49].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[50].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[51].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[52].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[53].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[54].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[55].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[56].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[57].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[58].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[59].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[60].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[61].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[62].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[63].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[64].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[65].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[66].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[67].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[68].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[69].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[70].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[71].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[72].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[73].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[74].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[75].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[76].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[77].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[78].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[79].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[80].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[81].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[82].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[83].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[84].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[85].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[86].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[87].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[88].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[89].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[90].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[91].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[92].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[93].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[94].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[95].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[96].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[97].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[98].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[99].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[100].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[101].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[102].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[103].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[104].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[105].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[106].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[107].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[108].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[109].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[110].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[111].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[112].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[113].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[114].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[115].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[116].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[117].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[118].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[119].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[120].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[121].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[122].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[123].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[124].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[125].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[126].mask(SynthEffectsMask);
  // SynthEffectsNoteColor[127].mask(SynthEffectsMask);
  // //Ethnic
  // EthnicNoteColor[0].mask(EthnicMask);
  // EthnicNoteColor[1].mask(EthnicMask);
  // EthnicNoteColor[2].mask(EthnicMask);
  // EthnicNoteColor[3].mask(EthnicMask);
  // EthnicNoteColor[4].mask(EthnicMask);
  // EthnicNoteColor[5].mask(EthnicMask);
  // EthnicNoteColor[6].mask(EthnicMask);
  // EthnicNoteColor[7].mask(EthnicMask);
  // EthnicNoteColor[8].mask(EthnicMask);
  // EthnicNoteColor[9].mask(EthnicMask);
  // EthnicNoteColor[10].mask(EthnicMask);
  // EthnicNoteColor[11].mask(EthnicMask);
  // EthnicNoteColor[12].mask(EthnicMask);
  // EthnicNoteColor[13].mask(EthnicMask);
  // EthnicNoteColor[14].mask(EthnicMask);
  // EthnicNoteColor[15].mask(EthnicMask);
  // EthnicNoteColor[16].mask(EthnicMask);
  // EthnicNoteColor[17].mask(EthnicMask);
  // EthnicNoteColor[18].mask(EthnicMask);
  // EthnicNoteColor[19].mask(EthnicMask);
  // EthnicNoteColor[20].mask(EthnicMask);
  // EthnicNoteColor[21].mask(EthnicMask);
  // EthnicNoteColor[22].mask(EthnicMask);
  // EthnicNoteColor[23].mask(EthnicMask);
  // EthnicNoteColor[24].mask(EthnicMask);
  // EthnicNoteColor[25].mask(EthnicMask);
  // EthnicNoteColor[26].mask(EthnicMask);
  // EthnicNoteColor[27].mask(EthnicMask);
  // EthnicNoteColor[28].mask(EthnicMask);
  // EthnicNoteColor[29].mask(EthnicMask);
  // EthnicNoteColor[30].mask(EthnicMask);
  // EthnicNoteColor[31].mask(EthnicMask);
  // EthnicNoteColor[32].mask(EthnicMask);
  // EthnicNoteColor[33].mask(EthnicMask);
  // EthnicNoteColor[34].mask(EthnicMask);
  // EthnicNoteColor[35].mask(EthnicMask);
  // EthnicNoteColor[36].mask(EthnicMask);
  // EthnicNoteColor[37].mask(EthnicMask);
  // EthnicNoteColor[38].mask(EthnicMask);
  // EthnicNoteColor[39].mask(EthnicMask);
  // EthnicNoteColor[40].mask(EthnicMask);
  // EthnicNoteColor[41].mask(EthnicMask);
  // EthnicNoteColor[42].mask(EthnicMask);
  // EthnicNoteColor[43].mask(EthnicMask);
  // EthnicNoteColor[44].mask(EthnicMask);
  // EthnicNoteColor[45].mask(EthnicMask);
  // EthnicNoteColor[46].mask(EthnicMask);
  // EthnicNoteColor[47].mask(EthnicMask);
  // EthnicNoteColor[48].mask(EthnicMask);
  // EthnicNoteColor[49].mask(EthnicMask);
  // EthnicNoteColor[50].mask(EthnicMask);
  // EthnicNoteColor[51].mask(EthnicMask);
  // EthnicNoteColor[52].mask(EthnicMask);
  // EthnicNoteColor[53].mask(EthnicMask);
  // EthnicNoteColor[54].mask(EthnicMask);
  // EthnicNoteColor[55].mask(EthnicMask);
  // EthnicNoteColor[56].mask(EthnicMask);
  // EthnicNoteColor[57].mask(EthnicMask);
  // EthnicNoteColor[58].mask(EthnicMask);
  // EthnicNoteColor[59].mask(EthnicMask);
  // EthnicNoteColor[60].mask(EthnicMask);
  // EthnicNoteColor[61].mask(EthnicMask);
  // EthnicNoteColor[62].mask(EthnicMask);
  // EthnicNoteColor[63].mask(EthnicMask);
  // EthnicNoteColor[64].mask(EthnicMask);
  // EthnicNoteColor[65].mask(EthnicMask);
  // EthnicNoteColor[66].mask(EthnicMask);
  // EthnicNoteColor[67].mask(EthnicMask);
  // EthnicNoteColor[68].mask(EthnicMask);
  // EthnicNoteColor[69].mask(EthnicMask);
  // EthnicNoteColor[70].mask(EthnicMask);
  // EthnicNoteColor[71].mask(EthnicMask);
  // EthnicNoteColor[72].mask(EthnicMask);
  // EthnicNoteColor[73].mask(EthnicMask);
  // EthnicNoteColor[74].mask(EthnicMask);
  // EthnicNoteColor[75].mask(EthnicMask);
  // EthnicNoteColor[76].mask(EthnicMask);
  // EthnicNoteColor[77].mask(EthnicMask);
  // EthnicNoteColor[78].mask(EthnicMask);
  // EthnicNoteColor[79].mask(EthnicMask);
  // EthnicNoteColor[80].mask(EthnicMask);
  // EthnicNoteColor[81].mask(EthnicMask);
  // EthnicNoteColor[82].mask(EthnicMask);
  // EthnicNoteColor[83].mask(EthnicMask);
  // EthnicNoteColor[84].mask(EthnicMask);
  // EthnicNoteColor[85].mask(EthnicMask);
  // EthnicNoteColor[86].mask(EthnicMask);
  // EthnicNoteColor[87].mask(EthnicMask);
  // EthnicNoteColor[88].mask(EthnicMask);
  // EthnicNoteColor[89].mask(EthnicMask);
  // EthnicNoteColor[90].mask(EthnicMask);
  // EthnicNoteColor[91].mask(EthnicMask);
  // EthnicNoteColor[92].mask(EthnicMask);
  // EthnicNoteColor[93].mask(EthnicMask);
  // EthnicNoteColor[94].mask(EthnicMask);
  // EthnicNoteColor[95].mask(EthnicMask);
  // EthnicNoteColor[96].mask(EthnicMask);
  // EthnicNoteColor[97].mask(EthnicMask);
  // EthnicNoteColor[98].mask(EthnicMask);
  // EthnicNoteColor[99].mask(EthnicMask);
  // EthnicNoteColor[100].mask(EthnicMask);
  // EthnicNoteColor[101].mask(EthnicMask);
  // EthnicNoteColor[102].mask(EthnicMask);
  // EthnicNoteColor[103].mask(EthnicMask);
  // EthnicNoteColor[104].mask(EthnicMask);
  // EthnicNoteColor[105].mask(EthnicMask);
  // EthnicNoteColor[106].mask(EthnicMask);
  // EthnicNoteColor[107].mask(EthnicMask);
  // EthnicNoteColor[108].mask(EthnicMask);
  // EthnicNoteColor[109].mask(EthnicMask);
  // EthnicNoteColor[110].mask(EthnicMask);
  // EthnicNoteColor[111].mask(EthnicMask);
  // EthnicNoteColor[112].mask(EthnicMask);
  // EthnicNoteColor[113].mask(EthnicMask);
  // EthnicNoteColor[114].mask(EthnicMask);
  // EthnicNoteColor[115].mask(EthnicMask);
  // EthnicNoteColor[116].mask(EthnicMask);
  // EthnicNoteColor[117].mask(EthnicMask);
  // EthnicNoteColor[118].mask(EthnicMask);
  // EthnicNoteColor[119].mask(EthnicMask);
  // EthnicNoteColor[120].mask(EthnicMask);
  // EthnicNoteColor[121].mask(EthnicMask);
  // EthnicNoteColor[122].mask(EthnicMask);
  // EthnicNoteColor[123].mask(EthnicMask);
  // EthnicNoteColor[124].mask(EthnicMask);
  // EthnicNoteColor[125].mask(EthnicMask);
  // EthnicNoteColor[126].mask(EthnicMask);
  // EthnicNoteColor[127].mask(EthnicMask);
  // //Percussive
  // PercussiveNoteColor[0].mask(PercussiveMask);
  // PercussiveNoteColor[1].mask(PercussiveMask);
  // PercussiveNoteColor[2].mask(PercussiveMask);
  // PercussiveNoteColor[3].mask(PercussiveMask);
  // PercussiveNoteColor[4].mask(PercussiveMask);
  // PercussiveNoteColor[5].mask(PercussiveMask);
  // PercussiveNoteColor[6].mask(PercussiveMask);
  // PercussiveNoteColor[7].mask(PercussiveMask);
  // PercussiveNoteColor[8].mask(PercussiveMask);
  // PercussiveNoteColor[9].mask(PercussiveMask);
  // PercussiveNoteColor[10].mask(PercussiveMask);
  // PercussiveNoteColor[11].mask(PercussiveMask);
  // PercussiveNoteColor[12].mask(PercussiveMask);
  // PercussiveNoteColor[13].mask(PercussiveMask);
  // PercussiveNoteColor[14].mask(PercussiveMask);
  // PercussiveNoteColor[15].mask(PercussiveMask);
  // PercussiveNoteColor[16].mask(PercussiveMask);
  // PercussiveNoteColor[17].mask(PercussiveMask);
  // PercussiveNoteColor[18].mask(PercussiveMask);
  // PercussiveNoteColor[19].mask(PercussiveMask);
  // PercussiveNoteColor[20].mask(PercussiveMask);
  // PercussiveNoteColor[21].mask(PercussiveMask);
  // PercussiveNoteColor[22].mask(PercussiveMask);
  // PercussiveNoteColor[23].mask(PercussiveMask);
  // PercussiveNoteColor[24].mask(PercussiveMask);
  // PercussiveNoteColor[25].mask(PercussiveMask);
  // PercussiveNoteColor[26].mask(PercussiveMask);
  // PercussiveNoteColor[27].mask(PercussiveMask);
  // PercussiveNoteColor[28].mask(PercussiveMask);
  // PercussiveNoteColor[29].mask(PercussiveMask);
  // PercussiveNoteColor[30].mask(PercussiveMask);
  // PercussiveNoteColor[31].mask(PercussiveMask);
  // PercussiveNoteColor[32].mask(PercussiveMask);
  // PercussiveNoteColor[33].mask(PercussiveMask);
  // PercussiveNoteColor[34].mask(PercussiveMask);
  // PercussiveNoteColor[35].mask(PercussiveMask);
  // PercussiveNoteColor[36].mask(PercussiveMask);
  // PercussiveNoteColor[37].mask(PercussiveMask);
  // PercussiveNoteColor[38].mask(PercussiveMask);
  // PercussiveNoteColor[39].mask(PercussiveMask);
  // PercussiveNoteColor[40].mask(PercussiveMask);
  // PercussiveNoteColor[41].mask(PercussiveMask);
  // PercussiveNoteColor[42].mask(PercussiveMask);
  // PercussiveNoteColor[43].mask(PercussiveMask);
  // PercussiveNoteColor[44].mask(PercussiveMask);
  // PercussiveNoteColor[45].mask(PercussiveMask);
  // PercussiveNoteColor[46].mask(PercussiveMask);
  // PercussiveNoteColor[47].mask(PercussiveMask);
  // PercussiveNoteColor[48].mask(PercussiveMask);
  // PercussiveNoteColor[49].mask(PercussiveMask);
  // PercussiveNoteColor[50].mask(PercussiveMask);
  // PercussiveNoteColor[51].mask(PercussiveMask);
  // PercussiveNoteColor[52].mask(PercussiveMask);
  // PercussiveNoteColor[53].mask(PercussiveMask);
  // PercussiveNoteColor[54].mask(PercussiveMask);
  // PercussiveNoteColor[55].mask(PercussiveMask);
  // PercussiveNoteColor[56].mask(PercussiveMask);
  // PercussiveNoteColor[57].mask(PercussiveMask);
  // PercussiveNoteColor[58].mask(PercussiveMask);
  // PercussiveNoteColor[59].mask(PercussiveMask);
  // PercussiveNoteColor[60].mask(PercussiveMask);
  // PercussiveNoteColor[61].mask(PercussiveMask);
  // PercussiveNoteColor[62].mask(PercussiveMask);
  // PercussiveNoteColor[63].mask(PercussiveMask);
  // PercussiveNoteColor[64].mask(PercussiveMask);
  // PercussiveNoteColor[65].mask(PercussiveMask);
  // PercussiveNoteColor[66].mask(PercussiveMask);
  // PercussiveNoteColor[67].mask(PercussiveMask);
  // PercussiveNoteColor[68].mask(PercussiveMask);
  // PercussiveNoteColor[69].mask(PercussiveMask);
  // PercussiveNoteColor[70].mask(PercussiveMask);
  // PercussiveNoteColor[71].mask(PercussiveMask);
  // PercussiveNoteColor[72].mask(PercussiveMask);
  // PercussiveNoteColor[73].mask(PercussiveMask);
  // PercussiveNoteColor[74].mask(PercussiveMask);
  // PercussiveNoteColor[75].mask(PercussiveMask);
  // PercussiveNoteColor[76].mask(PercussiveMask);
  // PercussiveNoteColor[77].mask(PercussiveMask);
  // PercussiveNoteColor[78].mask(PercussiveMask);
  // PercussiveNoteColor[79].mask(PercussiveMask);
  // PercussiveNoteColor[80].mask(PercussiveMask);
  // PercussiveNoteColor[81].mask(PercussiveMask);
  // PercussiveNoteColor[82].mask(PercussiveMask);
  // PercussiveNoteColor[83].mask(PercussiveMask);
  // PercussiveNoteColor[84].mask(PercussiveMask);
  // PercussiveNoteColor[85].mask(PercussiveMask);
  // PercussiveNoteColor[86].mask(PercussiveMask);
  // PercussiveNoteColor[87].mask(PercussiveMask);
  // PercussiveNoteColor[88].mask(PercussiveMask);
  // PercussiveNoteColor[89].mask(PercussiveMask);
  // PercussiveNoteColor[90].mask(PercussiveMask);
  // PercussiveNoteColor[91].mask(PercussiveMask);
  // PercussiveNoteColor[92].mask(PercussiveMask);
  // PercussiveNoteColor[93].mask(PercussiveMask);
  // PercussiveNoteColor[94].mask(PercussiveMask);
  // PercussiveNoteColor[95].mask(PercussiveMask);
  // PercussiveNoteColor[96].mask(PercussiveMask);
  // PercussiveNoteColor[97].mask(PercussiveMask);
  // PercussiveNoteColor[98].mask(PercussiveMask);
  // PercussiveNoteColor[99].mask(PercussiveMask);
  // PercussiveNoteColor[100].mask(PercussiveMask);
  // PercussiveNoteColor[101].mask(PercussiveMask);
  // PercussiveNoteColor[102].mask(PercussiveMask);
  // PercussiveNoteColor[103].mask(PercussiveMask);
  // PercussiveNoteColor[104].mask(PercussiveMask);
  // PercussiveNoteColor[105].mask(PercussiveMask);
  // PercussiveNoteColor[106].mask(PercussiveMask);
  // PercussiveNoteColor[107].mask(PercussiveMask);
  // PercussiveNoteColor[108].mask(PercussiveMask);
  // PercussiveNoteColor[109].mask(PercussiveMask);
  // PercussiveNoteColor[110].mask(PercussiveMask);
  // PercussiveNoteColor[111].mask(PercussiveMask);
  // PercussiveNoteColor[112].mask(PercussiveMask);
  // PercussiveNoteColor[113].mask(PercussiveMask);
  // PercussiveNoteColor[114].mask(PercussiveMask);
  // PercussiveNoteColor[115].mask(PercussiveMask);
  // PercussiveNoteColor[116].mask(PercussiveMask);
  // PercussiveNoteColor[117].mask(PercussiveMask);
  // PercussiveNoteColor[118].mask(PercussiveMask);
  // PercussiveNoteColor[119].mask(PercussiveMask);
  // PercussiveNoteColor[120].mask(PercussiveMask);
  // PercussiveNoteColor[121].mask(PercussiveMask);
  // PercussiveNoteColor[122].mask(PercussiveMask);
  // PercussiveNoteColor[123].mask(PercussiveMask);
  // PercussiveNoteColor[124].mask(PercussiveMask);
  // PercussiveNoteColor[125].mask(PercussiveMask);
  // PercussiveNoteColor[126].mask(PercussiveMask);
  // PercussiveNoteColor[127].mask(PercussiveMask);
  // //Sound Effects
  // SoundEffectsNoteColor[0].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[1].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[2].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[3].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[4].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[5].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[6].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[7].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[8].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[9].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[10].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[11].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[12].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[13].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[14].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[15].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[16].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[17].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[18].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[19].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[20].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[21].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[22].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[23].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[24].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[25].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[26].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[27].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[28].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[29].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[30].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[31].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[32].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[33].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[34].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[35].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[36].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[37].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[38].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[39].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[40].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[41].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[42].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[43].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[44].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[45].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[46].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[47].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[48].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[49].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[50].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[51].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[52].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[53].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[54].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[55].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[56].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[57].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[58].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[59].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[60].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[61].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[62].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[63].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[64].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[65].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[66].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[67].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[68].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[69].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[70].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[71].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[72].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[73].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[74].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[75].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[76].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[77].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[78].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[79].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[80].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[81].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[82].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[83].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[84].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[85].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[86].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[87].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[88].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[89].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[90].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[91].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[92].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[93].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[94].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[95].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[96].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[97].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[98].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[99].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[100].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[101].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[102].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[103].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[104].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[105].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[106].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[107].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[108].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[109].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[110].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[111].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[112].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[113].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[114].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[115].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[116].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[117].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[118].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[119].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[120].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[121].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[122].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[123].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[124].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[125].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[126].mask(SoundEffectsMask);
  // SoundEffectsNoteColor[127].mask(SoundEffectsMask);
  // //Percussion
  // PercussionNoteColor[0].mask(PercussionMask);
  // PercussionNoteColor[1].mask(PercussionMask);
  // PercussionNoteColor[2].mask(PercussionMask);
  // PercussionNoteColor[3].mask(PercussionMask);
  // PercussionNoteColor[4].mask(PercussionMask);
  // PercussionNoteColor[5].mask(PercussionMask);
  // PercussionNoteColor[6].mask(PercussionMask);
  // PercussionNoteColor[7].mask(PercussionMask);
  // PercussionNoteColor[8].mask(PercussionMask);
  // PercussionNoteColor[9].mask(PercussionMask);
  // PercussionNoteColor[10].mask(PercussionMask);
  // PercussionNoteColor[11].mask(PercussionMask);
  // PercussionNoteColor[12].mask(PercussionMask);
  // PercussionNoteColor[13].mask(PercussionMask);
  // PercussionNoteColor[14].mask(PercussionMask);
  // PercussionNoteColor[15].mask(PercussionMask);
  // PercussionNoteColor[16].mask(PercussionMask);
  // PercussionNoteColor[17].mask(PercussionMask);
  // PercussionNoteColor[18].mask(PercussionMask);
  // PercussionNoteColor[19].mask(PercussionMask);
  // PercussionNoteColor[20].mask(PercussionMask);
  // PercussionNoteColor[21].mask(PercussionMask);
  // PercussionNoteColor[22].mask(PercussionMask);
  // PercussionNoteColor[23].mask(PercussionMask);
  // PercussionNoteColor[24].mask(PercussionMask);
  // PercussionNoteColor[25].mask(PercussionMask);
  // PercussionNoteColor[26].mask(PercussionMask);
  // PercussionNoteColor[27].mask(PercussionMask);
  // PercussionNoteColor[28].mask(PercussionMask);
  // PercussionNoteColor[29].mask(PercussionMask);
  // PercussionNoteColor[30].mask(PercussionMask);
  // PercussionNoteColor[31].mask(PercussionMask);
  // PercussionNoteColor[32].mask(PercussionMask);
  // PercussionNoteColor[33].mask(PercussionMask);
  // PercussionNoteColor[34].mask(PercussionMask);
  // PercussionNoteColor[35].mask(PercussionMask);
  // PercussionNoteColor[36].mask(PercussionMask);
  // PercussionNoteColor[37].mask(PercussionMask);
  // PercussionNoteColor[38].mask(PercussionMask);
  // PercussionNoteColor[39].mask(PercussionMask);
  // PercussionNoteColor[40].mask(PercussionMask);
  // PercussionNoteColor[41].mask(PercussionMask);
  // PercussionNoteColor[42].mask(PercussionMask);
  // PercussionNoteColor[43].mask(PercussionMask);
  // PercussionNoteColor[44].mask(PercussionMask);
  // PercussionNoteColor[45].mask(PercussionMask);
  // PercussionNoteColor[46].mask(PercussionMask);
  // PercussionNoteColor[47].mask(PercussionMask);
  // PercussionNoteColor[48].mask(PercussionMask);
  // PercussionNoteColor[49].mask(PercussionMask);
  // PercussionNoteColor[50].mask(PercussionMask);
  // PercussionNoteColor[51].mask(PercussionMask);
  // PercussionNoteColor[52].mask(PercussionMask);
  // PercussionNoteColor[53].mask(PercussionMask);
  // PercussionNoteColor[54].mask(PercussionMask);
  // PercussionNoteColor[55].mask(PercussionMask);
  // PercussionNoteColor[56].mask(PercussionMask);
  // PercussionNoteColor[57].mask(PercussionMask);
  // PercussionNoteColor[58].mask(PercussionMask);
  // PercussionNoteColor[59].mask(PercussionMask);
  // PercussionNoteColor[60].mask(PercussionMask);
  // PercussionNoteColor[61].mask(PercussionMask);
  // PercussionNoteColor[62].mask(PercussionMask);
  // PercussionNoteColor[63].mask(PercussionMask);
  // PercussionNoteColor[64].mask(PercussionMask);
  // PercussionNoteColor[65].mask(PercussionMask);
  // PercussionNoteColor[66].mask(PercussionMask);
  // PercussionNoteColor[67].mask(PercussionMask);
  // PercussionNoteColor[68].mask(PercussionMask);
  // PercussionNoteColor[69].mask(PercussionMask);
  // PercussionNoteColor[70].mask(PercussionMask);
  // PercussionNoteColor[71].mask(PercussionMask);
  // PercussionNoteColor[72].mask(PercussionMask);
  // PercussionNoteColor[73].mask(PercussionMask);
  // PercussionNoteColor[74].mask(PercussionMask);
  // PercussionNoteColor[75].mask(PercussionMask);
  // PercussionNoteColor[76].mask(PercussionMask);
  // PercussionNoteColor[77].mask(PercussionMask);
  // PercussionNoteColor[78].mask(PercussionMask);
  // PercussionNoteColor[79].mask(PercussionMask);
  // PercussionNoteColor[80].mask(PercussionMask);
  // PercussionNoteColor[81].mask(PercussionMask);
  // PercussionNoteColor[82].mask(PercussionMask);
  // PercussionNoteColor[83].mask(PercussionMask);
  // PercussionNoteColor[84].mask(PercussionMask);
  // PercussionNoteColor[85].mask(PercussionMask);
  // PercussionNoteColor[86].mask(PercussionMask);
  // PercussionNoteColor[87].mask(PercussionMask);
  // PercussionNoteColor[88].mask(PercussionMask);
  // PercussionNoteColor[89].mask(PercussionMask);
  // PercussionNoteColor[90].mask(PercussionMask);
  // PercussionNoteColor[91].mask(PercussionMask);
  // PercussionNoteColor[92].mask(PercussionMask);
  // PercussionNoteColor[93].mask(PercussionMask);
  // PercussionNoteColor[94].mask(PercussionMask);
  // PercussionNoteColor[95].mask(PercussionMask);
  // PercussionNoteColor[96].mask(PercussionMask);
  // PercussionNoteColor[97].mask(PercussionMask);
  // PercussionNoteColor[98].mask(PercussionMask);
  // PercussionNoteColor[99].mask(PercussionMask);
  // PercussionNoteColor[100].mask(PercussionMask);
  // PercussionNoteColor[101].mask(PercussionMask);
  // PercussionNoteColor[102].mask(PercussionMask);
  // PercussionNoteColor[103].mask(PercussionMask);
  // PercussionNoteColor[104].mask(PercussionMask);
  // PercussionNoteColor[105].mask(PercussionMask);
  // PercussionNoteColor[106].mask(PercussionMask);
  // PercussionNoteColor[107].mask(PercussionMask);
  // PercussionNoteColor[108].mask(PercussionMask);
  // PercussionNoteColor[109].mask(PercussionMask);
  // PercussionNoteColor[110].mask(PercussionMask);
  // PercussionNoteColor[111].mask(PercussionMask);
  // PercussionNoteColor[112].mask(PercussionMask);
  // PercussionNoteColor[113].mask(PercussionMask);
  // PercussionNoteColor[114].mask(PercussionMask);
  // PercussionNoteColor[115].mask(PercussionMask);
  // PercussionNoteColor[116].mask(PercussionMask);
  // PercussionNoteColor[117].mask(PercussionMask);
  // PercussionNoteColor[118].mask(PercussionMask);
  // PercussionNoteColor[119].mask(PercussionMask);
  // PercussionNoteColor[120].mask(PercussionMask);
  // PercussionNoteColor[121].mask(PercussionMask);
  // PercussionNoteColor[122].mask(PercussionMask);
  // PercussionNoteColor[123].mask(PercussionMask);
  // PercussionNoteColor[124].mask(PercussionMask);
  // PercussionNoteColor[125].mask(PercussionMask);
  // PercussionNoteColor[126].mask(PercussionMask);
  // PercussionNoteColor[127].mask(PercussionMask);
}


void PianoGFXDisplay(){//Piano
  if (ChannelIsActive[0] == true) {// Piano Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture             Texture Side         Display graphics
    if (PianoPitchIsActive[0]   == true) {pianogfx = new PianoGFX (PianoPitchX[0  ], PianoVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  PianoVelocityAlpha[0]  , PianoNoteColor[0]  , PianoNoteColorSide[0]  ); pianogfx.display();}
    if (PianoPitchIsActive[1]   == true) {pianogfx = new PianoGFX (PianoPitchX[1  ], PianoVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  PianoVelocityAlpha[1]  , PianoNoteColor[1]  , PianoNoteColorSide[1]  ); pianogfx.display();}
    if (PianoPitchIsActive[2]   == true) {pianogfx = new PianoGFX (PianoPitchX[2  ], PianoVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  PianoVelocityAlpha[2]  , PianoNoteColor[2]  , PianoNoteColorSide[2]  ); pianogfx.display();}
    if (PianoPitchIsActive[3]   == true) {pianogfx = new PianoGFX (PianoPitchX[3  ], PianoVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  PianoVelocityAlpha[3]  , PianoNoteColor[3]  , PianoNoteColorSide[3]  ); pianogfx.display();}
    if (PianoPitchIsActive[4]   == true) {pianogfx = new PianoGFX (PianoPitchX[4  ], PianoVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  PianoVelocityAlpha[4]  , PianoNoteColor[4]  , PianoNoteColorSide[4]  ); pianogfx.display();}
    if (PianoPitchIsActive[5]   == true) {pianogfx = new PianoGFX (PianoPitchX[5  ], PianoVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  PianoVelocityAlpha[5]  , PianoNoteColor[5]  , PianoNoteColorSide[5]  ); pianogfx.display();}
    if (PianoPitchIsActive[6]   == true) {pianogfx = new PianoGFX (PianoPitchX[6  ], PianoVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  PianoVelocityAlpha[6]  , PianoNoteColor[6]  , PianoNoteColorSide[6]  ); pianogfx.display();}
    if (PianoPitchIsActive[7]   == true) {pianogfx = new PianoGFX (PianoPitchX[7  ], PianoVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  PianoVelocityAlpha[7]  , PianoNoteColor[7]  , PianoNoteColorSide[7]  ); pianogfx.display();}
    if (PianoPitchIsActive[8]   == true) {pianogfx = new PianoGFX (PianoPitchX[8  ], PianoVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  PianoVelocityAlpha[8]  , PianoNoteColor[8]  , PianoNoteColorSide[8]  ); pianogfx.display();}
    if (PianoPitchIsActive[9]   == true) {pianogfx = new PianoGFX (PianoPitchX[9  ], PianoVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  PianoVelocityAlpha[9]  , PianoNoteColor[9]  , PianoNoteColorSide[9]  ); pianogfx.display();}
    if (PianoPitchIsActive[10]  == true) {pianogfx = new PianoGFX (PianoPitchX[10 ], PianoVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  PianoVelocityAlpha[10] , PianoNoteColor[10] , PianoNoteColorSide[10] ); pianogfx.display();}
    if (PianoPitchIsActive[11]  == true) {pianogfx = new PianoGFX (PianoPitchX[11 ], PianoVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  PianoVelocityAlpha[11] , PianoNoteColor[11] , PianoNoteColorSide[11] ); pianogfx.display();}
    if (PianoPitchIsActive[12]  == true) {pianogfx = new PianoGFX (PianoPitchX[12 ], PianoVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  PianoVelocityAlpha[12] , PianoNoteColor[12] , PianoNoteColorSide[12] ); pianogfx.display();}
    if (PianoPitchIsActive[13]  == true) {pianogfx = new PianoGFX (PianoPitchX[13 ], PianoVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  PianoVelocityAlpha[13] , PianoNoteColor[13] , PianoNoteColorSide[13] ); pianogfx.display();}
    if (PianoPitchIsActive[14]  == true) {pianogfx = new PianoGFX (PianoPitchX[14 ], PianoVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  PianoVelocityAlpha[14] , PianoNoteColor[14] , PianoNoteColorSide[14] ); pianogfx.display();}
    if (PianoPitchIsActive[15]  == true) {pianogfx = new PianoGFX (PianoPitchX[15 ], PianoVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  PianoVelocityAlpha[15] , PianoNoteColor[15] , PianoNoteColorSide[15] ); pianogfx.display();}
    if (PianoPitchIsActive[16]  == true) {pianogfx = new PianoGFX (PianoPitchX[16 ], PianoVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  PianoVelocityAlpha[16] , PianoNoteColor[16] , PianoNoteColorSide[16] ); pianogfx.display();}
    if (PianoPitchIsActive[17]  == true) {pianogfx = new PianoGFX (PianoPitchX[17 ], PianoVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  PianoVelocityAlpha[17] , PianoNoteColor[17] , PianoNoteColorSide[17] ); pianogfx.display();}
    if (PianoPitchIsActive[18]  == true) {pianogfx = new PianoGFX (PianoPitchX[18 ], PianoVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  PianoVelocityAlpha[18] , PianoNoteColor[18] , PianoNoteColorSide[18] ); pianogfx.display();}
    if (PianoPitchIsActive[19]  == true) {pianogfx = new PianoGFX (PianoPitchX[19 ], PianoVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  PianoVelocityAlpha[19] , PianoNoteColor[19] , PianoNoteColorSide[19] ); pianogfx.display();}
    if (PianoPitchIsActive[20]  == true) {pianogfx = new PianoGFX (PianoPitchX[20 ], PianoVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  PianoVelocityAlpha[20] , PianoNoteColor[20] , PianoNoteColorSide[20] ); pianogfx.display();}
    if (PianoPitchIsActive[21]  == true) {pianogfx = new PianoGFX (PianoPitchX[21 ], PianoVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  PianoVelocityAlpha[21] , PianoNoteColor[21] , PianoNoteColorSide[21] ); pianogfx.display();}
    if (PianoPitchIsActive[22]  == true) {pianogfx = new PianoGFX (PianoPitchX[22 ], PianoVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  PianoVelocityAlpha[22] , PianoNoteColor[22] , PianoNoteColorSide[22] ); pianogfx.display();}
    if (PianoPitchIsActive[23]  == true) {pianogfx = new PianoGFX (PianoPitchX[23 ], PianoVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  PianoVelocityAlpha[23] , PianoNoteColor[23] , PianoNoteColorSide[23] ); pianogfx.display();}
    if (PianoPitchIsActive[24]  == true) {pianogfx = new PianoGFX (PianoPitchX[24 ], PianoVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  PianoVelocityAlpha[24] , PianoNoteColor[24] , PianoNoteColorSide[24] ); pianogfx.display();}
    if (PianoPitchIsActive[25]  == true) {pianogfx = new PianoGFX (PianoPitchX[25 ], PianoVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  PianoVelocityAlpha[25] , PianoNoteColor[25] , PianoNoteColorSide[25] ); pianogfx.display();}
    if (PianoPitchIsActive[26]  == true) {pianogfx = new PianoGFX (PianoPitchX[26 ], PianoVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  PianoVelocityAlpha[26] , PianoNoteColor[26] , PianoNoteColorSide[26] ); pianogfx.display();}
    if (PianoPitchIsActive[27]  == true) {pianogfx = new PianoGFX (PianoPitchX[27 ], PianoVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  PianoVelocityAlpha[27] , PianoNoteColor[27] , PianoNoteColorSide[27] ); pianogfx.display();}
    if (PianoPitchIsActive[28]  == true) {pianogfx = new PianoGFX (PianoPitchX[28 ], PianoVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  PianoVelocityAlpha[28] , PianoNoteColor[28] , PianoNoteColorSide[28] ); pianogfx.display();}
    if (PianoPitchIsActive[29]  == true) {pianogfx = new PianoGFX (PianoPitchX[29 ], PianoVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  PianoVelocityAlpha[29] , PianoNoteColor[29] , PianoNoteColorSide[29] ); pianogfx.display();}
    if (PianoPitchIsActive[30]  == true) {pianogfx = new PianoGFX (PianoPitchX[30 ], PianoVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  PianoVelocityAlpha[30] , PianoNoteColor[30] , PianoNoteColorSide[30] ); pianogfx.display();}
    if (PianoPitchIsActive[31]  == true) {pianogfx = new PianoGFX (PianoPitchX[31 ], PianoVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  PianoVelocityAlpha[31] , PianoNoteColor[31] , PianoNoteColorSide[31] ); pianogfx.display();}
    if (PianoPitchIsActive[32]  == true) {pianogfx = new PianoGFX (PianoPitchX[32 ], PianoVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  PianoVelocityAlpha[32] , PianoNoteColor[32] , PianoNoteColorSide[32] ); pianogfx.display();}
    if (PianoPitchIsActive[33]  == true) {pianogfx = new PianoGFX (PianoPitchX[33 ], PianoVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  PianoVelocityAlpha[33] , PianoNoteColor[33] , PianoNoteColorSide[33] ); pianogfx.display();}
    if (PianoPitchIsActive[34]  == true) {pianogfx = new PianoGFX (PianoPitchX[34 ], PianoVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  PianoVelocityAlpha[34] , PianoNoteColor[34] , PianoNoteColorSide[34] ); pianogfx.display();}
    if (PianoPitchIsActive[35]  == true) {pianogfx = new PianoGFX (PianoPitchX[35 ], PianoVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  PianoVelocityAlpha[35] , PianoNoteColor[35] , PianoNoteColorSide[35] ); pianogfx.display();}
    if (PianoPitchIsActive[36]  == true) {pianogfx = new PianoGFX (PianoPitchX[36 ], PianoVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  PianoVelocityAlpha[36] , PianoNoteColor[36] , PianoNoteColorSide[36] ); pianogfx.display();}
    if (PianoPitchIsActive[37]  == true) {pianogfx = new PianoGFX (PianoPitchX[37 ], PianoVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  PianoVelocityAlpha[37] , PianoNoteColor[37] , PianoNoteColorSide[37] ); pianogfx.display();}
    if (PianoPitchIsActive[38]  == true) {pianogfx = new PianoGFX (PianoPitchX[38 ], PianoVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  PianoVelocityAlpha[38] , PianoNoteColor[38] , PianoNoteColorSide[38] ); pianogfx.display();}
    if (PianoPitchIsActive[39]  == true) {pianogfx = new PianoGFX (PianoPitchX[39 ], PianoVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  PianoVelocityAlpha[39] , PianoNoteColor[39] , PianoNoteColorSide[39] ); pianogfx.display();}
    if (PianoPitchIsActive[40]  == true) {pianogfx = new PianoGFX (PianoPitchX[40 ], PianoVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  PianoVelocityAlpha[40] , PianoNoteColor[40] , PianoNoteColorSide[40] ); pianogfx.display();}
    if (PianoPitchIsActive[41]  == true) {pianogfx = new PianoGFX (PianoPitchX[41 ], PianoVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  PianoVelocityAlpha[41] , PianoNoteColor[41] , PianoNoteColorSide[41] ); pianogfx.display();}
    if (PianoPitchIsActive[42]  == true) {pianogfx = new PianoGFX (PianoPitchX[42 ], PianoVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  PianoVelocityAlpha[42] , PianoNoteColor[42] , PianoNoteColorSide[42] ); pianogfx.display();}
    if (PianoPitchIsActive[43]  == true) {pianogfx = new PianoGFX (PianoPitchX[43 ], PianoVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  PianoVelocityAlpha[43] , PianoNoteColor[43] , PianoNoteColorSide[43] ); pianogfx.display();}
    if (PianoPitchIsActive[44]  == true) {pianogfx = new PianoGFX (PianoPitchX[44 ], PianoVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  PianoVelocityAlpha[44] , PianoNoteColor[44] , PianoNoteColorSide[44] ); pianogfx.display();}
    if (PianoPitchIsActive[45]  == true) {pianogfx = new PianoGFX (PianoPitchX[45 ], PianoVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  PianoVelocityAlpha[45] , PianoNoteColor[45] , PianoNoteColorSide[45] ); pianogfx.display();}
    if (PianoPitchIsActive[46]  == true) {pianogfx = new PianoGFX (PianoPitchX[46 ], PianoVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  PianoVelocityAlpha[46] , PianoNoteColor[46] , PianoNoteColorSide[46] ); pianogfx.display();}
    if (PianoPitchIsActive[47]  == true) {pianogfx = new PianoGFX (PianoPitchX[47 ], PianoVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  PianoVelocityAlpha[47] , PianoNoteColor[47] , PianoNoteColorSide[47] ); pianogfx.display();}
    if (PianoPitchIsActive[48]  == true) {pianogfx = new PianoGFX (PianoPitchX[48 ], PianoVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  PianoVelocityAlpha[48] , PianoNoteColor[48] , PianoNoteColorSide[48] ); pianogfx.display();}
    if (PianoPitchIsActive[49]  == true) {pianogfx = new PianoGFX (PianoPitchX[49 ], PianoVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  PianoVelocityAlpha[49] , PianoNoteColor[49] , PianoNoteColorSide[49] ); pianogfx.display();}
    if (PianoPitchIsActive[50]  == true) {pianogfx = new PianoGFX (PianoPitchX[50 ], PianoVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  PianoVelocityAlpha[50] , PianoNoteColor[50] , PianoNoteColorSide[50] ); pianogfx.display();}
    if (PianoPitchIsActive[51]  == true) {pianogfx = new PianoGFX (PianoPitchX[51 ], PianoVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  PianoVelocityAlpha[51] , PianoNoteColor[51] , PianoNoteColorSide[51] ); pianogfx.display();}
    if (PianoPitchIsActive[52]  == true) {pianogfx = new PianoGFX (PianoPitchX[52 ], PianoVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  PianoVelocityAlpha[52] , PianoNoteColor[52] , PianoNoteColorSide[52] ); pianogfx.display();}
    if (PianoPitchIsActive[53]  == true) {pianogfx = new PianoGFX (PianoPitchX[53 ], PianoVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  PianoVelocityAlpha[53] , PianoNoteColor[53] , PianoNoteColorSide[53] ); pianogfx.display();}
    if (PianoPitchIsActive[54]  == true) {pianogfx = new PianoGFX (PianoPitchX[54 ], PianoVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  PianoVelocityAlpha[54] , PianoNoteColor[54] , PianoNoteColorSide[54] ); pianogfx.display();}
    if (PianoPitchIsActive[55]  == true) {pianogfx = new PianoGFX (PianoPitchX[55 ], PianoVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  PianoVelocityAlpha[55] , PianoNoteColor[55] , PianoNoteColorSide[55] ); pianogfx.display();}
    if (PianoPitchIsActive[56]  == true) {pianogfx = new PianoGFX (PianoPitchX[56 ], PianoVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  PianoVelocityAlpha[56] , PianoNoteColor[56] , PianoNoteColorSide[56] ); pianogfx.display();}
    if (PianoPitchIsActive[57]  == true) {pianogfx = new PianoGFX (PianoPitchX[57 ], PianoVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  PianoVelocityAlpha[57] , PianoNoteColor[57] , PianoNoteColorSide[57] ); pianogfx.display();}
    if (PianoPitchIsActive[58]  == true) {pianogfx = new PianoGFX (PianoPitchX[58 ], PianoVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  PianoVelocityAlpha[58] , PianoNoteColor[58] , PianoNoteColorSide[58] ); pianogfx.display();}
    if (PianoPitchIsActive[59]  == true) {pianogfx = new PianoGFX (PianoPitchX[59 ], PianoVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  PianoVelocityAlpha[59] , PianoNoteColor[59] , PianoNoteColorSide[59] ); pianogfx.display();}
    if (PianoPitchIsActive[60]  == true) {pianogfx = new PianoGFX (PianoPitchX[60 ], PianoVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  PianoVelocityAlpha[60] , PianoNoteColor[60] , PianoNoteColorSide[60] ); pianogfx.display();}
    if (PianoPitchIsActive[61]  == true) {pianogfx = new PianoGFX (PianoPitchX[61 ], PianoVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  PianoVelocityAlpha[61] , PianoNoteColor[61] , PianoNoteColorSide[61] ); pianogfx.display();}
    if (PianoPitchIsActive[62]  == true) {pianogfx = new PianoGFX (PianoPitchX[62 ], PianoVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  PianoVelocityAlpha[62] , PianoNoteColor[62] , PianoNoteColorSide[62] ); pianogfx.display();}
    if (PianoPitchIsActive[63]  == true) {pianogfx = new PianoGFX (PianoPitchX[63 ], PianoVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  PianoVelocityAlpha[63] , PianoNoteColor[63] , PianoNoteColorSide[63] ); pianogfx.display();}
    if (PianoPitchIsActive[64]  == true) {pianogfx = new PianoGFX (PianoPitchX[64 ], PianoVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  PianoVelocityAlpha[64] , PianoNoteColor[64] , PianoNoteColorSide[64] ); pianogfx.display();}
    if (PianoPitchIsActive[65]  == true) {pianogfx = new PianoGFX (PianoPitchX[65 ], PianoVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  PianoVelocityAlpha[65] , PianoNoteColor[65] , PianoNoteColorSide[65] ); pianogfx.display();}
    if (PianoPitchIsActive[66]  == true) {pianogfx = new PianoGFX (PianoPitchX[66 ], PianoVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  PianoVelocityAlpha[66] , PianoNoteColor[66] , PianoNoteColorSide[66] ); pianogfx.display();}
    if (PianoPitchIsActive[67]  == true) {pianogfx = new PianoGFX (PianoPitchX[67 ], PianoVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  PianoVelocityAlpha[67] , PianoNoteColor[67] , PianoNoteColorSide[67] ); pianogfx.display();}
    if (PianoPitchIsActive[68]  == true) {pianogfx = new PianoGFX (PianoPitchX[68 ], PianoVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  PianoVelocityAlpha[68] , PianoNoteColor[68] , PianoNoteColorSide[68] ); pianogfx.display();}
    if (PianoPitchIsActive[69]  == true) {pianogfx = new PianoGFX (PianoPitchX[69 ], PianoVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  PianoVelocityAlpha[69] , PianoNoteColor[69] , PianoNoteColorSide[69] ); pianogfx.display();}
    if (PianoPitchIsActive[70]  == true) {pianogfx = new PianoGFX (PianoPitchX[70 ], PianoVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  PianoVelocityAlpha[70] , PianoNoteColor[70] , PianoNoteColorSide[70] ); pianogfx.display();}
    if (PianoPitchIsActive[71]  == true) {pianogfx = new PianoGFX (PianoPitchX[71 ], PianoVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  PianoVelocityAlpha[71] , PianoNoteColor[71] , PianoNoteColorSide[71] ); pianogfx.display();}
    if (PianoPitchIsActive[72]  == true) {pianogfx = new PianoGFX (PianoPitchX[72 ], PianoVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  PianoVelocityAlpha[72] , PianoNoteColor[72] , PianoNoteColorSide[72] ); pianogfx.display();}
    if (PianoPitchIsActive[73]  == true) {pianogfx = new PianoGFX (PianoPitchX[73 ], PianoVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  PianoVelocityAlpha[73] , PianoNoteColor[73] , PianoNoteColorSide[73] ); pianogfx.display();}
    if (PianoPitchIsActive[74]  == true) {pianogfx = new PianoGFX (PianoPitchX[74 ], PianoVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  PianoVelocityAlpha[74] , PianoNoteColor[74] , PianoNoteColorSide[74] ); pianogfx.display();}
    if (PianoPitchIsActive[75]  == true) {pianogfx = new PianoGFX (PianoPitchX[75 ], PianoVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  PianoVelocityAlpha[75] , PianoNoteColor[75] , PianoNoteColorSide[75] ); pianogfx.display();}
    if (PianoPitchIsActive[76]  == true) {pianogfx = new PianoGFX (PianoPitchX[76 ], PianoVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  PianoVelocityAlpha[76] , PianoNoteColor[76] , PianoNoteColorSide[76] ); pianogfx.display();}
    if (PianoPitchIsActive[77]  == true) {pianogfx = new PianoGFX (PianoPitchX[77 ], PianoVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  PianoVelocityAlpha[77] , PianoNoteColor[77] , PianoNoteColorSide[77] ); pianogfx.display();}
    if (PianoPitchIsActive[78]  == true) {pianogfx = new PianoGFX (PianoPitchX[78 ], PianoVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  PianoVelocityAlpha[78] , PianoNoteColor[78] , PianoNoteColorSide[78] ); pianogfx.display();}
    if (PianoPitchIsActive[79]  == true) {pianogfx = new PianoGFX (PianoPitchX[79 ], PianoVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  PianoVelocityAlpha[79] , PianoNoteColor[79] , PianoNoteColorSide[79] ); pianogfx.display();}
    if (PianoPitchIsActive[80]  == true) {pianogfx = new PianoGFX (PianoPitchX[80 ], PianoVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  PianoVelocityAlpha[80] , PianoNoteColor[80] , PianoNoteColorSide[80] ); pianogfx.display();}
    if (PianoPitchIsActive[81]  == true) {pianogfx = new PianoGFX (PianoPitchX[81 ], PianoVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  PianoVelocityAlpha[81] , PianoNoteColor[81] , PianoNoteColorSide[81] ); pianogfx.display();}
    if (PianoPitchIsActive[82]  == true) {pianogfx = new PianoGFX (PianoPitchX[82 ], PianoVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  PianoVelocityAlpha[82] , PianoNoteColor[82] , PianoNoteColorSide[82] ); pianogfx.display();}
    if (PianoPitchIsActive[83]  == true) {pianogfx = new PianoGFX (PianoPitchX[83 ], PianoVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  PianoVelocityAlpha[83] , PianoNoteColor[83] , PianoNoteColorSide[83] ); pianogfx.display();}
    if (PianoPitchIsActive[84]  == true) {pianogfx = new PianoGFX (PianoPitchX[84 ], PianoVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  PianoVelocityAlpha[84] , PianoNoteColor[84] , PianoNoteColorSide[84] ); pianogfx.display();}
    if (PianoPitchIsActive[85]  == true) {pianogfx = new PianoGFX (PianoPitchX[85 ], PianoVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  PianoVelocityAlpha[85] , PianoNoteColor[85] , PianoNoteColorSide[85] ); pianogfx.display();}
    if (PianoPitchIsActive[86]  == true) {pianogfx = new PianoGFX (PianoPitchX[86 ], PianoVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  PianoVelocityAlpha[86] , PianoNoteColor[86] , PianoNoteColorSide[86] ); pianogfx.display();}
    if (PianoPitchIsActive[87]  == true) {pianogfx = new PianoGFX (PianoPitchX[87 ], PianoVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  PianoVelocityAlpha[87] , PianoNoteColor[87] , PianoNoteColorSide[87] ); pianogfx.display();}
    if (PianoPitchIsActive[88]  == true) {pianogfx = new PianoGFX (PianoPitchX[88 ], PianoVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  PianoVelocityAlpha[88] , PianoNoteColor[88] , PianoNoteColorSide[88] ); pianogfx.display();}
    if (PianoPitchIsActive[89]  == true) {pianogfx = new PianoGFX (PianoPitchX[89 ], PianoVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  PianoVelocityAlpha[89] , PianoNoteColor[89] , PianoNoteColorSide[89] ); pianogfx.display();}
    if (PianoPitchIsActive[90]  == true) {pianogfx = new PianoGFX (PianoPitchX[90 ], PianoVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  PianoVelocityAlpha[90] , PianoNoteColor[90] , PianoNoteColorSide[90] ); pianogfx.display();}
    if (PianoPitchIsActive[91]  == true) {pianogfx = new PianoGFX (PianoPitchX[91 ], PianoVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  PianoVelocityAlpha[91] , PianoNoteColor[91] , PianoNoteColorSide[91] ); pianogfx.display();}
    if (PianoPitchIsActive[92]  == true) {pianogfx = new PianoGFX (PianoPitchX[92 ], PianoVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  PianoVelocityAlpha[92] , PianoNoteColor[92] , PianoNoteColorSide[92] ); pianogfx.display();}
    if (PianoPitchIsActive[93]  == true) {pianogfx = new PianoGFX (PianoPitchX[93 ], PianoVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  PianoVelocityAlpha[93] , PianoNoteColor[93] , PianoNoteColorSide[93] ); pianogfx.display();}
    if (PianoPitchIsActive[94]  == true) {pianogfx = new PianoGFX (PianoPitchX[94 ], PianoVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  PianoVelocityAlpha[94] , PianoNoteColor[94] , PianoNoteColorSide[94] ); pianogfx.display();}
    if (PianoPitchIsActive[95]  == true) {pianogfx = new PianoGFX (PianoPitchX[95 ], PianoVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  PianoVelocityAlpha[95] , PianoNoteColor[95] , PianoNoteColorSide[95] ); pianogfx.display();}
    if (PianoPitchIsActive[96]  == true) {pianogfx = new PianoGFX (PianoPitchX[96 ], PianoVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  PianoVelocityAlpha[96] , PianoNoteColor[96] , PianoNoteColorSide[96] ); pianogfx.display();}
    if (PianoPitchIsActive[97]  == true) {pianogfx = new PianoGFX (PianoPitchX[97 ], PianoVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  PianoVelocityAlpha[97] , PianoNoteColor[97] , PianoNoteColorSide[97] ); pianogfx.display();}
    if (PianoPitchIsActive[98]  == true) {pianogfx = new PianoGFX (PianoPitchX[98 ], PianoVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  PianoVelocityAlpha[98] , PianoNoteColor[98] , PianoNoteColorSide[98] ); pianogfx.display();}
    if (PianoPitchIsActive[99]  == true) {pianogfx = new PianoGFX (PianoPitchX[99 ], PianoVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  PianoVelocityAlpha[99] , PianoNoteColor[99] , PianoNoteColorSide[99] ); pianogfx.display();}
    if (PianoPitchIsActive[100] == true) {pianogfx = new PianoGFX (PianoPitchX[100], PianoVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  PianoVelocityAlpha[100], PianoNoteColor[100], PianoNoteColorSide[100]); pianogfx.display();}
    if (PianoPitchIsActive[101] == true) {pianogfx = new PianoGFX (PianoPitchX[101], PianoVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  PianoVelocityAlpha[101], PianoNoteColor[101], PianoNoteColorSide[101]); pianogfx.display();}
    if (PianoPitchIsActive[102] == true) {pianogfx = new PianoGFX (PianoPitchX[102], PianoVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  PianoVelocityAlpha[102], PianoNoteColor[102], PianoNoteColorSide[102]); pianogfx.display();}
    if (PianoPitchIsActive[103] == true) {pianogfx = new PianoGFX (PianoPitchX[103], PianoVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  PianoVelocityAlpha[103], PianoNoteColor[103], PianoNoteColorSide[103]); pianogfx.display();}
    if (PianoPitchIsActive[104] == true) {pianogfx = new PianoGFX (PianoPitchX[104], PianoVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  PianoVelocityAlpha[104], PianoNoteColor[104], PianoNoteColorSide[104]); pianogfx.display();}
    if (PianoPitchIsActive[105] == true) {pianogfx = new PianoGFX (PianoPitchX[105], PianoVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  PianoVelocityAlpha[105], PianoNoteColor[105], PianoNoteColorSide[105]); pianogfx.display();}
    if (PianoPitchIsActive[106] == true) {pianogfx = new PianoGFX (PianoPitchX[106], PianoVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  PianoVelocityAlpha[106], PianoNoteColor[106], PianoNoteColorSide[106]); pianogfx.display();}
    if (PianoPitchIsActive[107] == true) {pianogfx = new PianoGFX (PianoPitchX[107], PianoVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  PianoVelocityAlpha[107], PianoNoteColor[107], PianoNoteColorSide[107]); pianogfx.display();}
    if (PianoPitchIsActive[108] == true) {pianogfx = new PianoGFX (PianoPitchX[108], PianoVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  PianoVelocityAlpha[108], PianoNoteColor[108], PianoNoteColorSide[108]); pianogfx.display();}
    if (PianoPitchIsActive[109] == true) {pianogfx = new PianoGFX (PianoPitchX[109], PianoVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  PianoVelocityAlpha[109], PianoNoteColor[109], PianoNoteColorSide[109]); pianogfx.display();}
    if (PianoPitchIsActive[110] == true) {pianogfx = new PianoGFX (PianoPitchX[110], PianoVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  PianoVelocityAlpha[110], PianoNoteColor[110], PianoNoteColorSide[110]); pianogfx.display();}
    if (PianoPitchIsActive[111] == true) {pianogfx = new PianoGFX (PianoPitchX[111], PianoVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  PianoVelocityAlpha[111], PianoNoteColor[111], PianoNoteColorSide[111]); pianogfx.display();}
    if (PianoPitchIsActive[112] == true) {pianogfx = new PianoGFX (PianoPitchX[112], PianoVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  PianoVelocityAlpha[112], PianoNoteColor[112], PianoNoteColorSide[112]); pianogfx.display();}
    if (PianoPitchIsActive[113] == true) {pianogfx = new PianoGFX (PianoPitchX[113], PianoVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  PianoVelocityAlpha[113], PianoNoteColor[113], PianoNoteColorSide[113]); pianogfx.display();}
    if (PianoPitchIsActive[114] == true) {pianogfx = new PianoGFX (PianoPitchX[114], PianoVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  PianoVelocityAlpha[114], PianoNoteColor[114], PianoNoteColorSide[114]); pianogfx.display();}
    if (PianoPitchIsActive[115] == true) {pianogfx = new PianoGFX (PianoPitchX[115], PianoVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  PianoVelocityAlpha[115], PianoNoteColor[115], PianoNoteColorSide[115]); pianogfx.display();}
    if (PianoPitchIsActive[116] == true) {pianogfx = new PianoGFX (PianoPitchX[116], PianoVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  PianoVelocityAlpha[116], PianoNoteColor[116], PianoNoteColorSide[116]); pianogfx.display();}
    if (PianoPitchIsActive[117] == true) {pianogfx = new PianoGFX (PianoPitchX[117], PianoVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  PianoVelocityAlpha[117], PianoNoteColor[117], PianoNoteColorSide[117]); pianogfx.display();}
    if (PianoPitchIsActive[118] == true) {pianogfx = new PianoGFX (PianoPitchX[118], PianoVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  PianoVelocityAlpha[118], PianoNoteColor[118], PianoNoteColorSide[118]); pianogfx.display();}
    if (PianoPitchIsActive[119] == true) {pianogfx = new PianoGFX (PianoPitchX[119], PianoVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  PianoVelocityAlpha[119], PianoNoteColor[119], PianoNoteColorSide[119]); pianogfx.display();}
    if (PianoPitchIsActive[120] == true) {pianogfx = new PianoGFX (PianoPitchX[120], PianoVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], PianoVelocityAlpha[120], PianoNoteColor[120], PianoNoteColorSide[120]); pianogfx.display();}
    if (PianoPitchIsActive[121] == true) {pianogfx = new PianoGFX (PianoPitchX[121], PianoVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], PianoVelocityAlpha[121], PianoNoteColor[121], PianoNoteColorSide[121]); pianogfx.display();}
    if (PianoPitchIsActive[122] == true) {pianogfx = new PianoGFX (PianoPitchX[122], PianoVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], PianoVelocityAlpha[122], PianoNoteColor[122], PianoNoteColorSide[122]); pianogfx.display();}
    if (PianoPitchIsActive[123] == true) {pianogfx = new PianoGFX (PianoPitchX[123], PianoVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], PianoVelocityAlpha[123], PianoNoteColor[123], PianoNoteColorSide[123]); pianogfx.display();}
    if (PianoPitchIsActive[124] == true) {pianogfx = new PianoGFX (PianoPitchX[124], PianoVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], PianoVelocityAlpha[124], PianoNoteColor[124], PianoNoteColorSide[124]); pianogfx.display();}
    if (PianoPitchIsActive[125] == true) {pianogfx = new PianoGFX (PianoPitchX[125], PianoVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], PianoVelocityAlpha[125], PianoNoteColor[125], PianoNoteColorSide[125]); pianogfx.display();}
    if (PianoPitchIsActive[126] == true) {pianogfx = new PianoGFX (PianoPitchX[126], PianoVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], PianoVelocityAlpha[126], PianoNoteColor[126], PianoNoteColorSide[126]); pianogfx.display();}
    if (PianoPitchIsActive[127] == true) {pianogfx = new PianoGFX (PianoPitchX[127], PianoVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], PianoVelocityAlpha[127], PianoNoteColor[127], PianoNoteColorSide[127]); pianogfx.display();}
  }
}

void ChromaticPercussionGFXDisplay(){//Chromatic Percussion
  if (ChannelIsActive[1] == true) {// Chromatic Percussion Channel graphics                                                X                                  Y                          Z              Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
    if (ChromaticPercussionPitchIsActive[0]   == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[0  ], ChromaticPercussionVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  ChromaticPercussionVelocityAlpha[0]  , ChromaticPercussionNoteColor[0]  ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[1]   == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[1  ], ChromaticPercussionVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  ChromaticPercussionVelocityAlpha[1]  , ChromaticPercussionNoteColor[1]  ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[2]   == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[2  ], ChromaticPercussionVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  ChromaticPercussionVelocityAlpha[2]  , ChromaticPercussionNoteColor[2]  ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[3]   == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[3  ], ChromaticPercussionVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  ChromaticPercussionVelocityAlpha[3]  , ChromaticPercussionNoteColor[3]  ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[4]   == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[4  ], ChromaticPercussionVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  ChromaticPercussionVelocityAlpha[4]  , ChromaticPercussionNoteColor[4]  ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[5]   == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[5  ], ChromaticPercussionVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  ChromaticPercussionVelocityAlpha[5]  , ChromaticPercussionNoteColor[5]  ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[6]   == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[6  ], ChromaticPercussionVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  ChromaticPercussionVelocityAlpha[6]  , ChromaticPercussionNoteColor[6]  ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[7]   == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[7  ], ChromaticPercussionVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  ChromaticPercussionVelocityAlpha[7]  , ChromaticPercussionNoteColor[7]  ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[8]   == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[8  ], ChromaticPercussionVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  ChromaticPercussionVelocityAlpha[8]  , ChromaticPercussionNoteColor[8]  ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[9]   == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[9  ], ChromaticPercussionVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  ChromaticPercussionVelocityAlpha[9]  , ChromaticPercussionNoteColor[9]  ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[10]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[10 ], ChromaticPercussionVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  ChromaticPercussionVelocityAlpha[10] , ChromaticPercussionNoteColor[10] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[11]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[11 ], ChromaticPercussionVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  ChromaticPercussionVelocityAlpha[11] , ChromaticPercussionNoteColor[11] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[12]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[12 ], ChromaticPercussionVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  ChromaticPercussionVelocityAlpha[12] , ChromaticPercussionNoteColor[12] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[13]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[13 ], ChromaticPercussionVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  ChromaticPercussionVelocityAlpha[13] , ChromaticPercussionNoteColor[13] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[14]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[14 ], ChromaticPercussionVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  ChromaticPercussionVelocityAlpha[14] , ChromaticPercussionNoteColor[14] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[15]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[15 ], ChromaticPercussionVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  ChromaticPercussionVelocityAlpha[15] , ChromaticPercussionNoteColor[15] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[16]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[16 ], ChromaticPercussionVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  ChromaticPercussionVelocityAlpha[16] , ChromaticPercussionNoteColor[16] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[17]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[17 ], ChromaticPercussionVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  ChromaticPercussionVelocityAlpha[17] , ChromaticPercussionNoteColor[17] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[18]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[18 ], ChromaticPercussionVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  ChromaticPercussionVelocityAlpha[18] , ChromaticPercussionNoteColor[18] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[19]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[19 ], ChromaticPercussionVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  ChromaticPercussionVelocityAlpha[19] , ChromaticPercussionNoteColor[19] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[20]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[20 ], ChromaticPercussionVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  ChromaticPercussionVelocityAlpha[20] , ChromaticPercussionNoteColor[20] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[21]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[21 ], ChromaticPercussionVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  ChromaticPercussionVelocityAlpha[21] , ChromaticPercussionNoteColor[21] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[22]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[22 ], ChromaticPercussionVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  ChromaticPercussionVelocityAlpha[22] , ChromaticPercussionNoteColor[22] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[23]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[23 ], ChromaticPercussionVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  ChromaticPercussionVelocityAlpha[23] , ChromaticPercussionNoteColor[23] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[24]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[24 ], ChromaticPercussionVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  ChromaticPercussionVelocityAlpha[24] , ChromaticPercussionNoteColor[24] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[25]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[25 ], ChromaticPercussionVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  ChromaticPercussionVelocityAlpha[25] , ChromaticPercussionNoteColor[25] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[26]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[26 ], ChromaticPercussionVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  ChromaticPercussionVelocityAlpha[26] , ChromaticPercussionNoteColor[26] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[27]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[27 ], ChromaticPercussionVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  ChromaticPercussionVelocityAlpha[27] , ChromaticPercussionNoteColor[27] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[28]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[28 ], ChromaticPercussionVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  ChromaticPercussionVelocityAlpha[28] , ChromaticPercussionNoteColor[28] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[29]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[29 ], ChromaticPercussionVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  ChromaticPercussionVelocityAlpha[29] , ChromaticPercussionNoteColor[29] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[30]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[30 ], ChromaticPercussionVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  ChromaticPercussionVelocityAlpha[30] , ChromaticPercussionNoteColor[30] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[31]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[31 ], ChromaticPercussionVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  ChromaticPercussionVelocityAlpha[31] , ChromaticPercussionNoteColor[31] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[32]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[32 ], ChromaticPercussionVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  ChromaticPercussionVelocityAlpha[32] , ChromaticPercussionNoteColor[32] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[33]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[33 ], ChromaticPercussionVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  ChromaticPercussionVelocityAlpha[33] , ChromaticPercussionNoteColor[33] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[34]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[34 ], ChromaticPercussionVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  ChromaticPercussionVelocityAlpha[34] , ChromaticPercussionNoteColor[34] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[35]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[35 ], ChromaticPercussionVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  ChromaticPercussionVelocityAlpha[35] , ChromaticPercussionNoteColor[35] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[36]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[36 ], ChromaticPercussionVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  ChromaticPercussionVelocityAlpha[36] , ChromaticPercussionNoteColor[36] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[37]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[37 ], ChromaticPercussionVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  ChromaticPercussionVelocityAlpha[37] , ChromaticPercussionNoteColor[37] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[38]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[38 ], ChromaticPercussionVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  ChromaticPercussionVelocityAlpha[38] , ChromaticPercussionNoteColor[38] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[39]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[39 ], ChromaticPercussionVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  ChromaticPercussionVelocityAlpha[39] , ChromaticPercussionNoteColor[39] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[40]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[40 ], ChromaticPercussionVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  ChromaticPercussionVelocityAlpha[40] , ChromaticPercussionNoteColor[40] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[41]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[41 ], ChromaticPercussionVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  ChromaticPercussionVelocityAlpha[41] , ChromaticPercussionNoteColor[41] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[42]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[42 ], ChromaticPercussionVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  ChromaticPercussionVelocityAlpha[42] , ChromaticPercussionNoteColor[42] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[43]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[43 ], ChromaticPercussionVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  ChromaticPercussionVelocityAlpha[43] , ChromaticPercussionNoteColor[43] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[44]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[44 ], ChromaticPercussionVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  ChromaticPercussionVelocityAlpha[44] , ChromaticPercussionNoteColor[44] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[45]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[45 ], ChromaticPercussionVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  ChromaticPercussionVelocityAlpha[45] , ChromaticPercussionNoteColor[45] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[46]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[46 ], ChromaticPercussionVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  ChromaticPercussionVelocityAlpha[46] , ChromaticPercussionNoteColor[46] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[47]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[47 ], ChromaticPercussionVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  ChromaticPercussionVelocityAlpha[47] , ChromaticPercussionNoteColor[47] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[48]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[48 ], ChromaticPercussionVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  ChromaticPercussionVelocityAlpha[48] , ChromaticPercussionNoteColor[48] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[49]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[49 ], ChromaticPercussionVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  ChromaticPercussionVelocityAlpha[49] , ChromaticPercussionNoteColor[49] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[50]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[50 ], ChromaticPercussionVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  ChromaticPercussionVelocityAlpha[50] , ChromaticPercussionNoteColor[50] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[51]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[51 ], ChromaticPercussionVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  ChromaticPercussionVelocityAlpha[51] , ChromaticPercussionNoteColor[51] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[52]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[52 ], ChromaticPercussionVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  ChromaticPercussionVelocityAlpha[52] , ChromaticPercussionNoteColor[52] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[53]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[53 ], ChromaticPercussionVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  ChromaticPercussionVelocityAlpha[53] , ChromaticPercussionNoteColor[53] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[54]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[54 ], ChromaticPercussionVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  ChromaticPercussionVelocityAlpha[54] , ChromaticPercussionNoteColor[54] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[55]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[55 ], ChromaticPercussionVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  ChromaticPercussionVelocityAlpha[55] , ChromaticPercussionNoteColor[55] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[56]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[56 ], ChromaticPercussionVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  ChromaticPercussionVelocityAlpha[56] , ChromaticPercussionNoteColor[56] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[57]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[57 ], ChromaticPercussionVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  ChromaticPercussionVelocityAlpha[57] , ChromaticPercussionNoteColor[57] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[58]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[58 ], ChromaticPercussionVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  ChromaticPercussionVelocityAlpha[58] , ChromaticPercussionNoteColor[58] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[59]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[59 ], ChromaticPercussionVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  ChromaticPercussionVelocityAlpha[59] , ChromaticPercussionNoteColor[59] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[60]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[60 ], ChromaticPercussionVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  ChromaticPercussionVelocityAlpha[60] , ChromaticPercussionNoteColor[60] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[61]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[61 ], ChromaticPercussionVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  ChromaticPercussionVelocityAlpha[61] , ChromaticPercussionNoteColor[61] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[62]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[62 ], ChromaticPercussionVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  ChromaticPercussionVelocityAlpha[62] , ChromaticPercussionNoteColor[62] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[63]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[63 ], ChromaticPercussionVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  ChromaticPercussionVelocityAlpha[63] , ChromaticPercussionNoteColor[63] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[64]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[64 ], ChromaticPercussionVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  ChromaticPercussionVelocityAlpha[64] , ChromaticPercussionNoteColor[64] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[65]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[65 ], ChromaticPercussionVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  ChromaticPercussionVelocityAlpha[65] , ChromaticPercussionNoteColor[65] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[66]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[66 ], ChromaticPercussionVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  ChromaticPercussionVelocityAlpha[66] , ChromaticPercussionNoteColor[66] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[67]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[67 ], ChromaticPercussionVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  ChromaticPercussionVelocityAlpha[67] , ChromaticPercussionNoteColor[67] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[68]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[68 ], ChromaticPercussionVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  ChromaticPercussionVelocityAlpha[68] , ChromaticPercussionNoteColor[68] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[69]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[69 ], ChromaticPercussionVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  ChromaticPercussionVelocityAlpha[69] , ChromaticPercussionNoteColor[69] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[70]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[70 ], ChromaticPercussionVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  ChromaticPercussionVelocityAlpha[70] , ChromaticPercussionNoteColor[70] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[71]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[71 ], ChromaticPercussionVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  ChromaticPercussionVelocityAlpha[71] , ChromaticPercussionNoteColor[71] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[72]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[72 ], ChromaticPercussionVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  ChromaticPercussionVelocityAlpha[72] , ChromaticPercussionNoteColor[72] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[73]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[73 ], ChromaticPercussionVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  ChromaticPercussionVelocityAlpha[73] , ChromaticPercussionNoteColor[73] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[74]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[74 ], ChromaticPercussionVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  ChromaticPercussionVelocityAlpha[74] , ChromaticPercussionNoteColor[74] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[75]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[75 ], ChromaticPercussionVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  ChromaticPercussionVelocityAlpha[75] , ChromaticPercussionNoteColor[75] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[76]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[76 ], ChromaticPercussionVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  ChromaticPercussionVelocityAlpha[76] , ChromaticPercussionNoteColor[76] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[77]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[77 ], ChromaticPercussionVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  ChromaticPercussionVelocityAlpha[77] , ChromaticPercussionNoteColor[77] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[78]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[78 ], ChromaticPercussionVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  ChromaticPercussionVelocityAlpha[78] , ChromaticPercussionNoteColor[78] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[79]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[79 ], ChromaticPercussionVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  ChromaticPercussionVelocityAlpha[79] , ChromaticPercussionNoteColor[79] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[80]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[80 ], ChromaticPercussionVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  ChromaticPercussionVelocityAlpha[80] , ChromaticPercussionNoteColor[80] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[81]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[81 ], ChromaticPercussionVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  ChromaticPercussionVelocityAlpha[81] , ChromaticPercussionNoteColor[81] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[82]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[82 ], ChromaticPercussionVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  ChromaticPercussionVelocityAlpha[82] , ChromaticPercussionNoteColor[82] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[83]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[83 ], ChromaticPercussionVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  ChromaticPercussionVelocityAlpha[83] , ChromaticPercussionNoteColor[83] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[84]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[84 ], ChromaticPercussionVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  ChromaticPercussionVelocityAlpha[84] , ChromaticPercussionNoteColor[84] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[85]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[85 ], ChromaticPercussionVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  ChromaticPercussionVelocityAlpha[85] , ChromaticPercussionNoteColor[85] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[86]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[86 ], ChromaticPercussionVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  ChromaticPercussionVelocityAlpha[86] , ChromaticPercussionNoteColor[86] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[87]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[87 ], ChromaticPercussionVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  ChromaticPercussionVelocityAlpha[87] , ChromaticPercussionNoteColor[87] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[88]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[88 ], ChromaticPercussionVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  ChromaticPercussionVelocityAlpha[88] , ChromaticPercussionNoteColor[88] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[89]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[89 ], ChromaticPercussionVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  ChromaticPercussionVelocityAlpha[89] , ChromaticPercussionNoteColor[89] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[90]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[90 ], ChromaticPercussionVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  ChromaticPercussionVelocityAlpha[90] , ChromaticPercussionNoteColor[90] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[91]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[91 ], ChromaticPercussionVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  ChromaticPercussionVelocityAlpha[91] , ChromaticPercussionNoteColor[91] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[92]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[92 ], ChromaticPercussionVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  ChromaticPercussionVelocityAlpha[92] , ChromaticPercussionNoteColor[92] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[93]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[93 ], ChromaticPercussionVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  ChromaticPercussionVelocityAlpha[93] , ChromaticPercussionNoteColor[93] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[94]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[94 ], ChromaticPercussionVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  ChromaticPercussionVelocityAlpha[94] , ChromaticPercussionNoteColor[94] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[95]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[95 ], ChromaticPercussionVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  ChromaticPercussionVelocityAlpha[95] , ChromaticPercussionNoteColor[95] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[96]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[96 ], ChromaticPercussionVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  ChromaticPercussionVelocityAlpha[96] , ChromaticPercussionNoteColor[96] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[97]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[97 ], ChromaticPercussionVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  ChromaticPercussionVelocityAlpha[97] , ChromaticPercussionNoteColor[97] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[98]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[98 ], ChromaticPercussionVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  ChromaticPercussionVelocityAlpha[98] , ChromaticPercussionNoteColor[98] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[99]  == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[99 ], ChromaticPercussionVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  ChromaticPercussionVelocityAlpha[99] , ChromaticPercussionNoteColor[99] ); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[100] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[100], ChromaticPercussionVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  ChromaticPercussionVelocityAlpha[100], ChromaticPercussionNoteColor[100]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[101] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[101], ChromaticPercussionVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  ChromaticPercussionVelocityAlpha[101], ChromaticPercussionNoteColor[101]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[102] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[102], ChromaticPercussionVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  ChromaticPercussionVelocityAlpha[102], ChromaticPercussionNoteColor[102]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[103] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[103], ChromaticPercussionVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  ChromaticPercussionVelocityAlpha[103], ChromaticPercussionNoteColor[103]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[104] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[104], ChromaticPercussionVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  ChromaticPercussionVelocityAlpha[104], ChromaticPercussionNoteColor[104]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[105] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[105], ChromaticPercussionVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  ChromaticPercussionVelocityAlpha[105], ChromaticPercussionNoteColor[105]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[106] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[106], ChromaticPercussionVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  ChromaticPercussionVelocityAlpha[106], ChromaticPercussionNoteColor[106]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[107] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[107], ChromaticPercussionVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  ChromaticPercussionVelocityAlpha[107], ChromaticPercussionNoteColor[107]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[108] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[108], ChromaticPercussionVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  ChromaticPercussionVelocityAlpha[108], ChromaticPercussionNoteColor[108]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[109] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[109], ChromaticPercussionVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  ChromaticPercussionVelocityAlpha[109], ChromaticPercussionNoteColor[109]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[110] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[110], ChromaticPercussionVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  ChromaticPercussionVelocityAlpha[110], ChromaticPercussionNoteColor[110]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[111] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[111], ChromaticPercussionVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  ChromaticPercussionVelocityAlpha[111], ChromaticPercussionNoteColor[111]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[112] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[112], ChromaticPercussionVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  ChromaticPercussionVelocityAlpha[112], ChromaticPercussionNoteColor[112]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[113] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[113], ChromaticPercussionVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  ChromaticPercussionVelocityAlpha[113], ChromaticPercussionNoteColor[113]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[114] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[114], ChromaticPercussionVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  ChromaticPercussionVelocityAlpha[114], ChromaticPercussionNoteColor[114]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[115] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[115], ChromaticPercussionVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  ChromaticPercussionVelocityAlpha[115], ChromaticPercussionNoteColor[115]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[116] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[116], ChromaticPercussionVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  ChromaticPercussionVelocityAlpha[116], ChromaticPercussionNoteColor[116]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[117] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[117], ChromaticPercussionVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  ChromaticPercussionVelocityAlpha[117], ChromaticPercussionNoteColor[117]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[118] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[118], ChromaticPercussionVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  ChromaticPercussionVelocityAlpha[118], ChromaticPercussionNoteColor[118]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[119] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[119], ChromaticPercussionVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  ChromaticPercussionVelocityAlpha[119], ChromaticPercussionNoteColor[119]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[120] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[120], ChromaticPercussionVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], ChromaticPercussionVelocityAlpha[120], ChromaticPercussionNoteColor[120]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[121] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[121], ChromaticPercussionVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], ChromaticPercussionVelocityAlpha[121], ChromaticPercussionNoteColor[121]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[122] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[122], ChromaticPercussionVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], ChromaticPercussionVelocityAlpha[122], ChromaticPercussionNoteColor[122]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[123] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[123], ChromaticPercussionVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], ChromaticPercussionVelocityAlpha[123], ChromaticPercussionNoteColor[123]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[124] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[124], ChromaticPercussionVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], ChromaticPercussionVelocityAlpha[124], ChromaticPercussionNoteColor[124]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[125] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[125], ChromaticPercussionVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], ChromaticPercussionVelocityAlpha[125], ChromaticPercussionNoteColor[125]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[126] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[126], ChromaticPercussionVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], ChromaticPercussionVelocityAlpha[126], ChromaticPercussionNoteColor[126]); chromaticpercussiongfx.display();}
    if (ChromaticPercussionPitchIsActive[127] == true) {chromaticpercussiongfx = new ChromaticPercussionGFX (ChromaticPercussionPitchX[127], ChromaticPercussionVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], ChromaticPercussionVelocityAlpha[127], ChromaticPercussionNoteColor[127]); chromaticpercussiongfx.display();}
  }
}

void OrganGFXDisplay(){//Organ
  if (ChannelIsActive[2] == true) {// Organ Channel graphics            X                   Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
    if (OrganPitchIsActive[0]   == true) {organgfx = new OrganGFX (OrganPitchX[0  ], OrganVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  OrganVelocityAlpha[0]  , OrganNoteColor[0]  ); organgfx.display();}
    if (OrganPitchIsActive[1]   == true) {organgfx = new OrganGFX (OrganPitchX[1  ], OrganVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  OrganVelocityAlpha[1]  , OrganNoteColor[1]  ); organgfx.display();}
    if (OrganPitchIsActive[2]   == true) {organgfx = new OrganGFX (OrganPitchX[2  ], OrganVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  OrganVelocityAlpha[2]  , OrganNoteColor[2]  ); organgfx.display();}
    if (OrganPitchIsActive[3]   == true) {organgfx = new OrganGFX (OrganPitchX[3  ], OrganVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  OrganVelocityAlpha[3]  , OrganNoteColor[3]  ); organgfx.display();}
    if (OrganPitchIsActive[4]   == true) {organgfx = new OrganGFX (OrganPitchX[4  ], OrganVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  OrganVelocityAlpha[4]  , OrganNoteColor[4]  ); organgfx.display();}
    if (OrganPitchIsActive[5]   == true) {organgfx = new OrganGFX (OrganPitchX[5  ], OrganVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  OrganVelocityAlpha[5]  , OrganNoteColor[5]  ); organgfx.display();}
    if (OrganPitchIsActive[6]   == true) {organgfx = new OrganGFX (OrganPitchX[6  ], OrganVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  OrganVelocityAlpha[6]  , OrganNoteColor[6]  ); organgfx.display();}
    if (OrganPitchIsActive[7]   == true) {organgfx = new OrganGFX (OrganPitchX[7  ], OrganVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  OrganVelocityAlpha[7]  , OrganNoteColor[7]  ); organgfx.display();}
    if (OrganPitchIsActive[8]   == true) {organgfx = new OrganGFX (OrganPitchX[8  ], OrganVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  OrganVelocityAlpha[8]  , OrganNoteColor[8]  ); organgfx.display();}
    if (OrganPitchIsActive[9]   == true) {organgfx = new OrganGFX (OrganPitchX[9  ], OrganVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  OrganVelocityAlpha[9]  , OrganNoteColor[9]  ); organgfx.display();}
    if (OrganPitchIsActive[10]  == true) {organgfx = new OrganGFX (OrganPitchX[10 ], OrganVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  OrganVelocityAlpha[10] , OrganNoteColor[10] ); organgfx.display();}
    if (OrganPitchIsActive[11]  == true) {organgfx = new OrganGFX (OrganPitchX[11 ], OrganVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  OrganVelocityAlpha[11] , OrganNoteColor[11] ); organgfx.display();}
    if (OrganPitchIsActive[12]  == true) {organgfx = new OrganGFX (OrganPitchX[12 ], OrganVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  OrganVelocityAlpha[12] , OrganNoteColor[12] ); organgfx.display();}
    if (OrganPitchIsActive[13]  == true) {organgfx = new OrganGFX (OrganPitchX[13 ], OrganVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  OrganVelocityAlpha[13] , OrganNoteColor[13] ); organgfx.display();}
    if (OrganPitchIsActive[14]  == true) {organgfx = new OrganGFX (OrganPitchX[14 ], OrganVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  OrganVelocityAlpha[14] , OrganNoteColor[14] ); organgfx.display();}
    if (OrganPitchIsActive[15]  == true) {organgfx = new OrganGFX (OrganPitchX[15 ], OrganVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  OrganVelocityAlpha[15] , OrganNoteColor[15] ); organgfx.display();}
    if (OrganPitchIsActive[16]  == true) {organgfx = new OrganGFX (OrganPitchX[16 ], OrganVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  OrganVelocityAlpha[16] , OrganNoteColor[16] ); organgfx.display();}
    if (OrganPitchIsActive[17]  == true) {organgfx = new OrganGFX (OrganPitchX[17 ], OrganVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  OrganVelocityAlpha[17] , OrganNoteColor[17] ); organgfx.display();}
    if (OrganPitchIsActive[18]  == true) {organgfx = new OrganGFX (OrganPitchX[18 ], OrganVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  OrganVelocityAlpha[18] , OrganNoteColor[18] ); organgfx.display();}
    if (OrganPitchIsActive[19]  == true) {organgfx = new OrganGFX (OrganPitchX[19 ], OrganVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  OrganVelocityAlpha[19] , OrganNoteColor[19] ); organgfx.display();}
    if (OrganPitchIsActive[20]  == true) {organgfx = new OrganGFX (OrganPitchX[20 ], OrganVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  OrganVelocityAlpha[20] , OrganNoteColor[20] ); organgfx.display();}
    if (OrganPitchIsActive[21]  == true) {organgfx = new OrganGFX (OrganPitchX[21 ], OrganVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  OrganVelocityAlpha[21] , OrganNoteColor[21] ); organgfx.display();}
    if (OrganPitchIsActive[22]  == true) {organgfx = new OrganGFX (OrganPitchX[22 ], OrganVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  OrganVelocityAlpha[22] , OrganNoteColor[22] ); organgfx.display();}
    if (OrganPitchIsActive[23]  == true) {organgfx = new OrganGFX (OrganPitchX[23 ], OrganVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  OrganVelocityAlpha[23] , OrganNoteColor[23] ); organgfx.display();}
    if (OrganPitchIsActive[24]  == true) {organgfx = new OrganGFX (OrganPitchX[24 ], OrganVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  OrganVelocityAlpha[24] , OrganNoteColor[24] ); organgfx.display();}
    if (OrganPitchIsActive[25]  == true) {organgfx = new OrganGFX (OrganPitchX[25 ], OrganVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  OrganVelocityAlpha[25] , OrganNoteColor[25] ); organgfx.display();}
    if (OrganPitchIsActive[26]  == true) {organgfx = new OrganGFX (OrganPitchX[26 ], OrganVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  OrganVelocityAlpha[26] , OrganNoteColor[26] ); organgfx.display();}
    if (OrganPitchIsActive[27]  == true) {organgfx = new OrganGFX (OrganPitchX[27 ], OrganVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  OrganVelocityAlpha[27] , OrganNoteColor[27] ); organgfx.display();}
    if (OrganPitchIsActive[28]  == true) {organgfx = new OrganGFX (OrganPitchX[28 ], OrganVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  OrganVelocityAlpha[28] , OrganNoteColor[28] ); organgfx.display();}
    if (OrganPitchIsActive[29]  == true) {organgfx = new OrganGFX (OrganPitchX[29 ], OrganVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  OrganVelocityAlpha[29] , OrganNoteColor[29] ); organgfx.display();}
    if (OrganPitchIsActive[30]  == true) {organgfx = new OrganGFX (OrganPitchX[30 ], OrganVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  OrganVelocityAlpha[30] , OrganNoteColor[30] ); organgfx.display();}
    if (OrganPitchIsActive[31]  == true) {organgfx = new OrganGFX (OrganPitchX[31 ], OrganVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  OrganVelocityAlpha[31] , OrganNoteColor[31] ); organgfx.display();}
    if (OrganPitchIsActive[32]  == true) {organgfx = new OrganGFX (OrganPitchX[32 ], OrganVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  OrganVelocityAlpha[32] , OrganNoteColor[32] ); organgfx.display();}
    if (OrganPitchIsActive[33]  == true) {organgfx = new OrganGFX (OrganPitchX[33 ], OrganVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  OrganVelocityAlpha[33] , OrganNoteColor[33] ); organgfx.display();}
    if (OrganPitchIsActive[34]  == true) {organgfx = new OrganGFX (OrganPitchX[34 ], OrganVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  OrganVelocityAlpha[34] , OrganNoteColor[34] ); organgfx.display();}
    if (OrganPitchIsActive[35]  == true) {organgfx = new OrganGFX (OrganPitchX[35 ], OrganVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  OrganVelocityAlpha[35] , OrganNoteColor[35] ); organgfx.display();}
    if (OrganPitchIsActive[36]  == true) {organgfx = new OrganGFX (OrganPitchX[36 ], OrganVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  OrganVelocityAlpha[36] , OrganNoteColor[36] ); organgfx.display();}
    if (OrganPitchIsActive[37]  == true) {organgfx = new OrganGFX (OrganPitchX[37 ], OrganVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  OrganVelocityAlpha[37] , OrganNoteColor[37] ); organgfx.display();}
    if (OrganPitchIsActive[38]  == true) {organgfx = new OrganGFX (OrganPitchX[38 ], OrganVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  OrganVelocityAlpha[38] , OrganNoteColor[38] ); organgfx.display();}
    if (OrganPitchIsActive[39]  == true) {organgfx = new OrganGFX (OrganPitchX[39 ], OrganVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  OrganVelocityAlpha[39] , OrganNoteColor[39] ); organgfx.display();}
    if (OrganPitchIsActive[40]  == true) {organgfx = new OrganGFX (OrganPitchX[40 ], OrganVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  OrganVelocityAlpha[40] , OrganNoteColor[40] ); organgfx.display();}
    if (OrganPitchIsActive[41]  == true) {organgfx = new OrganGFX (OrganPitchX[41 ], OrganVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  OrganVelocityAlpha[41] , OrganNoteColor[41] ); organgfx.display();}
    if (OrganPitchIsActive[42]  == true) {organgfx = new OrganGFX (OrganPitchX[42 ], OrganVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  OrganVelocityAlpha[42] , OrganNoteColor[42] ); organgfx.display();}
    if (OrganPitchIsActive[43]  == true) {organgfx = new OrganGFX (OrganPitchX[43 ], OrganVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  OrganVelocityAlpha[43] , OrganNoteColor[43] ); organgfx.display();}
    if (OrganPitchIsActive[44]  == true) {organgfx = new OrganGFX (OrganPitchX[44 ], OrganVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  OrganVelocityAlpha[44] , OrganNoteColor[44] ); organgfx.display();}
    if (OrganPitchIsActive[45]  == true) {organgfx = new OrganGFX (OrganPitchX[45 ], OrganVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  OrganVelocityAlpha[45] , OrganNoteColor[45] ); organgfx.display();}
    if (OrganPitchIsActive[46]  == true) {organgfx = new OrganGFX (OrganPitchX[46 ], OrganVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  OrganVelocityAlpha[46] , OrganNoteColor[46] ); organgfx.display();}
    if (OrganPitchIsActive[47]  == true) {organgfx = new OrganGFX (OrganPitchX[47 ], OrganVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  OrganVelocityAlpha[47] , OrganNoteColor[47] ); organgfx.display();}
    if (OrganPitchIsActive[48]  == true) {organgfx = new OrganGFX (OrganPitchX[48 ], OrganVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  OrganVelocityAlpha[48] , OrganNoteColor[48] ); organgfx.display();}
    if (OrganPitchIsActive[49]  == true) {organgfx = new OrganGFX (OrganPitchX[49 ], OrganVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  OrganVelocityAlpha[49] , OrganNoteColor[49] ); organgfx.display();}
    if (OrganPitchIsActive[50]  == true) {organgfx = new OrganGFX (OrganPitchX[50 ], OrganVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  OrganVelocityAlpha[50] , OrganNoteColor[50] ); organgfx.display();}
    if (OrganPitchIsActive[51]  == true) {organgfx = new OrganGFX (OrganPitchX[51 ], OrganVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  OrganVelocityAlpha[51] , OrganNoteColor[51] ); organgfx.display();}
    if (OrganPitchIsActive[52]  == true) {organgfx = new OrganGFX (OrganPitchX[52 ], OrganVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  OrganVelocityAlpha[52] , OrganNoteColor[52] ); organgfx.display();}
    if (OrganPitchIsActive[53]  == true) {organgfx = new OrganGFX (OrganPitchX[53 ], OrganVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  OrganVelocityAlpha[53] , OrganNoteColor[53] ); organgfx.display();}
    if (OrganPitchIsActive[54]  == true) {organgfx = new OrganGFX (OrganPitchX[54 ], OrganVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  OrganVelocityAlpha[54] , OrganNoteColor[54] ); organgfx.display();}
    if (OrganPitchIsActive[55]  == true) {organgfx = new OrganGFX (OrganPitchX[55 ], OrganVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  OrganVelocityAlpha[55] , OrganNoteColor[55] ); organgfx.display();}
    if (OrganPitchIsActive[56]  == true) {organgfx = new OrganGFX (OrganPitchX[56 ], OrganVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  OrganVelocityAlpha[56] , OrganNoteColor[56] ); organgfx.display();}
    if (OrganPitchIsActive[57]  == true) {organgfx = new OrganGFX (OrganPitchX[57 ], OrganVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  OrganVelocityAlpha[57] , OrganNoteColor[57] ); organgfx.display();}
    if (OrganPitchIsActive[58]  == true) {organgfx = new OrganGFX (OrganPitchX[58 ], OrganVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  OrganVelocityAlpha[58] , OrganNoteColor[58] ); organgfx.display();}
    if (OrganPitchIsActive[59]  == true) {organgfx = new OrganGFX (OrganPitchX[59 ], OrganVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  OrganVelocityAlpha[59] , OrganNoteColor[59] ); organgfx.display();}
    if (OrganPitchIsActive[60]  == true) {organgfx = new OrganGFX (OrganPitchX[60 ], OrganVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  OrganVelocityAlpha[60] , OrganNoteColor[60] ); organgfx.display();}
    if (OrganPitchIsActive[61]  == true) {organgfx = new OrganGFX (OrganPitchX[61 ], OrganVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  OrganVelocityAlpha[61] , OrganNoteColor[61] ); organgfx.display();}
    if (OrganPitchIsActive[62]  == true) {organgfx = new OrganGFX (OrganPitchX[62 ], OrganVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  OrganVelocityAlpha[62] , OrganNoteColor[62] ); organgfx.display();}
    if (OrganPitchIsActive[63]  == true) {organgfx = new OrganGFX (OrganPitchX[63 ], OrganVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  OrganVelocityAlpha[63] , OrganNoteColor[63] ); organgfx.display();}
    if (OrganPitchIsActive[64]  == true) {organgfx = new OrganGFX (OrganPitchX[64 ], OrganVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  OrganVelocityAlpha[64] , OrganNoteColor[64] ); organgfx.display();}
    if (OrganPitchIsActive[65]  == true) {organgfx = new OrganGFX (OrganPitchX[65 ], OrganVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  OrganVelocityAlpha[65] , OrganNoteColor[65] ); organgfx.display();}
    if (OrganPitchIsActive[66]  == true) {organgfx = new OrganGFX (OrganPitchX[66 ], OrganVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  OrganVelocityAlpha[66] , OrganNoteColor[66] ); organgfx.display();}
    if (OrganPitchIsActive[67]  == true) {organgfx = new OrganGFX (OrganPitchX[67 ], OrganVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  OrganVelocityAlpha[67] , OrganNoteColor[67] ); organgfx.display();}
    if (OrganPitchIsActive[68]  == true) {organgfx = new OrganGFX (OrganPitchX[68 ], OrganVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  OrganVelocityAlpha[68] , OrganNoteColor[68] ); organgfx.display();}
    if (OrganPitchIsActive[69]  == true) {organgfx = new OrganGFX (OrganPitchX[69 ], OrganVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  OrganVelocityAlpha[69] , OrganNoteColor[69] ); organgfx.display();}
    if (OrganPitchIsActive[70]  == true) {organgfx = new OrganGFX (OrganPitchX[70 ], OrganVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  OrganVelocityAlpha[70] , OrganNoteColor[70] ); organgfx.display();}
    if (OrganPitchIsActive[71]  == true) {organgfx = new OrganGFX (OrganPitchX[71 ], OrganVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  OrganVelocityAlpha[71] , OrganNoteColor[71] ); organgfx.display();}
    if (OrganPitchIsActive[72]  == true) {organgfx = new OrganGFX (OrganPitchX[72 ], OrganVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  OrganVelocityAlpha[72] , OrganNoteColor[72] ); organgfx.display();}
    if (OrganPitchIsActive[73]  == true) {organgfx = new OrganGFX (OrganPitchX[73 ], OrganVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  OrganVelocityAlpha[73] , OrganNoteColor[73] ); organgfx.display();}
    if (OrganPitchIsActive[74]  == true) {organgfx = new OrganGFX (OrganPitchX[74 ], OrganVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  OrganVelocityAlpha[74] , OrganNoteColor[74] ); organgfx.display();}
    if (OrganPitchIsActive[75]  == true) {organgfx = new OrganGFX (OrganPitchX[75 ], OrganVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  OrganVelocityAlpha[75] , OrganNoteColor[75] ); organgfx.display();}
    if (OrganPitchIsActive[76]  == true) {organgfx = new OrganGFX (OrganPitchX[76 ], OrganVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  OrganVelocityAlpha[76] , OrganNoteColor[76] ); organgfx.display();}
    if (OrganPitchIsActive[77]  == true) {organgfx = new OrganGFX (OrganPitchX[77 ], OrganVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  OrganVelocityAlpha[77] , OrganNoteColor[77] ); organgfx.display();}
    if (OrganPitchIsActive[78]  == true) {organgfx = new OrganGFX (OrganPitchX[78 ], OrganVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  OrganVelocityAlpha[78] , OrganNoteColor[78] ); organgfx.display();}
    if (OrganPitchIsActive[79]  == true) {organgfx = new OrganGFX (OrganPitchX[79 ], OrganVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  OrganVelocityAlpha[79] , OrganNoteColor[79] ); organgfx.display();}
    if (OrganPitchIsActive[80]  == true) {organgfx = new OrganGFX (OrganPitchX[80 ], OrganVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  OrganVelocityAlpha[80] , OrganNoteColor[80] ); organgfx.display();}
    if (OrganPitchIsActive[81]  == true) {organgfx = new OrganGFX (OrganPitchX[81 ], OrganVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  OrganVelocityAlpha[81] , OrganNoteColor[81] ); organgfx.display();}
    if (OrganPitchIsActive[82]  == true) {organgfx = new OrganGFX (OrganPitchX[82 ], OrganVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  OrganVelocityAlpha[82] , OrganNoteColor[82] ); organgfx.display();}
    if (OrganPitchIsActive[83]  == true) {organgfx = new OrganGFX (OrganPitchX[83 ], OrganVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  OrganVelocityAlpha[83] , OrganNoteColor[83] ); organgfx.display();}
    if (OrganPitchIsActive[84]  == true) {organgfx = new OrganGFX (OrganPitchX[84 ], OrganVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  OrganVelocityAlpha[84] , OrganNoteColor[84] ); organgfx.display();}
    if (OrganPitchIsActive[85]  == true) {organgfx = new OrganGFX (OrganPitchX[85 ], OrganVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  OrganVelocityAlpha[85] , OrganNoteColor[85] ); organgfx.display();}
    if (OrganPitchIsActive[86]  == true) {organgfx = new OrganGFX (OrganPitchX[86 ], OrganVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  OrganVelocityAlpha[86] , OrganNoteColor[86] ); organgfx.display();}
    if (OrganPitchIsActive[87]  == true) {organgfx = new OrganGFX (OrganPitchX[87 ], OrganVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  OrganVelocityAlpha[87] , OrganNoteColor[87] ); organgfx.display();}
    if (OrganPitchIsActive[88]  == true) {organgfx = new OrganGFX (OrganPitchX[88 ], OrganVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  OrganVelocityAlpha[88] , OrganNoteColor[88] ); organgfx.display();}
    if (OrganPitchIsActive[89]  == true) {organgfx = new OrganGFX (OrganPitchX[89 ], OrganVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  OrganVelocityAlpha[89] , OrganNoteColor[89] ); organgfx.display();}
    if (OrganPitchIsActive[90]  == true) {organgfx = new OrganGFX (OrganPitchX[90 ], OrganVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  OrganVelocityAlpha[90] , OrganNoteColor[90] ); organgfx.display();}
    if (OrganPitchIsActive[91]  == true) {organgfx = new OrganGFX (OrganPitchX[91 ], OrganVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  OrganVelocityAlpha[91] , OrganNoteColor[91] ); organgfx.display();}
    if (OrganPitchIsActive[92]  == true) {organgfx = new OrganGFX (OrganPitchX[92 ], OrganVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  OrganVelocityAlpha[92] , OrganNoteColor[92] ); organgfx.display();}
    if (OrganPitchIsActive[93]  == true) {organgfx = new OrganGFX (OrganPitchX[93 ], OrganVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  OrganVelocityAlpha[93] , OrganNoteColor[93] ); organgfx.display();}
    if (OrganPitchIsActive[94]  == true) {organgfx = new OrganGFX (OrganPitchX[94 ], OrganVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  OrganVelocityAlpha[94] , OrganNoteColor[94] ); organgfx.display();}
    if (OrganPitchIsActive[95]  == true) {organgfx = new OrganGFX (OrganPitchX[95 ], OrganVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  OrganVelocityAlpha[95] , OrganNoteColor[95] ); organgfx.display();}
    if (OrganPitchIsActive[96]  == true) {organgfx = new OrganGFX (OrganPitchX[96 ], OrganVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  OrganVelocityAlpha[96] , OrganNoteColor[96] ); organgfx.display();}
    if (OrganPitchIsActive[97]  == true) {organgfx = new OrganGFX (OrganPitchX[97 ], OrganVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  OrganVelocityAlpha[97] , OrganNoteColor[97] ); organgfx.display();}
    if (OrganPitchIsActive[98]  == true) {organgfx = new OrganGFX (OrganPitchX[98 ], OrganVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  OrganVelocityAlpha[98] , OrganNoteColor[98] ); organgfx.display();}
    if (OrganPitchIsActive[99]  == true) {organgfx = new OrganGFX (OrganPitchX[99 ], OrganVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  OrganVelocityAlpha[99] , OrganNoteColor[99] ); organgfx.display();}
    if (OrganPitchIsActive[100] == true) {organgfx = new OrganGFX (OrganPitchX[100], OrganVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  OrganVelocityAlpha[100], OrganNoteColor[100]); organgfx.display();}
    if (OrganPitchIsActive[101] == true) {organgfx = new OrganGFX (OrganPitchX[101], OrganVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  OrganVelocityAlpha[101], OrganNoteColor[101]); organgfx.display();}
    if (OrganPitchIsActive[102] == true) {organgfx = new OrganGFX (OrganPitchX[102], OrganVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  OrganVelocityAlpha[102], OrganNoteColor[102]); organgfx.display();}
    if (OrganPitchIsActive[103] == true) {organgfx = new OrganGFX (OrganPitchX[103], OrganVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  OrganVelocityAlpha[103], OrganNoteColor[103]); organgfx.display();}
    if (OrganPitchIsActive[104] == true) {organgfx = new OrganGFX (OrganPitchX[104], OrganVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  OrganVelocityAlpha[104], OrganNoteColor[104]); organgfx.display();}
    if (OrganPitchIsActive[105] == true) {organgfx = new OrganGFX (OrganPitchX[105], OrganVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  OrganVelocityAlpha[105], OrganNoteColor[105]); organgfx.display();}
    if (OrganPitchIsActive[106] == true) {organgfx = new OrganGFX (OrganPitchX[106], OrganVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  OrganVelocityAlpha[106], OrganNoteColor[106]); organgfx.display();}
    if (OrganPitchIsActive[107] == true) {organgfx = new OrganGFX (OrganPitchX[107], OrganVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  OrganVelocityAlpha[107], OrganNoteColor[107]); organgfx.display();}
    if (OrganPitchIsActive[108] == true) {organgfx = new OrganGFX (OrganPitchX[108], OrganVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  OrganVelocityAlpha[108], OrganNoteColor[108]); organgfx.display();}
    if (OrganPitchIsActive[109] == true) {organgfx = new OrganGFX (OrganPitchX[109], OrganVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  OrganVelocityAlpha[109], OrganNoteColor[109]); organgfx.display();}
    if (OrganPitchIsActive[110] == true) {organgfx = new OrganGFX (OrganPitchX[110], OrganVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  OrganVelocityAlpha[110], OrganNoteColor[110]); organgfx.display();}
    if (OrganPitchIsActive[111] == true) {organgfx = new OrganGFX (OrganPitchX[111], OrganVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  OrganVelocityAlpha[111], OrganNoteColor[111]); organgfx.display();}
    if (OrganPitchIsActive[112] == true) {organgfx = new OrganGFX (OrganPitchX[112], OrganVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  OrganVelocityAlpha[112], OrganNoteColor[112]); organgfx.display();}
    if (OrganPitchIsActive[113] == true) {organgfx = new OrganGFX (OrganPitchX[113], OrganVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  OrganVelocityAlpha[113], OrganNoteColor[113]); organgfx.display();}
    if (OrganPitchIsActive[114] == true) {organgfx = new OrganGFX (OrganPitchX[114], OrganVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  OrganVelocityAlpha[114], OrganNoteColor[114]); organgfx.display();}
    if (OrganPitchIsActive[115] == true) {organgfx = new OrganGFX (OrganPitchX[115], OrganVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  OrganVelocityAlpha[115], OrganNoteColor[115]); organgfx.display();}
    if (OrganPitchIsActive[116] == true) {organgfx = new OrganGFX (OrganPitchX[116], OrganVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  OrganVelocityAlpha[116], OrganNoteColor[116]); organgfx.display();}
    if (OrganPitchIsActive[117] == true) {organgfx = new OrganGFX (OrganPitchX[117], OrganVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  OrganVelocityAlpha[117], OrganNoteColor[117]); organgfx.display();}
    if (OrganPitchIsActive[118] == true) {organgfx = new OrganGFX (OrganPitchX[118], OrganVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  OrganVelocityAlpha[118], OrganNoteColor[118]); organgfx.display();}
    if (OrganPitchIsActive[119] == true) {organgfx = new OrganGFX (OrganPitchX[119], OrganVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  OrganVelocityAlpha[119], OrganNoteColor[119]); organgfx.display();}
    if (OrganPitchIsActive[120] == true) {organgfx = new OrganGFX (OrganPitchX[120], OrganVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], OrganVelocityAlpha[120], OrganNoteColor[120]); organgfx.display();}
    if (OrganPitchIsActive[121] == true) {organgfx = new OrganGFX (OrganPitchX[121], OrganVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], OrganVelocityAlpha[121], OrganNoteColor[121]); organgfx.display();}
    if (OrganPitchIsActive[122] == true) {organgfx = new OrganGFX (OrganPitchX[122], OrganVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], OrganVelocityAlpha[122], OrganNoteColor[122]); organgfx.display();}
    if (OrganPitchIsActive[123] == true) {organgfx = new OrganGFX (OrganPitchX[123], OrganVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], OrganVelocityAlpha[123], OrganNoteColor[123]); organgfx.display();}
    if (OrganPitchIsActive[124] == true) {organgfx = new OrganGFX (OrganPitchX[124], OrganVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], OrganVelocityAlpha[124], OrganNoteColor[124]); organgfx.display();}
    if (OrganPitchIsActive[125] == true) {organgfx = new OrganGFX (OrganPitchX[125], OrganVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], OrganVelocityAlpha[125], OrganNoteColor[125]); organgfx.display();}
    if (OrganPitchIsActive[126] == true) {organgfx = new OrganGFX (OrganPitchX[126], OrganVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], OrganVelocityAlpha[126], OrganNoteColor[126]); organgfx.display();}
    if (OrganPitchIsActive[127] == true) {organgfx = new OrganGFX (OrganPitchX[127], OrganVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], OrganVelocityAlpha[127], OrganNoteColor[127]); organgfx.display();}
  }
}

// void GuitarGFXDisplay(){//Guitar
//   if (ChannelIsActive[3] == true) {// Guitar Channel graphics              X                    Y                       Z              Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                  Texture            Display graphics
//     if (GuitarPitchIsActive[0]   == true) {guitargfx = new GuitarGFX (GuitarPitchX[0  ], GuitarVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  GuitarVelocityAlpha[0]  , GuitarNoteColor[0]  ); guitargfx.display();}
//     if (GuitarPitchIsActive[1]   == true) {guitargfx = new GuitarGFX (GuitarPitchX[1  ], GuitarVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  GuitarVelocityAlpha[1]  , GuitarNoteColor[1]  ); guitargfx.display();}
//     if (GuitarPitchIsActive[2]   == true) {guitargfx = new GuitarGFX (GuitarPitchX[2  ], GuitarVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  GuitarVelocityAlpha[2]  , GuitarNoteColor[2]  ); guitargfx.display();}
//     if (GuitarPitchIsActive[3]   == true) {guitargfx = new GuitarGFX (GuitarPitchX[3  ], GuitarVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  GuitarVelocityAlpha[3]  , GuitarNoteColor[3]  ); guitargfx.display();}
//     if (GuitarPitchIsActive[4]   == true) {guitargfx = new GuitarGFX (GuitarPitchX[4  ], GuitarVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  GuitarVelocityAlpha[4]  , GuitarNoteColor[4]  ); guitargfx.display();}
//     if (GuitarPitchIsActive[5]   == true) {guitargfx = new GuitarGFX (GuitarPitchX[5  ], GuitarVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  GuitarVelocityAlpha[5]  , GuitarNoteColor[5]  ); guitargfx.display();}
//     if (GuitarPitchIsActive[6]   == true) {guitargfx = new GuitarGFX (GuitarPitchX[6  ], GuitarVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  GuitarVelocityAlpha[6]  , GuitarNoteColor[6]  ); guitargfx.display();}
//     if (GuitarPitchIsActive[7]   == true) {guitargfx = new GuitarGFX (GuitarPitchX[7  ], GuitarVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  GuitarVelocityAlpha[7]  , GuitarNoteColor[7]  ); guitargfx.display();}
//     if (GuitarPitchIsActive[8]   == true) {guitargfx = new GuitarGFX (GuitarPitchX[8  ], GuitarVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  GuitarVelocityAlpha[8]  , GuitarNoteColor[8]  ); guitargfx.display();}
//     if (GuitarPitchIsActive[9]   == true) {guitargfx = new GuitarGFX (GuitarPitchX[9  ], GuitarVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  GuitarVelocityAlpha[9]  , GuitarNoteColor[9]  ); guitargfx.display();}
//     if (GuitarPitchIsActive[10]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[10 ], GuitarVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  GuitarVelocityAlpha[10] , GuitarNoteColor[10] ); guitargfx.display();}
//     if (GuitarPitchIsActive[11]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[11 ], GuitarVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  GuitarVelocityAlpha[11] , GuitarNoteColor[11] ); guitargfx.display();}
//     if (GuitarPitchIsActive[12]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[12 ], GuitarVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  GuitarVelocityAlpha[12] , GuitarNoteColor[12] ); guitargfx.display();}
//     if (GuitarPitchIsActive[13]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[13 ], GuitarVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  GuitarVelocityAlpha[13] , GuitarNoteColor[13] ); guitargfx.display();}
//     if (GuitarPitchIsActive[14]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[14 ], GuitarVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  GuitarVelocityAlpha[14] , GuitarNoteColor[14] ); guitargfx.display();}
//     if (GuitarPitchIsActive[15]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[15 ], GuitarVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  GuitarVelocityAlpha[15] , GuitarNoteColor[15] ); guitargfx.display();}
//     if (GuitarPitchIsActive[16]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[16 ], GuitarVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  GuitarVelocityAlpha[16] , GuitarNoteColor[16] ); guitargfx.display();}
//     if (GuitarPitchIsActive[17]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[17 ], GuitarVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  GuitarVelocityAlpha[17] , GuitarNoteColor[17] ); guitargfx.display();}
//     if (GuitarPitchIsActive[18]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[18 ], GuitarVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  GuitarVelocityAlpha[18] , GuitarNoteColor[18] ); guitargfx.display();}
//     if (GuitarPitchIsActive[19]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[19 ], GuitarVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  GuitarVelocityAlpha[19] , GuitarNoteColor[19] ); guitargfx.display();}
//     if (GuitarPitchIsActive[20]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[20 ], GuitarVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  GuitarVelocityAlpha[20] , GuitarNoteColor[20] ); guitargfx.display();}
//     if (GuitarPitchIsActive[21]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[21 ], GuitarVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  GuitarVelocityAlpha[21] , GuitarNoteColor[21] ); guitargfx.display();}
//     if (GuitarPitchIsActive[22]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[22 ], GuitarVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  GuitarVelocityAlpha[22] , GuitarNoteColor[22] ); guitargfx.display();}
//     if (GuitarPitchIsActive[23]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[23 ], GuitarVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  GuitarVelocityAlpha[23] , GuitarNoteColor[23] ); guitargfx.display();}
//     if (GuitarPitchIsActive[24]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[24 ], GuitarVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  GuitarVelocityAlpha[24] , GuitarNoteColor[24] ); guitargfx.display();}
//     if (GuitarPitchIsActive[25]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[25 ], GuitarVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  GuitarVelocityAlpha[25] , GuitarNoteColor[25] ); guitargfx.display();}
//     if (GuitarPitchIsActive[26]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[26 ], GuitarVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  GuitarVelocityAlpha[26] , GuitarNoteColor[26] ); guitargfx.display();}
//     if (GuitarPitchIsActive[27]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[27 ], GuitarVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  GuitarVelocityAlpha[27] , GuitarNoteColor[27] ); guitargfx.display();}
//     if (GuitarPitchIsActive[28]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[28 ], GuitarVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  GuitarVelocityAlpha[28] , GuitarNoteColor[28] ); guitargfx.display();}
//     if (GuitarPitchIsActive[29]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[29 ], GuitarVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  GuitarVelocityAlpha[29] , GuitarNoteColor[29] ); guitargfx.display();}
//     if (GuitarPitchIsActive[30]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[30 ], GuitarVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  GuitarVelocityAlpha[30] , GuitarNoteColor[30] ); guitargfx.display();}
//     if (GuitarPitchIsActive[31]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[31 ], GuitarVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  GuitarVelocityAlpha[31] , GuitarNoteColor[31] ); guitargfx.display();}
//     if (GuitarPitchIsActive[32]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[32 ], GuitarVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  GuitarVelocityAlpha[32] , GuitarNoteColor[32] ); guitargfx.display();}
//     if (GuitarPitchIsActive[33]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[33 ], GuitarVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  GuitarVelocityAlpha[33] , GuitarNoteColor[33] ); guitargfx.display();}
//     if (GuitarPitchIsActive[34]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[34 ], GuitarVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  GuitarVelocityAlpha[34] , GuitarNoteColor[34] ); guitargfx.display();}
//     if (GuitarPitchIsActive[35]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[35 ], GuitarVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  GuitarVelocityAlpha[35] , GuitarNoteColor[35] ); guitargfx.display();}
//     if (GuitarPitchIsActive[36]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[36 ], GuitarVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  GuitarVelocityAlpha[36] , GuitarNoteColor[36] ); guitargfx.display();}
//     if (GuitarPitchIsActive[37]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[37 ], GuitarVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  GuitarVelocityAlpha[37] , GuitarNoteColor[37] ); guitargfx.display();}
//     if (GuitarPitchIsActive[38]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[38 ], GuitarVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  GuitarVelocityAlpha[38] , GuitarNoteColor[38] ); guitargfx.display();}
//     if (GuitarPitchIsActive[39]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[39 ], GuitarVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  GuitarVelocityAlpha[39] , GuitarNoteColor[39] ); guitargfx.display();}
//     if (GuitarPitchIsActive[40]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[40 ], GuitarVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  GuitarVelocityAlpha[40] , GuitarNoteColor[40] ); guitargfx.display();}
//     if (GuitarPitchIsActive[41]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[41 ], GuitarVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  GuitarVelocityAlpha[41] , GuitarNoteColor[41] ); guitargfx.display();}
//     if (GuitarPitchIsActive[42]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[42 ], GuitarVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  GuitarVelocityAlpha[42] , GuitarNoteColor[42] ); guitargfx.display();}
//     if (GuitarPitchIsActive[43]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[43 ], GuitarVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  GuitarVelocityAlpha[43] , GuitarNoteColor[43] ); guitargfx.display();}
//     if (GuitarPitchIsActive[44]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[44 ], GuitarVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  GuitarVelocityAlpha[44] , GuitarNoteColor[44] ); guitargfx.display();}
//     if (GuitarPitchIsActive[45]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[45 ], GuitarVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  GuitarVelocityAlpha[45] , GuitarNoteColor[45] ); guitargfx.display();}
//     if (GuitarPitchIsActive[46]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[46 ], GuitarVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  GuitarVelocityAlpha[46] , GuitarNoteColor[46] ); guitargfx.display();}
//     if (GuitarPitchIsActive[47]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[47 ], GuitarVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  GuitarVelocityAlpha[47] , GuitarNoteColor[47] ); guitargfx.display();}
//     if (GuitarPitchIsActive[48]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[48 ], GuitarVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  GuitarVelocityAlpha[48] , GuitarNoteColor[48] ); guitargfx.display();}
//     if (GuitarPitchIsActive[49]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[49 ], GuitarVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  GuitarVelocityAlpha[49] , GuitarNoteColor[49] ); guitargfx.display();}
//     if (GuitarPitchIsActive[50]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[50 ], GuitarVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  GuitarVelocityAlpha[50] , GuitarNoteColor[50] ); guitargfx.display();}
//     if (GuitarPitchIsActive[51]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[51 ], GuitarVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  GuitarVelocityAlpha[51] , GuitarNoteColor[51] ); guitargfx.display();}
//     if (GuitarPitchIsActive[52]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[52 ], GuitarVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  GuitarVelocityAlpha[52] , GuitarNoteColor[52] ); guitargfx.display();}
//     if (GuitarPitchIsActive[53]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[53 ], GuitarVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  GuitarVelocityAlpha[53] , GuitarNoteColor[53] ); guitargfx.display();}
//     if (GuitarPitchIsActive[54]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[54 ], GuitarVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  GuitarVelocityAlpha[54] , GuitarNoteColor[54] ); guitargfx.display();}
//     if (GuitarPitchIsActive[55]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[55 ], GuitarVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  GuitarVelocityAlpha[55] , GuitarNoteColor[55] ); guitargfx.display();}
//     if (GuitarPitchIsActive[56]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[56 ], GuitarVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  GuitarVelocityAlpha[56] , GuitarNoteColor[56] ); guitargfx.display();}
//     if (GuitarPitchIsActive[57]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[57 ], GuitarVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  GuitarVelocityAlpha[57] , GuitarNoteColor[57] ); guitargfx.display();}
//     if (GuitarPitchIsActive[58]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[58 ], GuitarVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  GuitarVelocityAlpha[58] , GuitarNoteColor[58] ); guitargfx.display();}
//     if (GuitarPitchIsActive[59]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[59 ], GuitarVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  GuitarVelocityAlpha[59] , GuitarNoteColor[59] ); guitargfx.display();}
//     if (GuitarPitchIsActive[60]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[60 ], GuitarVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  GuitarVelocityAlpha[60] , GuitarNoteColor[60] ); guitargfx.display();}
//     if (GuitarPitchIsActive[61]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[61 ], GuitarVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  GuitarVelocityAlpha[61] , GuitarNoteColor[61] ); guitargfx.display();}
//     if (GuitarPitchIsActive[62]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[62 ], GuitarVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  GuitarVelocityAlpha[62] , GuitarNoteColor[62] ); guitargfx.display();}
//     if (GuitarPitchIsActive[63]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[63 ], GuitarVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  GuitarVelocityAlpha[63] , GuitarNoteColor[63] ); guitargfx.display();}
//     if (GuitarPitchIsActive[64]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[64 ], GuitarVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  GuitarVelocityAlpha[64] , GuitarNoteColor[64] ); guitargfx.display();}
//     if (GuitarPitchIsActive[65]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[65 ], GuitarVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  GuitarVelocityAlpha[65] , GuitarNoteColor[65] ); guitargfx.display();}
//     if (GuitarPitchIsActive[66]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[66 ], GuitarVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  GuitarVelocityAlpha[66] , GuitarNoteColor[66] ); guitargfx.display();}
//     if (GuitarPitchIsActive[67]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[67 ], GuitarVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  GuitarVelocityAlpha[67] , GuitarNoteColor[67] ); guitargfx.display();}
//     if (GuitarPitchIsActive[68]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[68 ], GuitarVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  GuitarVelocityAlpha[68] , GuitarNoteColor[68] ); guitargfx.display();}
//     if (GuitarPitchIsActive[69]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[69 ], GuitarVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  GuitarVelocityAlpha[69] , GuitarNoteColor[69] ); guitargfx.display();}
//     if (GuitarPitchIsActive[70]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[70 ], GuitarVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  GuitarVelocityAlpha[70] , GuitarNoteColor[70] ); guitargfx.display();}
//     if (GuitarPitchIsActive[71]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[71 ], GuitarVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  GuitarVelocityAlpha[71] , GuitarNoteColor[71] ); guitargfx.display();}
//     if (GuitarPitchIsActive[72]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[72 ], GuitarVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  GuitarVelocityAlpha[72] , GuitarNoteColor[72] ); guitargfx.display();}
//     if (GuitarPitchIsActive[73]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[73 ], GuitarVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  GuitarVelocityAlpha[73] , GuitarNoteColor[73] ); guitargfx.display();}
//     if (GuitarPitchIsActive[74]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[74 ], GuitarVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  GuitarVelocityAlpha[74] , GuitarNoteColor[74] ); guitargfx.display();}
//     if (GuitarPitchIsActive[75]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[75 ], GuitarVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  GuitarVelocityAlpha[75] , GuitarNoteColor[75] ); guitargfx.display();}
//     if (GuitarPitchIsActive[76]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[76 ], GuitarVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  GuitarVelocityAlpha[76] , GuitarNoteColor[76] ); guitargfx.display();}
//     if (GuitarPitchIsActive[77]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[77 ], GuitarVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  GuitarVelocityAlpha[77] , GuitarNoteColor[77] ); guitargfx.display();}
//     if (GuitarPitchIsActive[78]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[78 ], GuitarVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  GuitarVelocityAlpha[78] , GuitarNoteColor[78] ); guitargfx.display();}
//     if (GuitarPitchIsActive[79]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[79 ], GuitarVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  GuitarVelocityAlpha[79] , GuitarNoteColor[79] ); guitargfx.display();}
//     if (GuitarPitchIsActive[80]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[80 ], GuitarVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  GuitarVelocityAlpha[80] , GuitarNoteColor[80] ); guitargfx.display();}
//     if (GuitarPitchIsActive[81]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[81 ], GuitarVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  GuitarVelocityAlpha[81] , GuitarNoteColor[81] ); guitargfx.display();}
//     if (GuitarPitchIsActive[82]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[82 ], GuitarVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  GuitarVelocityAlpha[82] , GuitarNoteColor[82] ); guitargfx.display();}
//     if (GuitarPitchIsActive[83]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[83 ], GuitarVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  GuitarVelocityAlpha[83] , GuitarNoteColor[83] ); guitargfx.display();}
//     if (GuitarPitchIsActive[84]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[84 ], GuitarVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  GuitarVelocityAlpha[84] , GuitarNoteColor[84] ); guitargfx.display();}
//     if (GuitarPitchIsActive[85]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[85 ], GuitarVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  GuitarVelocityAlpha[85] , GuitarNoteColor[85] ); guitargfx.display();}
//     if (GuitarPitchIsActive[86]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[86 ], GuitarVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  GuitarVelocityAlpha[86] , GuitarNoteColor[86] ); guitargfx.display();}
//     if (GuitarPitchIsActive[87]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[87 ], GuitarVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  GuitarVelocityAlpha[87] , GuitarNoteColor[87] ); guitargfx.display();}
//     if (GuitarPitchIsActive[88]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[88 ], GuitarVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  GuitarVelocityAlpha[88] , GuitarNoteColor[88] ); guitargfx.display();}
//     if (GuitarPitchIsActive[89]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[89 ], GuitarVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  GuitarVelocityAlpha[89] , GuitarNoteColor[89] ); guitargfx.display();}
//     if (GuitarPitchIsActive[90]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[90 ], GuitarVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  GuitarVelocityAlpha[90] , GuitarNoteColor[90] ); guitargfx.display();}
//     if (GuitarPitchIsActive[91]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[91 ], GuitarVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  GuitarVelocityAlpha[91] , GuitarNoteColor[91] ); guitargfx.display();}
//     if (GuitarPitchIsActive[92]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[92 ], GuitarVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  GuitarVelocityAlpha[92] , GuitarNoteColor[92] ); guitargfx.display();}
//     if (GuitarPitchIsActive[93]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[93 ], GuitarVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  GuitarVelocityAlpha[93] , GuitarNoteColor[93] ); guitargfx.display();}
//     if (GuitarPitchIsActive[94]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[94 ], GuitarVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  GuitarVelocityAlpha[94] , GuitarNoteColor[94] ); guitargfx.display();}
//     if (GuitarPitchIsActive[95]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[95 ], GuitarVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  GuitarVelocityAlpha[95] , GuitarNoteColor[95] ); guitargfx.display();}
//     if (GuitarPitchIsActive[96]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[96 ], GuitarVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  GuitarVelocityAlpha[96] , GuitarNoteColor[96] ); guitargfx.display();}
//     if (GuitarPitchIsActive[97]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[97 ], GuitarVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  GuitarVelocityAlpha[97] , GuitarNoteColor[97] ); guitargfx.display();}
//     if (GuitarPitchIsActive[98]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[98 ], GuitarVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  GuitarVelocityAlpha[98] , GuitarNoteColor[98] ); guitargfx.display();}
//     if (GuitarPitchIsActive[99]  == true) {guitargfx = new GuitarGFX (GuitarPitchX[99 ], GuitarVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  GuitarVelocityAlpha[99] , GuitarNoteColor[99] ); guitargfx.display();}
//     if (GuitarPitchIsActive[100] == true) {guitargfx = new GuitarGFX (GuitarPitchX[100], GuitarVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  GuitarVelocityAlpha[100], GuitarNoteColor[100]); guitargfx.display();}
//     if (GuitarPitchIsActive[101] == true) {guitargfx = new GuitarGFX (GuitarPitchX[101], GuitarVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  GuitarVelocityAlpha[101], GuitarNoteColor[101]); guitargfx.display();}
//     if (GuitarPitchIsActive[102] == true) {guitargfx = new GuitarGFX (GuitarPitchX[102], GuitarVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  GuitarVelocityAlpha[102], GuitarNoteColor[102]); guitargfx.display();}
//     if (GuitarPitchIsActive[103] == true) {guitargfx = new GuitarGFX (GuitarPitchX[103], GuitarVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  GuitarVelocityAlpha[103], GuitarNoteColor[103]); guitargfx.display();}
//     if (GuitarPitchIsActive[104] == true) {guitargfx = new GuitarGFX (GuitarPitchX[104], GuitarVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  GuitarVelocityAlpha[104], GuitarNoteColor[104]); guitargfx.display();}
//     if (GuitarPitchIsActive[105] == true) {guitargfx = new GuitarGFX (GuitarPitchX[105], GuitarVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  GuitarVelocityAlpha[105], GuitarNoteColor[105]); guitargfx.display();}
//     if (GuitarPitchIsActive[106] == true) {guitargfx = new GuitarGFX (GuitarPitchX[106], GuitarVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  GuitarVelocityAlpha[106], GuitarNoteColor[106]); guitargfx.display();}
//     if (GuitarPitchIsActive[107] == true) {guitargfx = new GuitarGFX (GuitarPitchX[107], GuitarVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  GuitarVelocityAlpha[107], GuitarNoteColor[107]); guitargfx.display();}
//     if (GuitarPitchIsActive[108] == true) {guitargfx = new GuitarGFX (GuitarPitchX[108], GuitarVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  GuitarVelocityAlpha[108], GuitarNoteColor[108]); guitargfx.display();}
//     if (GuitarPitchIsActive[109] == true) {guitargfx = new GuitarGFX (GuitarPitchX[109], GuitarVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  GuitarVelocityAlpha[109], GuitarNoteColor[109]); guitargfx.display();}
//     if (GuitarPitchIsActive[110] == true) {guitargfx = new GuitarGFX (GuitarPitchX[110], GuitarVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  GuitarVelocityAlpha[110], GuitarNoteColor[110]); guitargfx.display();}
//     if (GuitarPitchIsActive[111] == true) {guitargfx = new GuitarGFX (GuitarPitchX[111], GuitarVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  GuitarVelocityAlpha[111], GuitarNoteColor[111]); guitargfx.display();}
//     if (GuitarPitchIsActive[112] == true) {guitargfx = new GuitarGFX (GuitarPitchX[112], GuitarVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  GuitarVelocityAlpha[112], GuitarNoteColor[112]); guitargfx.display();}
//     if (GuitarPitchIsActive[113] == true) {guitargfx = new GuitarGFX (GuitarPitchX[113], GuitarVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  GuitarVelocityAlpha[113], GuitarNoteColor[113]); guitargfx.display();}
//     if (GuitarPitchIsActive[114] == true) {guitargfx = new GuitarGFX (GuitarPitchX[114], GuitarVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  GuitarVelocityAlpha[114], GuitarNoteColor[114]); guitargfx.display();}
//     if (GuitarPitchIsActive[115] == true) {guitargfx = new GuitarGFX (GuitarPitchX[115], GuitarVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  GuitarVelocityAlpha[115], GuitarNoteColor[115]); guitargfx.display();}
//     if (GuitarPitchIsActive[116] == true) {guitargfx = new GuitarGFX (GuitarPitchX[116], GuitarVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  GuitarVelocityAlpha[116], GuitarNoteColor[116]); guitargfx.display();}
//     if (GuitarPitchIsActive[117] == true) {guitargfx = new GuitarGFX (GuitarPitchX[117], GuitarVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  GuitarVelocityAlpha[117], GuitarNoteColor[117]); guitargfx.display();}
//     if (GuitarPitchIsActive[118] == true) {guitargfx = new GuitarGFX (GuitarPitchX[118], GuitarVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  GuitarVelocityAlpha[118], GuitarNoteColor[118]); guitargfx.display();}
//     if (GuitarPitchIsActive[119] == true) {guitargfx = new GuitarGFX (GuitarPitchX[119], GuitarVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  GuitarVelocityAlpha[119], GuitarNoteColor[119]); guitargfx.display();}
//     if (GuitarPitchIsActive[120] == true) {guitargfx = new GuitarGFX (GuitarPitchX[120], GuitarVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], GuitarVelocityAlpha[120], GuitarNoteColor[120]); guitargfx.display();}
//     if (GuitarPitchIsActive[121] == true) {guitargfx = new GuitarGFX (GuitarPitchX[121], GuitarVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], GuitarVelocityAlpha[121], GuitarNoteColor[121]); guitargfx.display();}
//     if (GuitarPitchIsActive[122] == true) {guitargfx = new GuitarGFX (GuitarPitchX[122], GuitarVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], GuitarVelocityAlpha[122], GuitarNoteColor[122]); guitargfx.display();}
//     if (GuitarPitchIsActive[123] == true) {guitargfx = new GuitarGFX (GuitarPitchX[123], GuitarVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], GuitarVelocityAlpha[123], GuitarNoteColor[123]); guitargfx.display();}
//     if (GuitarPitchIsActive[124] == true) {guitargfx = new GuitarGFX (GuitarPitchX[124], GuitarVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], GuitarVelocityAlpha[124], GuitarNoteColor[124]); guitargfx.display();}
//     if (GuitarPitchIsActive[125] == true) {guitargfx = new GuitarGFX (GuitarPitchX[125], GuitarVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], GuitarVelocityAlpha[125], GuitarNoteColor[125]); guitargfx.display();}
//     if (GuitarPitchIsActive[126] == true) {guitargfx = new GuitarGFX (GuitarPitchX[126], GuitarVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], GuitarVelocityAlpha[126], GuitarNoteColor[126]); guitargfx.display();}
//     if (GuitarPitchIsActive[127] == true) {guitargfx = new GuitarGFX (GuitarPitchX[127], GuitarVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], GuitarVelocityAlpha[127], GuitarNoteColor[127]); guitargfx.display();}
//   }
// }

// void BassGFXDisplay(){//Bass
//   if (ChannelIsActive[4] == true) {// Bass Channel graphics           X                 Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness               Alpha                Texture           Display graphics
//     if (BassPitchIsActive[0]   == true) {bassgfx = new BassGFX (BassPitchX[0  ], BassVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  BassVelocityAlpha[0]  , BassNoteColor[0]  ); bassgfx.display();}
//     if (BassPitchIsActive[1]   == true) {bassgfx = new BassGFX (BassPitchX[1  ], BassVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  BassVelocityAlpha[1]  , BassNoteColor[1]  ); bassgfx.display();}
//     if (BassPitchIsActive[2]   == true) {bassgfx = new BassGFX (BassPitchX[2  ], BassVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  BassVelocityAlpha[2]  , BassNoteColor[2]  ); bassgfx.display();}
//     if (BassPitchIsActive[3]   == true) {bassgfx = new BassGFX (BassPitchX[3  ], BassVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  BassVelocityAlpha[3]  , BassNoteColor[3]  ); bassgfx.display();}
//     if (BassPitchIsActive[4]   == true) {bassgfx = new BassGFX (BassPitchX[4  ], BassVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  BassVelocityAlpha[4]  , BassNoteColor[4]  ); bassgfx.display();}
//     if (BassPitchIsActive[5]   == true) {bassgfx = new BassGFX (BassPitchX[5  ], BassVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  BassVelocityAlpha[5]  , BassNoteColor[5]  ); bassgfx.display();}
//     if (BassPitchIsActive[6]   == true) {bassgfx = new BassGFX (BassPitchX[6  ], BassVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  BassVelocityAlpha[6]  , BassNoteColor[6]  ); bassgfx.display();}
//     if (BassPitchIsActive[7]   == true) {bassgfx = new BassGFX (BassPitchX[7  ], BassVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  BassVelocityAlpha[7]  , BassNoteColor[7]  ); bassgfx.display();}
//     if (BassPitchIsActive[8]   == true) {bassgfx = new BassGFX (BassPitchX[8  ], BassVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  BassVelocityAlpha[8]  , BassNoteColor[8]  ); bassgfx.display();}
//     if (BassPitchIsActive[9]   == true) {bassgfx = new BassGFX (BassPitchX[9  ], BassVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  BassVelocityAlpha[9]  , BassNoteColor[9]  ); bassgfx.display();}
//     if (BassPitchIsActive[10]  == true) {bassgfx = new BassGFX (BassPitchX[10 ], BassVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  BassVelocityAlpha[10] , BassNoteColor[10] ); bassgfx.display();}
//     if (BassPitchIsActive[11]  == true) {bassgfx = new BassGFX (BassPitchX[11 ], BassVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  BassVelocityAlpha[11] , BassNoteColor[11] ); bassgfx.display();}
//     if (BassPitchIsActive[12]  == true) {bassgfx = new BassGFX (BassPitchX[12 ], BassVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  BassVelocityAlpha[12] , BassNoteColor[12] ); bassgfx.display();}
//     if (BassPitchIsActive[13]  == true) {bassgfx = new BassGFX (BassPitchX[13 ], BassVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  BassVelocityAlpha[13] , BassNoteColor[13] ); bassgfx.display();}
//     if (BassPitchIsActive[14]  == true) {bassgfx = new BassGFX (BassPitchX[14 ], BassVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  BassVelocityAlpha[14] , BassNoteColor[14] ); bassgfx.display();}
//     if (BassPitchIsActive[15]  == true) {bassgfx = new BassGFX (BassPitchX[15 ], BassVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  BassVelocityAlpha[15] , BassNoteColor[15] ); bassgfx.display();}
//     if (BassPitchIsActive[16]  == true) {bassgfx = new BassGFX (BassPitchX[16 ], BassVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  BassVelocityAlpha[16] , BassNoteColor[16] ); bassgfx.display();}
//     if (BassPitchIsActive[17]  == true) {bassgfx = new BassGFX (BassPitchX[17 ], BassVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  BassVelocityAlpha[17] , BassNoteColor[17] ); bassgfx.display();}
//     if (BassPitchIsActive[18]  == true) {bassgfx = new BassGFX (BassPitchX[18 ], BassVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  BassVelocityAlpha[18] , BassNoteColor[18] ); bassgfx.display();}
//     if (BassPitchIsActive[19]  == true) {bassgfx = new BassGFX (BassPitchX[19 ], BassVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  BassVelocityAlpha[19] , BassNoteColor[19] ); bassgfx.display();}
//     if (BassPitchIsActive[20]  == true) {bassgfx = new BassGFX (BassPitchX[20 ], BassVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  BassVelocityAlpha[20] , BassNoteColor[20] ); bassgfx.display();}
//     if (BassPitchIsActive[21]  == true) {bassgfx = new BassGFX (BassPitchX[21 ], BassVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  BassVelocityAlpha[21] , BassNoteColor[21] ); bassgfx.display();}
//     if (BassPitchIsActive[22]  == true) {bassgfx = new BassGFX (BassPitchX[22 ], BassVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  BassVelocityAlpha[22] , BassNoteColor[22] ); bassgfx.display();}
//     if (BassPitchIsActive[23]  == true) {bassgfx = new BassGFX (BassPitchX[23 ], BassVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  BassVelocityAlpha[23] , BassNoteColor[23] ); bassgfx.display();}
//     if (BassPitchIsActive[24]  == true) {bassgfx = new BassGFX (BassPitchX[24 ], BassVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  BassVelocityAlpha[24] , BassNoteColor[24] ); bassgfx.display();}
//     if (BassPitchIsActive[25]  == true) {bassgfx = new BassGFX (BassPitchX[25 ], BassVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  BassVelocityAlpha[25] , BassNoteColor[25] ); bassgfx.display();}
//     if (BassPitchIsActive[26]  == true) {bassgfx = new BassGFX (BassPitchX[26 ], BassVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  BassVelocityAlpha[26] , BassNoteColor[26] ); bassgfx.display();}
//     if (BassPitchIsActive[27]  == true) {bassgfx = new BassGFX (BassPitchX[27 ], BassVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  BassVelocityAlpha[27] , BassNoteColor[27] ); bassgfx.display();}
//     if (BassPitchIsActive[28]  == true) {bassgfx = new BassGFX (BassPitchX[28 ], BassVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  BassVelocityAlpha[28] , BassNoteColor[28] ); bassgfx.display();}
//     if (BassPitchIsActive[29]  == true) {bassgfx = new BassGFX (BassPitchX[29 ], BassVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  BassVelocityAlpha[29] , BassNoteColor[29] ); bassgfx.display();}
//     if (BassPitchIsActive[30]  == true) {bassgfx = new BassGFX (BassPitchX[30 ], BassVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  BassVelocityAlpha[30] , BassNoteColor[30] ); bassgfx.display();}
//     if (BassPitchIsActive[31]  == true) {bassgfx = new BassGFX (BassPitchX[31 ], BassVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  BassVelocityAlpha[31] , BassNoteColor[31] ); bassgfx.display();}
//     if (BassPitchIsActive[32]  == true) {bassgfx = new BassGFX (BassPitchX[32 ], BassVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  BassVelocityAlpha[32] , BassNoteColor[32] ); bassgfx.display();}
//     if (BassPitchIsActive[33]  == true) {bassgfx = new BassGFX (BassPitchX[33 ], BassVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  BassVelocityAlpha[33] , BassNoteColor[33] ); bassgfx.display();}
//     if (BassPitchIsActive[34]  == true) {bassgfx = new BassGFX (BassPitchX[34 ], BassVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  BassVelocityAlpha[34] , BassNoteColor[34] ); bassgfx.display();}
//     if (BassPitchIsActive[35]  == true) {bassgfx = new BassGFX (BassPitchX[35 ], BassVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  BassVelocityAlpha[35] , BassNoteColor[35] ); bassgfx.display();}
//     if (BassPitchIsActive[36]  == true) {bassgfx = new BassGFX (BassPitchX[36 ], BassVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  BassVelocityAlpha[36] , BassNoteColor[36] ); bassgfx.display();}
//     if (BassPitchIsActive[37]  == true) {bassgfx = new BassGFX (BassPitchX[37 ], BassVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  BassVelocityAlpha[37] , BassNoteColor[37] ); bassgfx.display();}
//     if (BassPitchIsActive[38]  == true) {bassgfx = new BassGFX (BassPitchX[38 ], BassVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  BassVelocityAlpha[38] , BassNoteColor[38] ); bassgfx.display();}
//     if (BassPitchIsActive[39]  == true) {bassgfx = new BassGFX (BassPitchX[39 ], BassVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  BassVelocityAlpha[39] , BassNoteColor[39] ); bassgfx.display();}
//     if (BassPitchIsActive[40]  == true) {bassgfx = new BassGFX (BassPitchX[40 ], BassVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  BassVelocityAlpha[40] , BassNoteColor[40] ); bassgfx.display();}
//     if (BassPitchIsActive[41]  == true) {bassgfx = new BassGFX (BassPitchX[41 ], BassVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  BassVelocityAlpha[41] , BassNoteColor[41] ); bassgfx.display();}
//     if (BassPitchIsActive[42]  == true) {bassgfx = new BassGFX (BassPitchX[42 ], BassVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  BassVelocityAlpha[42] , BassNoteColor[42] ); bassgfx.display();}
//     if (BassPitchIsActive[43]  == true) {bassgfx = new BassGFX (BassPitchX[43 ], BassVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  BassVelocityAlpha[43] , BassNoteColor[43] ); bassgfx.display();}
//     if (BassPitchIsActive[44]  == true) {bassgfx = new BassGFX (BassPitchX[44 ], BassVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  BassVelocityAlpha[44] , BassNoteColor[44] ); bassgfx.display();}
//     if (BassPitchIsActive[45]  == true) {bassgfx = new BassGFX (BassPitchX[45 ], BassVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  BassVelocityAlpha[45] , BassNoteColor[45] ); bassgfx.display();}
//     if (BassPitchIsActive[46]  == true) {bassgfx = new BassGFX (BassPitchX[46 ], BassVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  BassVelocityAlpha[46] , BassNoteColor[46] ); bassgfx.display();}
//     if (BassPitchIsActive[47]  == true) {bassgfx = new BassGFX (BassPitchX[47 ], BassVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  BassVelocityAlpha[47] , BassNoteColor[47] ); bassgfx.display();}
//     if (BassPitchIsActive[48]  == true) {bassgfx = new BassGFX (BassPitchX[48 ], BassVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  BassVelocityAlpha[48] , BassNoteColor[48] ); bassgfx.display();}
//     if (BassPitchIsActive[49]  == true) {bassgfx = new BassGFX (BassPitchX[49 ], BassVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  BassVelocityAlpha[49] , BassNoteColor[49] ); bassgfx.display();}
//     if (BassPitchIsActive[50]  == true) {bassgfx = new BassGFX (BassPitchX[50 ], BassVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  BassVelocityAlpha[50] , BassNoteColor[50] ); bassgfx.display();}
//     if (BassPitchIsActive[51]  == true) {bassgfx = new BassGFX (BassPitchX[51 ], BassVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  BassVelocityAlpha[51] , BassNoteColor[51] ); bassgfx.display();}
//     if (BassPitchIsActive[52]  == true) {bassgfx = new BassGFX (BassPitchX[52 ], BassVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  BassVelocityAlpha[52] , BassNoteColor[52] ); bassgfx.display();}
//     if (BassPitchIsActive[53]  == true) {bassgfx = new BassGFX (BassPitchX[53 ], BassVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  BassVelocityAlpha[53] , BassNoteColor[53] ); bassgfx.display();}
//     if (BassPitchIsActive[54]  == true) {bassgfx = new BassGFX (BassPitchX[54 ], BassVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  BassVelocityAlpha[54] , BassNoteColor[54] ); bassgfx.display();}
//     if (BassPitchIsActive[55]  == true) {bassgfx = new BassGFX (BassPitchX[55 ], BassVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  BassVelocityAlpha[55] , BassNoteColor[55] ); bassgfx.display();}
//     if (BassPitchIsActive[56]  == true) {bassgfx = new BassGFX (BassPitchX[56 ], BassVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  BassVelocityAlpha[56] , BassNoteColor[56] ); bassgfx.display();}
//     if (BassPitchIsActive[57]  == true) {bassgfx = new BassGFX (BassPitchX[57 ], BassVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  BassVelocityAlpha[57] , BassNoteColor[57] ); bassgfx.display();}
//     if (BassPitchIsActive[58]  == true) {bassgfx = new BassGFX (BassPitchX[58 ], BassVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  BassVelocityAlpha[58] , BassNoteColor[58] ); bassgfx.display();}
//     if (BassPitchIsActive[59]  == true) {bassgfx = new BassGFX (BassPitchX[59 ], BassVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  BassVelocityAlpha[59] , BassNoteColor[59] ); bassgfx.display();}
//     if (BassPitchIsActive[60]  == true) {bassgfx = new BassGFX (BassPitchX[60 ], BassVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  BassVelocityAlpha[60] , BassNoteColor[60] ); bassgfx.display();}
//     if (BassPitchIsActive[61]  == true) {bassgfx = new BassGFX (BassPitchX[61 ], BassVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  BassVelocityAlpha[61] , BassNoteColor[61] ); bassgfx.display();}
//     if (BassPitchIsActive[62]  == true) {bassgfx = new BassGFX (BassPitchX[62 ], BassVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  BassVelocityAlpha[62] , BassNoteColor[62] ); bassgfx.display();}
//     if (BassPitchIsActive[63]  == true) {bassgfx = new BassGFX (BassPitchX[63 ], BassVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  BassVelocityAlpha[63] , BassNoteColor[63] ); bassgfx.display();}
//     if (BassPitchIsActive[64]  == true) {bassgfx = new BassGFX (BassPitchX[64 ], BassVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  BassVelocityAlpha[64] , BassNoteColor[64] ); bassgfx.display();}
//     if (BassPitchIsActive[65]  == true) {bassgfx = new BassGFX (BassPitchX[65 ], BassVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  BassVelocityAlpha[65] , BassNoteColor[65] ); bassgfx.display();}
//     if (BassPitchIsActive[66]  == true) {bassgfx = new BassGFX (BassPitchX[66 ], BassVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  BassVelocityAlpha[66] , BassNoteColor[66] ); bassgfx.display();}
//     if (BassPitchIsActive[67]  == true) {bassgfx = new BassGFX (BassPitchX[67 ], BassVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  BassVelocityAlpha[67] , BassNoteColor[67] ); bassgfx.display();}
//     if (BassPitchIsActive[68]  == true) {bassgfx = new BassGFX (BassPitchX[68 ], BassVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  BassVelocityAlpha[68] , BassNoteColor[68] ); bassgfx.display();}
//     if (BassPitchIsActive[69]  == true) {bassgfx = new BassGFX (BassPitchX[69 ], BassVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  BassVelocityAlpha[69] , BassNoteColor[69] ); bassgfx.display();}
//     if (BassPitchIsActive[70]  == true) {bassgfx = new BassGFX (BassPitchX[70 ], BassVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  BassVelocityAlpha[70] , BassNoteColor[70] ); bassgfx.display();}
//     if (BassPitchIsActive[71]  == true) {bassgfx = new BassGFX (BassPitchX[71 ], BassVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  BassVelocityAlpha[71] , BassNoteColor[71] ); bassgfx.display();}
//     if (BassPitchIsActive[72]  == true) {bassgfx = new BassGFX (BassPitchX[72 ], BassVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  BassVelocityAlpha[72] , BassNoteColor[72] ); bassgfx.display();}
//     if (BassPitchIsActive[73]  == true) {bassgfx = new BassGFX (BassPitchX[73 ], BassVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  BassVelocityAlpha[73] , BassNoteColor[73] ); bassgfx.display();}
//     if (BassPitchIsActive[74]  == true) {bassgfx = new BassGFX (BassPitchX[74 ], BassVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  BassVelocityAlpha[74] , BassNoteColor[74] ); bassgfx.display();}
//     if (BassPitchIsActive[75]  == true) {bassgfx = new BassGFX (BassPitchX[75 ], BassVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  BassVelocityAlpha[75] , BassNoteColor[75] ); bassgfx.display();}
//     if (BassPitchIsActive[76]  == true) {bassgfx = new BassGFX (BassPitchX[76 ], BassVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  BassVelocityAlpha[76] , BassNoteColor[76] ); bassgfx.display();}
//     if (BassPitchIsActive[77]  == true) {bassgfx = new BassGFX (BassPitchX[77 ], BassVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  BassVelocityAlpha[77] , BassNoteColor[77] ); bassgfx.display();}
//     if (BassPitchIsActive[78]  == true) {bassgfx = new BassGFX (BassPitchX[78 ], BassVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  BassVelocityAlpha[78] , BassNoteColor[78] ); bassgfx.display();}
//     if (BassPitchIsActive[79]  == true) {bassgfx = new BassGFX (BassPitchX[79 ], BassVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  BassVelocityAlpha[79] , BassNoteColor[79] ); bassgfx.display();}
//     if (BassPitchIsActive[80]  == true) {bassgfx = new BassGFX (BassPitchX[80 ], BassVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  BassVelocityAlpha[80] , BassNoteColor[80] ); bassgfx.display();}
//     if (BassPitchIsActive[81]  == true) {bassgfx = new BassGFX (BassPitchX[81 ], BassVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  BassVelocityAlpha[81] , BassNoteColor[81] ); bassgfx.display();}
//     if (BassPitchIsActive[82]  == true) {bassgfx = new BassGFX (BassPitchX[82 ], BassVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  BassVelocityAlpha[82] , BassNoteColor[82] ); bassgfx.display();}
//     if (BassPitchIsActive[83]  == true) {bassgfx = new BassGFX (BassPitchX[83 ], BassVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  BassVelocityAlpha[83] , BassNoteColor[83] ); bassgfx.display();}
//     if (BassPitchIsActive[84]  == true) {bassgfx = new BassGFX (BassPitchX[84 ], BassVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  BassVelocityAlpha[84] , BassNoteColor[84] ); bassgfx.display();}
//     if (BassPitchIsActive[85]  == true) {bassgfx = new BassGFX (BassPitchX[85 ], BassVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  BassVelocityAlpha[85] , BassNoteColor[85] ); bassgfx.display();}
//     if (BassPitchIsActive[86]  == true) {bassgfx = new BassGFX (BassPitchX[86 ], BassVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  BassVelocityAlpha[86] , BassNoteColor[86] ); bassgfx.display();}
//     if (BassPitchIsActive[87]  == true) {bassgfx = new BassGFX (BassPitchX[87 ], BassVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  BassVelocityAlpha[87] , BassNoteColor[87] ); bassgfx.display();}
//     if (BassPitchIsActive[88]  == true) {bassgfx = new BassGFX (BassPitchX[88 ], BassVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  BassVelocityAlpha[88] , BassNoteColor[88] ); bassgfx.display();}
//     if (BassPitchIsActive[89]  == true) {bassgfx = new BassGFX (BassPitchX[89 ], BassVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  BassVelocityAlpha[89] , BassNoteColor[89] ); bassgfx.display();}
//     if (BassPitchIsActive[90]  == true) {bassgfx = new BassGFX (BassPitchX[90 ], BassVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  BassVelocityAlpha[90] , BassNoteColor[90] ); bassgfx.display();}
//     if (BassPitchIsActive[91]  == true) {bassgfx = new BassGFX (BassPitchX[91 ], BassVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  BassVelocityAlpha[91] , BassNoteColor[91] ); bassgfx.display();}
//     if (BassPitchIsActive[92]  == true) {bassgfx = new BassGFX (BassPitchX[92 ], BassVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  BassVelocityAlpha[92] , BassNoteColor[92] ); bassgfx.display();}
//     if (BassPitchIsActive[93]  == true) {bassgfx = new BassGFX (BassPitchX[93 ], BassVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  BassVelocityAlpha[93] , BassNoteColor[93] ); bassgfx.display();}
//     if (BassPitchIsActive[94]  == true) {bassgfx = new BassGFX (BassPitchX[94 ], BassVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  BassVelocityAlpha[94] , BassNoteColor[94] ); bassgfx.display();}
//     if (BassPitchIsActive[95]  == true) {bassgfx = new BassGFX (BassPitchX[95 ], BassVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  BassVelocityAlpha[95] , BassNoteColor[95] ); bassgfx.display();}
//     if (BassPitchIsActive[96]  == true) {bassgfx = new BassGFX (BassPitchX[96 ], BassVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  BassVelocityAlpha[96] , BassNoteColor[96] ); bassgfx.display();}
//     if (BassPitchIsActive[97]  == true) {bassgfx = new BassGFX (BassPitchX[97 ], BassVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  BassVelocityAlpha[97] , BassNoteColor[97] ); bassgfx.display();}
//     if (BassPitchIsActive[98]  == true) {bassgfx = new BassGFX (BassPitchX[98 ], BassVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  BassVelocityAlpha[98] , BassNoteColor[98] ); bassgfx.display();}
//     if (BassPitchIsActive[99]  == true) {bassgfx = new BassGFX (BassPitchX[99 ], BassVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  BassVelocityAlpha[99] , BassNoteColor[99] ); bassgfx.display();}
//     if (BassPitchIsActive[100] == true) {bassgfx = new BassGFX (BassPitchX[100], BassVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  BassVelocityAlpha[100], BassNoteColor[100]); bassgfx.display();}
//     if (BassPitchIsActive[101] == true) {bassgfx = new BassGFX (BassPitchX[101], BassVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  BassVelocityAlpha[101], BassNoteColor[101]); bassgfx.display();}
//     if (BassPitchIsActive[102] == true) {bassgfx = new BassGFX (BassPitchX[102], BassVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  BassVelocityAlpha[102], BassNoteColor[102]); bassgfx.display();}
//     if (BassPitchIsActive[103] == true) {bassgfx = new BassGFX (BassPitchX[103], BassVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  BassVelocityAlpha[103], BassNoteColor[103]); bassgfx.display();}
//     if (BassPitchIsActive[104] == true) {bassgfx = new BassGFX (BassPitchX[104], BassVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  BassVelocityAlpha[104], BassNoteColor[104]); bassgfx.display();}
//     if (BassPitchIsActive[105] == true) {bassgfx = new BassGFX (BassPitchX[105], BassVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  BassVelocityAlpha[105], BassNoteColor[105]); bassgfx.display();}
//     if (BassPitchIsActive[106] == true) {bassgfx = new BassGFX (BassPitchX[106], BassVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  BassVelocityAlpha[106], BassNoteColor[106]); bassgfx.display();}
//     if (BassPitchIsActive[107] == true) {bassgfx = new BassGFX (BassPitchX[107], BassVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  BassVelocityAlpha[107], BassNoteColor[107]); bassgfx.display();}
//     if (BassPitchIsActive[108] == true) {bassgfx = new BassGFX (BassPitchX[108], BassVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  BassVelocityAlpha[108], BassNoteColor[108]); bassgfx.display();}
//     if (BassPitchIsActive[109] == true) {bassgfx = new BassGFX (BassPitchX[109], BassVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  BassVelocityAlpha[109], BassNoteColor[109]); bassgfx.display();}
//     if (BassPitchIsActive[110] == true) {bassgfx = new BassGFX (BassPitchX[110], BassVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  BassVelocityAlpha[110], BassNoteColor[110]); bassgfx.display();}
//     if (BassPitchIsActive[111] == true) {bassgfx = new BassGFX (BassPitchX[111], BassVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  BassVelocityAlpha[111], BassNoteColor[111]); bassgfx.display();}
//     if (BassPitchIsActive[112] == true) {bassgfx = new BassGFX (BassPitchX[112], BassVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  BassVelocityAlpha[112], BassNoteColor[112]); bassgfx.display();}
//     if (BassPitchIsActive[113] == true) {bassgfx = new BassGFX (BassPitchX[113], BassVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  BassVelocityAlpha[113], BassNoteColor[113]); bassgfx.display();}
//     if (BassPitchIsActive[114] == true) {bassgfx = new BassGFX (BassPitchX[114], BassVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  BassVelocityAlpha[114], BassNoteColor[114]); bassgfx.display();}
//     if (BassPitchIsActive[115] == true) {bassgfx = new BassGFX (BassPitchX[115], BassVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  BassVelocityAlpha[115], BassNoteColor[115]); bassgfx.display();}
//     if (BassPitchIsActive[116] == true) {bassgfx = new BassGFX (BassPitchX[116], BassVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  BassVelocityAlpha[116], BassNoteColor[116]); bassgfx.display();}
//     if (BassPitchIsActive[117] == true) {bassgfx = new BassGFX (BassPitchX[117], BassVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  BassVelocityAlpha[117], BassNoteColor[117]); bassgfx.display();}
//     if (BassPitchIsActive[118] == true) {bassgfx = new BassGFX (BassPitchX[118], BassVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  BassVelocityAlpha[118], BassNoteColor[118]); bassgfx.display();}
//     if (BassPitchIsActive[119] == true) {bassgfx = new BassGFX (BassPitchX[119], BassVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  BassVelocityAlpha[119], BassNoteColor[119]); bassgfx.display();}
//     if (BassPitchIsActive[120] == true) {bassgfx = new BassGFX (BassPitchX[120], BassVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], BassVelocityAlpha[120], BassNoteColor[120]); bassgfx.display();}
//     if (BassPitchIsActive[121] == true) {bassgfx = new BassGFX (BassPitchX[121], BassVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], BassVelocityAlpha[121], BassNoteColor[121]); bassgfx.display();}
//     if (BassPitchIsActive[122] == true) {bassgfx = new BassGFX (BassPitchX[122], BassVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], BassVelocityAlpha[122], BassNoteColor[122]); bassgfx.display();}
//     if (BassPitchIsActive[123] == true) {bassgfx = new BassGFX (BassPitchX[123], BassVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], BassVelocityAlpha[123], BassNoteColor[123]); bassgfx.display();}
//     if (BassPitchIsActive[124] == true) {bassgfx = new BassGFX (BassPitchX[124], BassVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], BassVelocityAlpha[124], BassNoteColor[124]); bassgfx.display();}
//     if (BassPitchIsActive[125] == true) {bassgfx = new BassGFX (BassPitchX[125], BassVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], BassVelocityAlpha[125], BassNoteColor[125]); bassgfx.display();}
//     if (BassPitchIsActive[126] == true) {bassgfx = new BassGFX (BassPitchX[126], BassVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], BassVelocityAlpha[126], BassNoteColor[126]); bassgfx.display();}
//     if (BassPitchIsActive[127] == true) {bassgfx = new BassGFX (BassPitchX[127], BassVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], BassVelocityAlpha[127], BassNoteColor[127]); bassgfx.display();}
//   }
// }

// void StringsGFXDisplay(){//Strings
//   if (ChannelIsActive[5] == true) {// Strings Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
//     if (StringsPitchIsActive[0]   == true) {stringsgfx = new StringsGFX (StringsPitchX[0  ], StringsVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  StringsVelocityAlpha[0]  , StringsNoteColor[0]  ); stringsgfx.display();}
//     if (StringsPitchIsActive[1]   == true) {stringsgfx = new StringsGFX (StringsPitchX[1  ], StringsVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  StringsVelocityAlpha[1]  , StringsNoteColor[1]  ); stringsgfx.display();}
//     if (StringsPitchIsActive[2]   == true) {stringsgfx = new StringsGFX (StringsPitchX[2  ], StringsVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  StringsVelocityAlpha[2]  , StringsNoteColor[2]  ); stringsgfx.display();}
//     if (StringsPitchIsActive[3]   == true) {stringsgfx = new StringsGFX (StringsPitchX[3  ], StringsVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  StringsVelocityAlpha[3]  , StringsNoteColor[3]  ); stringsgfx.display();}
//     if (StringsPitchIsActive[4]   == true) {stringsgfx = new StringsGFX (StringsPitchX[4  ], StringsVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  StringsVelocityAlpha[4]  , StringsNoteColor[4]  ); stringsgfx.display();}
//     if (StringsPitchIsActive[5]   == true) {stringsgfx = new StringsGFX (StringsPitchX[5  ], StringsVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  StringsVelocityAlpha[5]  , StringsNoteColor[5]  ); stringsgfx.display();}
//     if (StringsPitchIsActive[6]   == true) {stringsgfx = new StringsGFX (StringsPitchX[6  ], StringsVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  StringsVelocityAlpha[6]  , StringsNoteColor[6]  ); stringsgfx.display();}
//     if (StringsPitchIsActive[7]   == true) {stringsgfx = new StringsGFX (StringsPitchX[7  ], StringsVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  StringsVelocityAlpha[7]  , StringsNoteColor[7]  ); stringsgfx.display();}
//     if (StringsPitchIsActive[8]   == true) {stringsgfx = new StringsGFX (StringsPitchX[8  ], StringsVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  StringsVelocityAlpha[8]  , StringsNoteColor[8]  ); stringsgfx.display();}
//     if (StringsPitchIsActive[9]   == true) {stringsgfx = new StringsGFX (StringsPitchX[9  ], StringsVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  StringsVelocityAlpha[9]  , StringsNoteColor[9]  ); stringsgfx.display();}
//     if (StringsPitchIsActive[10]  == true) {stringsgfx = new StringsGFX (StringsPitchX[10 ], StringsVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  StringsVelocityAlpha[10] , StringsNoteColor[10] ); stringsgfx.display();}
//     if (StringsPitchIsActive[11]  == true) {stringsgfx = new StringsGFX (StringsPitchX[11 ], StringsVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  StringsVelocityAlpha[11] , StringsNoteColor[11] ); stringsgfx.display();}
//     if (StringsPitchIsActive[12]  == true) {stringsgfx = new StringsGFX (StringsPitchX[12 ], StringsVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  StringsVelocityAlpha[12] , StringsNoteColor[12] ); stringsgfx.display();}
//     if (StringsPitchIsActive[13]  == true) {stringsgfx = new StringsGFX (StringsPitchX[13 ], StringsVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  StringsVelocityAlpha[13] , StringsNoteColor[13] ); stringsgfx.display();}
//     if (StringsPitchIsActive[14]  == true) {stringsgfx = new StringsGFX (StringsPitchX[14 ], StringsVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  StringsVelocityAlpha[14] , StringsNoteColor[14] ); stringsgfx.display();}
//     if (StringsPitchIsActive[15]  == true) {stringsgfx = new StringsGFX (StringsPitchX[15 ], StringsVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  StringsVelocityAlpha[15] , StringsNoteColor[15] ); stringsgfx.display();}
//     if (StringsPitchIsActive[16]  == true) {stringsgfx = new StringsGFX (StringsPitchX[16 ], StringsVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  StringsVelocityAlpha[16] , StringsNoteColor[16] ); stringsgfx.display();}
//     if (StringsPitchIsActive[17]  == true) {stringsgfx = new StringsGFX (StringsPitchX[17 ], StringsVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  StringsVelocityAlpha[17] , StringsNoteColor[17] ); stringsgfx.display();}
//     if (StringsPitchIsActive[18]  == true) {stringsgfx = new StringsGFX (StringsPitchX[18 ], StringsVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  StringsVelocityAlpha[18] , StringsNoteColor[18] ); stringsgfx.display();}
//     if (StringsPitchIsActive[19]  == true) {stringsgfx = new StringsGFX (StringsPitchX[19 ], StringsVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  StringsVelocityAlpha[19] , StringsNoteColor[19] ); stringsgfx.display();}
//     if (StringsPitchIsActive[20]  == true) {stringsgfx = new StringsGFX (StringsPitchX[20 ], StringsVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  StringsVelocityAlpha[20] , StringsNoteColor[20] ); stringsgfx.display();}
//     if (StringsPitchIsActive[21]  == true) {stringsgfx = new StringsGFX (StringsPitchX[21 ], StringsVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  StringsVelocityAlpha[21] , StringsNoteColor[21] ); stringsgfx.display();}
//     if (StringsPitchIsActive[22]  == true) {stringsgfx = new StringsGFX (StringsPitchX[22 ], StringsVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  StringsVelocityAlpha[22] , StringsNoteColor[22] ); stringsgfx.display();}
//     if (StringsPitchIsActive[23]  == true) {stringsgfx = new StringsGFX (StringsPitchX[23 ], StringsVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  StringsVelocityAlpha[23] , StringsNoteColor[23] ); stringsgfx.display();}
//     if (StringsPitchIsActive[24]  == true) {stringsgfx = new StringsGFX (StringsPitchX[24 ], StringsVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  StringsVelocityAlpha[24] , StringsNoteColor[24] ); stringsgfx.display();}
//     if (StringsPitchIsActive[25]  == true) {stringsgfx = new StringsGFX (StringsPitchX[25 ], StringsVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  StringsVelocityAlpha[25] , StringsNoteColor[25] ); stringsgfx.display();}
//     if (StringsPitchIsActive[26]  == true) {stringsgfx = new StringsGFX (StringsPitchX[26 ], StringsVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  StringsVelocityAlpha[26] , StringsNoteColor[26] ); stringsgfx.display();}
//     if (StringsPitchIsActive[27]  == true) {stringsgfx = new StringsGFX (StringsPitchX[27 ], StringsVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  StringsVelocityAlpha[27] , StringsNoteColor[27] ); stringsgfx.display();}
//     if (StringsPitchIsActive[28]  == true) {stringsgfx = new StringsGFX (StringsPitchX[28 ], StringsVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  StringsVelocityAlpha[28] , StringsNoteColor[28] ); stringsgfx.display();}
//     if (StringsPitchIsActive[29]  == true) {stringsgfx = new StringsGFX (StringsPitchX[29 ], StringsVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  StringsVelocityAlpha[29] , StringsNoteColor[29] ); stringsgfx.display();}
//     if (StringsPitchIsActive[30]  == true) {stringsgfx = new StringsGFX (StringsPitchX[30 ], StringsVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  StringsVelocityAlpha[30] , StringsNoteColor[30] ); stringsgfx.display();}
//     if (StringsPitchIsActive[31]  == true) {stringsgfx = new StringsGFX (StringsPitchX[31 ], StringsVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  StringsVelocityAlpha[31] , StringsNoteColor[31] ); stringsgfx.display();}
//     if (StringsPitchIsActive[32]  == true) {stringsgfx = new StringsGFX (StringsPitchX[32 ], StringsVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  StringsVelocityAlpha[32] , StringsNoteColor[32] ); stringsgfx.display();}
//     if (StringsPitchIsActive[33]  == true) {stringsgfx = new StringsGFX (StringsPitchX[33 ], StringsVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  StringsVelocityAlpha[33] , StringsNoteColor[33] ); stringsgfx.display();}
//     if (StringsPitchIsActive[34]  == true) {stringsgfx = new StringsGFX (StringsPitchX[34 ], StringsVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  StringsVelocityAlpha[34] , StringsNoteColor[34] ); stringsgfx.display();}
//     if (StringsPitchIsActive[35]  == true) {stringsgfx = new StringsGFX (StringsPitchX[35 ], StringsVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  StringsVelocityAlpha[35] , StringsNoteColor[35] ); stringsgfx.display();}
//     if (StringsPitchIsActive[36]  == true) {stringsgfx = new StringsGFX (StringsPitchX[36 ], StringsVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  StringsVelocityAlpha[36] , StringsNoteColor[36] ); stringsgfx.display();}
//     if (StringsPitchIsActive[37]  == true) {stringsgfx = new StringsGFX (StringsPitchX[37 ], StringsVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  StringsVelocityAlpha[37] , StringsNoteColor[37] ); stringsgfx.display();}
//     if (StringsPitchIsActive[38]  == true) {stringsgfx = new StringsGFX (StringsPitchX[38 ], StringsVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  StringsVelocityAlpha[38] , StringsNoteColor[38] ); stringsgfx.display();}
//     if (StringsPitchIsActive[39]  == true) {stringsgfx = new StringsGFX (StringsPitchX[39 ], StringsVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  StringsVelocityAlpha[39] , StringsNoteColor[39] ); stringsgfx.display();}
//     if (StringsPitchIsActive[40]  == true) {stringsgfx = new StringsGFX (StringsPitchX[40 ], StringsVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  StringsVelocityAlpha[40] , StringsNoteColor[40] ); stringsgfx.display();}
//     if (StringsPitchIsActive[41]  == true) {stringsgfx = new StringsGFX (StringsPitchX[41 ], StringsVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  StringsVelocityAlpha[41] , StringsNoteColor[41] ); stringsgfx.display();}
//     if (StringsPitchIsActive[42]  == true) {stringsgfx = new StringsGFX (StringsPitchX[42 ], StringsVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  StringsVelocityAlpha[42] , StringsNoteColor[42] ); stringsgfx.display();}
//     if (StringsPitchIsActive[43]  == true) {stringsgfx = new StringsGFX (StringsPitchX[43 ], StringsVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  StringsVelocityAlpha[43] , StringsNoteColor[43] ); stringsgfx.display();}
//     if (StringsPitchIsActive[44]  == true) {stringsgfx = new StringsGFX (StringsPitchX[44 ], StringsVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  StringsVelocityAlpha[44] , StringsNoteColor[44] ); stringsgfx.display();}
//     if (StringsPitchIsActive[45]  == true) {stringsgfx = new StringsGFX (StringsPitchX[45 ], StringsVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  StringsVelocityAlpha[45] , StringsNoteColor[45] ); stringsgfx.display();}
//     if (StringsPitchIsActive[46]  == true) {stringsgfx = new StringsGFX (StringsPitchX[46 ], StringsVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  StringsVelocityAlpha[46] , StringsNoteColor[46] ); stringsgfx.display();}
//     if (StringsPitchIsActive[47]  == true) {stringsgfx = new StringsGFX (StringsPitchX[47 ], StringsVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  StringsVelocityAlpha[47] , StringsNoteColor[47] ); stringsgfx.display();}
//     if (StringsPitchIsActive[48]  == true) {stringsgfx = new StringsGFX (StringsPitchX[48 ], StringsVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  StringsVelocityAlpha[48] , StringsNoteColor[48] ); stringsgfx.display();}
//     if (StringsPitchIsActive[49]  == true) {stringsgfx = new StringsGFX (StringsPitchX[49 ], StringsVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  StringsVelocityAlpha[49] , StringsNoteColor[49] ); stringsgfx.display();}
//     if (StringsPitchIsActive[50]  == true) {stringsgfx = new StringsGFX (StringsPitchX[50 ], StringsVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  StringsVelocityAlpha[50] , StringsNoteColor[50] ); stringsgfx.display();}
//     if (StringsPitchIsActive[51]  == true) {stringsgfx = new StringsGFX (StringsPitchX[51 ], StringsVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  StringsVelocityAlpha[51] , StringsNoteColor[51] ); stringsgfx.display();}
//     if (StringsPitchIsActive[52]  == true) {stringsgfx = new StringsGFX (StringsPitchX[52 ], StringsVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  StringsVelocityAlpha[52] , StringsNoteColor[52] ); stringsgfx.display();}
//     if (StringsPitchIsActive[53]  == true) {stringsgfx = new StringsGFX (StringsPitchX[53 ], StringsVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  StringsVelocityAlpha[53] , StringsNoteColor[53] ); stringsgfx.display();}
//     if (StringsPitchIsActive[54]  == true) {stringsgfx = new StringsGFX (StringsPitchX[54 ], StringsVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  StringsVelocityAlpha[54] , StringsNoteColor[54] ); stringsgfx.display();}
//     if (StringsPitchIsActive[55]  == true) {stringsgfx = new StringsGFX (StringsPitchX[55 ], StringsVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  StringsVelocityAlpha[55] , StringsNoteColor[55] ); stringsgfx.display();}
//     if (StringsPitchIsActive[56]  == true) {stringsgfx = new StringsGFX (StringsPitchX[56 ], StringsVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  StringsVelocityAlpha[56] , StringsNoteColor[56] ); stringsgfx.display();}
//     if (StringsPitchIsActive[57]  == true) {stringsgfx = new StringsGFX (StringsPitchX[57 ], StringsVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  StringsVelocityAlpha[57] , StringsNoteColor[57] ); stringsgfx.display();}
//     if (StringsPitchIsActive[58]  == true) {stringsgfx = new StringsGFX (StringsPitchX[58 ], StringsVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  StringsVelocityAlpha[58] , StringsNoteColor[58] ); stringsgfx.display();}
//     if (StringsPitchIsActive[59]  == true) {stringsgfx = new StringsGFX (StringsPitchX[59 ], StringsVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  StringsVelocityAlpha[59] , StringsNoteColor[59] ); stringsgfx.display();}
//     if (StringsPitchIsActive[60]  == true) {stringsgfx = new StringsGFX (StringsPitchX[60 ], StringsVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  StringsVelocityAlpha[60] , StringsNoteColor[60] ); stringsgfx.display();}
//     if (StringsPitchIsActive[61]  == true) {stringsgfx = new StringsGFX (StringsPitchX[61 ], StringsVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  StringsVelocityAlpha[61] , StringsNoteColor[61] ); stringsgfx.display();}
//     if (StringsPitchIsActive[62]  == true) {stringsgfx = new StringsGFX (StringsPitchX[62 ], StringsVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  StringsVelocityAlpha[62] , StringsNoteColor[62] ); stringsgfx.display();}
//     if (StringsPitchIsActive[63]  == true) {stringsgfx = new StringsGFX (StringsPitchX[63 ], StringsVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  StringsVelocityAlpha[63] , StringsNoteColor[63] ); stringsgfx.display();}
//     if (StringsPitchIsActive[64]  == true) {stringsgfx = new StringsGFX (StringsPitchX[64 ], StringsVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  StringsVelocityAlpha[64] , StringsNoteColor[64] ); stringsgfx.display();}
//     if (StringsPitchIsActive[65]  == true) {stringsgfx = new StringsGFX (StringsPitchX[65 ], StringsVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  StringsVelocityAlpha[65] , StringsNoteColor[65] ); stringsgfx.display();}
//     if (StringsPitchIsActive[66]  == true) {stringsgfx = new StringsGFX (StringsPitchX[66 ], StringsVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  StringsVelocityAlpha[66] , StringsNoteColor[66] ); stringsgfx.display();}
//     if (StringsPitchIsActive[67]  == true) {stringsgfx = new StringsGFX (StringsPitchX[67 ], StringsVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  StringsVelocityAlpha[67] , StringsNoteColor[67] ); stringsgfx.display();}
//     if (StringsPitchIsActive[68]  == true) {stringsgfx = new StringsGFX (StringsPitchX[68 ], StringsVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  StringsVelocityAlpha[68] , StringsNoteColor[68] ); stringsgfx.display();}
//     if (StringsPitchIsActive[69]  == true) {stringsgfx = new StringsGFX (StringsPitchX[69 ], StringsVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  StringsVelocityAlpha[69] , StringsNoteColor[69] ); stringsgfx.display();}
//     if (StringsPitchIsActive[70]  == true) {stringsgfx = new StringsGFX (StringsPitchX[70 ], StringsVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  StringsVelocityAlpha[70] , StringsNoteColor[70] ); stringsgfx.display();}
//     if (StringsPitchIsActive[71]  == true) {stringsgfx = new StringsGFX (StringsPitchX[71 ], StringsVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  StringsVelocityAlpha[71] , StringsNoteColor[71] ); stringsgfx.display();}
//     if (StringsPitchIsActive[72]  == true) {stringsgfx = new StringsGFX (StringsPitchX[72 ], StringsVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  StringsVelocityAlpha[72] , StringsNoteColor[72] ); stringsgfx.display();}
//     if (StringsPitchIsActive[73]  == true) {stringsgfx = new StringsGFX (StringsPitchX[73 ], StringsVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  StringsVelocityAlpha[73] , StringsNoteColor[73] ); stringsgfx.display();}
//     if (StringsPitchIsActive[74]  == true) {stringsgfx = new StringsGFX (StringsPitchX[74 ], StringsVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  StringsVelocityAlpha[74] , StringsNoteColor[74] ); stringsgfx.display();}
//     if (StringsPitchIsActive[75]  == true) {stringsgfx = new StringsGFX (StringsPitchX[75 ], StringsVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  StringsVelocityAlpha[75] , StringsNoteColor[75] ); stringsgfx.display();}
//     if (StringsPitchIsActive[76]  == true) {stringsgfx = new StringsGFX (StringsPitchX[76 ], StringsVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  StringsVelocityAlpha[76] , StringsNoteColor[76] ); stringsgfx.display();}
//     if (StringsPitchIsActive[77]  == true) {stringsgfx = new StringsGFX (StringsPitchX[77 ], StringsVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  StringsVelocityAlpha[77] , StringsNoteColor[77] ); stringsgfx.display();}
//     if (StringsPitchIsActive[78]  == true) {stringsgfx = new StringsGFX (StringsPitchX[78 ], StringsVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  StringsVelocityAlpha[78] , StringsNoteColor[78] ); stringsgfx.display();}
//     if (StringsPitchIsActive[79]  == true) {stringsgfx = new StringsGFX (StringsPitchX[79 ], StringsVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  StringsVelocityAlpha[79] , StringsNoteColor[79] ); stringsgfx.display();}
//     if (StringsPitchIsActive[80]  == true) {stringsgfx = new StringsGFX (StringsPitchX[80 ], StringsVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  StringsVelocityAlpha[80] , StringsNoteColor[80] ); stringsgfx.display();}
//     if (StringsPitchIsActive[81]  == true) {stringsgfx = new StringsGFX (StringsPitchX[81 ], StringsVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  StringsVelocityAlpha[81] , StringsNoteColor[81] ); stringsgfx.display();}
//     if (StringsPitchIsActive[82]  == true) {stringsgfx = new StringsGFX (StringsPitchX[82 ], StringsVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  StringsVelocityAlpha[82] , StringsNoteColor[82] ); stringsgfx.display();}
//     if (StringsPitchIsActive[83]  == true) {stringsgfx = new StringsGFX (StringsPitchX[83 ], StringsVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  StringsVelocityAlpha[83] , StringsNoteColor[83] ); stringsgfx.display();}
//     if (StringsPitchIsActive[84]  == true) {stringsgfx = new StringsGFX (StringsPitchX[84 ], StringsVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  StringsVelocityAlpha[84] , StringsNoteColor[84] ); stringsgfx.display();}
//     if (StringsPitchIsActive[85]  == true) {stringsgfx = new StringsGFX (StringsPitchX[85 ], StringsVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  StringsVelocityAlpha[85] , StringsNoteColor[85] ); stringsgfx.display();}
//     if (StringsPitchIsActive[86]  == true) {stringsgfx = new StringsGFX (StringsPitchX[86 ], StringsVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  StringsVelocityAlpha[86] , StringsNoteColor[86] ); stringsgfx.display();}
//     if (StringsPitchIsActive[87]  == true) {stringsgfx = new StringsGFX (StringsPitchX[87 ], StringsVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  StringsVelocityAlpha[87] , StringsNoteColor[87] ); stringsgfx.display();}
//     if (StringsPitchIsActive[88]  == true) {stringsgfx = new StringsGFX (StringsPitchX[88 ], StringsVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  StringsVelocityAlpha[88] , StringsNoteColor[88] ); stringsgfx.display();}
//     if (StringsPitchIsActive[89]  == true) {stringsgfx = new StringsGFX (StringsPitchX[89 ], StringsVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  StringsVelocityAlpha[89] , StringsNoteColor[89] ); stringsgfx.display();}
//     if (StringsPitchIsActive[90]  == true) {stringsgfx = new StringsGFX (StringsPitchX[90 ], StringsVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  StringsVelocityAlpha[90] , StringsNoteColor[90] ); stringsgfx.display();}
//     if (StringsPitchIsActive[91]  == true) {stringsgfx = new StringsGFX (StringsPitchX[91 ], StringsVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  StringsVelocityAlpha[91] , StringsNoteColor[91] ); stringsgfx.display();}
//     if (StringsPitchIsActive[92]  == true) {stringsgfx = new StringsGFX (StringsPitchX[92 ], StringsVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  StringsVelocityAlpha[92] , StringsNoteColor[92] ); stringsgfx.display();}
//     if (StringsPitchIsActive[93]  == true) {stringsgfx = new StringsGFX (StringsPitchX[93 ], StringsVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  StringsVelocityAlpha[93] , StringsNoteColor[93] ); stringsgfx.display();}
//     if (StringsPitchIsActive[94]  == true) {stringsgfx = new StringsGFX (StringsPitchX[94 ], StringsVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  StringsVelocityAlpha[94] , StringsNoteColor[94] ); stringsgfx.display();}
//     if (StringsPitchIsActive[95]  == true) {stringsgfx = new StringsGFX (StringsPitchX[95 ], StringsVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  StringsVelocityAlpha[95] , StringsNoteColor[95] ); stringsgfx.display();}
//     if (StringsPitchIsActive[96]  == true) {stringsgfx = new StringsGFX (StringsPitchX[96 ], StringsVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  StringsVelocityAlpha[96] , StringsNoteColor[96] ); stringsgfx.display();}
//     if (StringsPitchIsActive[97]  == true) {stringsgfx = new StringsGFX (StringsPitchX[97 ], StringsVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  StringsVelocityAlpha[97] , StringsNoteColor[97] ); stringsgfx.display();}
//     if (StringsPitchIsActive[98]  == true) {stringsgfx = new StringsGFX (StringsPitchX[98 ], StringsVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  StringsVelocityAlpha[98] , StringsNoteColor[98] ); stringsgfx.display();}
//     if (StringsPitchIsActive[99]  == true) {stringsgfx = new StringsGFX (StringsPitchX[99 ], StringsVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  StringsVelocityAlpha[99] , StringsNoteColor[99] ); stringsgfx.display();}
//     if (StringsPitchIsActive[100] == true) {stringsgfx = new StringsGFX (StringsPitchX[100], StringsVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  StringsVelocityAlpha[100], StringsNoteColor[100]); stringsgfx.display();}
//     if (StringsPitchIsActive[101] == true) {stringsgfx = new StringsGFX (StringsPitchX[101], StringsVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  StringsVelocityAlpha[101], StringsNoteColor[101]); stringsgfx.display();}
//     if (StringsPitchIsActive[102] == true) {stringsgfx = new StringsGFX (StringsPitchX[102], StringsVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  StringsVelocityAlpha[102], StringsNoteColor[102]); stringsgfx.display();}
//     if (StringsPitchIsActive[103] == true) {stringsgfx = new StringsGFX (StringsPitchX[103], StringsVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  StringsVelocityAlpha[103], StringsNoteColor[103]); stringsgfx.display();}
//     if (StringsPitchIsActive[104] == true) {stringsgfx = new StringsGFX (StringsPitchX[104], StringsVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  StringsVelocityAlpha[104], StringsNoteColor[104]); stringsgfx.display();}
//     if (StringsPitchIsActive[105] == true) {stringsgfx = new StringsGFX (StringsPitchX[105], StringsVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  StringsVelocityAlpha[105], StringsNoteColor[105]); stringsgfx.display();}
//     if (StringsPitchIsActive[106] == true) {stringsgfx = new StringsGFX (StringsPitchX[106], StringsVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  StringsVelocityAlpha[106], StringsNoteColor[106]); stringsgfx.display();}
//     if (StringsPitchIsActive[107] == true) {stringsgfx = new StringsGFX (StringsPitchX[107], StringsVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  StringsVelocityAlpha[107], StringsNoteColor[107]); stringsgfx.display();}
//     if (StringsPitchIsActive[108] == true) {stringsgfx = new StringsGFX (StringsPitchX[108], StringsVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  StringsVelocityAlpha[108], StringsNoteColor[108]); stringsgfx.display();}
//     if (StringsPitchIsActive[109] == true) {stringsgfx = new StringsGFX (StringsPitchX[109], StringsVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  StringsVelocityAlpha[109], StringsNoteColor[109]); stringsgfx.display();}
//     if (StringsPitchIsActive[110] == true) {stringsgfx = new StringsGFX (StringsPitchX[110], StringsVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  StringsVelocityAlpha[110], StringsNoteColor[110]); stringsgfx.display();}
//     if (StringsPitchIsActive[111] == true) {stringsgfx = new StringsGFX (StringsPitchX[111], StringsVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  StringsVelocityAlpha[111], StringsNoteColor[111]); stringsgfx.display();}
//     if (StringsPitchIsActive[112] == true) {stringsgfx = new StringsGFX (StringsPitchX[112], StringsVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  StringsVelocityAlpha[112], StringsNoteColor[112]); stringsgfx.display();}
//     if (StringsPitchIsActive[113] == true) {stringsgfx = new StringsGFX (StringsPitchX[113], StringsVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  StringsVelocityAlpha[113], StringsNoteColor[113]); stringsgfx.display();}
//     if (StringsPitchIsActive[114] == true) {stringsgfx = new StringsGFX (StringsPitchX[114], StringsVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  StringsVelocityAlpha[114], StringsNoteColor[114]); stringsgfx.display();}
//     if (StringsPitchIsActive[115] == true) {stringsgfx = new StringsGFX (StringsPitchX[115], StringsVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  StringsVelocityAlpha[115], StringsNoteColor[115]); stringsgfx.display();}
//     if (StringsPitchIsActive[116] == true) {stringsgfx = new StringsGFX (StringsPitchX[116], StringsVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  StringsVelocityAlpha[116], StringsNoteColor[116]); stringsgfx.display();}
//     if (StringsPitchIsActive[117] == true) {stringsgfx = new StringsGFX (StringsPitchX[117], StringsVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  StringsVelocityAlpha[117], StringsNoteColor[117]); stringsgfx.display();}
//     if (StringsPitchIsActive[118] == true) {stringsgfx = new StringsGFX (StringsPitchX[118], StringsVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  StringsVelocityAlpha[118], StringsNoteColor[118]); stringsgfx.display();}
//     if (StringsPitchIsActive[119] == true) {stringsgfx = new StringsGFX (StringsPitchX[119], StringsVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  StringsVelocityAlpha[119], StringsNoteColor[119]); stringsgfx.display();}
//     if (StringsPitchIsActive[120] == true) {stringsgfx = new StringsGFX (StringsPitchX[120], StringsVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], StringsVelocityAlpha[120], StringsNoteColor[120]); stringsgfx.display();}
//     if (StringsPitchIsActive[121] == true) {stringsgfx = new StringsGFX (StringsPitchX[121], StringsVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], StringsVelocityAlpha[121], StringsNoteColor[121]); stringsgfx.display();}
//     if (StringsPitchIsActive[122] == true) {stringsgfx = new StringsGFX (StringsPitchX[122], StringsVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], StringsVelocityAlpha[122], StringsNoteColor[122]); stringsgfx.display();}
//     if (StringsPitchIsActive[123] == true) {stringsgfx = new StringsGFX (StringsPitchX[123], StringsVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], StringsVelocityAlpha[123], StringsNoteColor[123]); stringsgfx.display();}
//     if (StringsPitchIsActive[124] == true) {stringsgfx = new StringsGFX (StringsPitchX[124], StringsVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], StringsVelocityAlpha[124], StringsNoteColor[124]); stringsgfx.display();}
//     if (StringsPitchIsActive[125] == true) {stringsgfx = new StringsGFX (StringsPitchX[125], StringsVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], StringsVelocityAlpha[125], StringsNoteColor[125]); stringsgfx.display();}
//     if (StringsPitchIsActive[126] == true) {stringsgfx = new StringsGFX (StringsPitchX[126], StringsVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], StringsVelocityAlpha[126], StringsNoteColor[126]); stringsgfx.display();}
//     if (StringsPitchIsActive[127] == true) {stringsgfx = new StringsGFX (StringsPitchX[127], StringsVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], StringsVelocityAlpha[127], StringsNoteColor[127]); stringsgfx.display();}
//   }
// }

// void EnsembleGFXDisplay(){//Ensemble
//   if (ChannelIsActive[6] == true) {// Ensemble Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
//     if (EnsemblePitchIsActive[0]   == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[0  ], EnsembleVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  EnsembleVelocityAlpha[0]  , EnsembleNoteColor[0]  ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[1]   == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[1  ], EnsembleVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  EnsembleVelocityAlpha[1]  , EnsembleNoteColor[1]  ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[2]   == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[2  ], EnsembleVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  EnsembleVelocityAlpha[2]  , EnsembleNoteColor[2]  ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[3]   == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[3  ], EnsembleVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  EnsembleVelocityAlpha[3]  , EnsembleNoteColor[3]  ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[4]   == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[4  ], EnsembleVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  EnsembleVelocityAlpha[4]  , EnsembleNoteColor[4]  ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[5]   == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[5  ], EnsembleVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  EnsembleVelocityAlpha[5]  , EnsembleNoteColor[5]  ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[6]   == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[6  ], EnsembleVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  EnsembleVelocityAlpha[6]  , EnsembleNoteColor[6]  ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[7]   == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[7  ], EnsembleVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  EnsembleVelocityAlpha[7]  , EnsembleNoteColor[7]  ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[8]   == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[8  ], EnsembleVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  EnsembleVelocityAlpha[8]  , EnsembleNoteColor[8]  ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[9]   == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[9  ], EnsembleVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  EnsembleVelocityAlpha[9]  , EnsembleNoteColor[9]  ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[10]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[10 ], EnsembleVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  EnsembleVelocityAlpha[10] , EnsembleNoteColor[10] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[11]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[11 ], EnsembleVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  EnsembleVelocityAlpha[11] , EnsembleNoteColor[11] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[12]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[12 ], EnsembleVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  EnsembleVelocityAlpha[12] , EnsembleNoteColor[12] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[13]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[13 ], EnsembleVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  EnsembleVelocityAlpha[13] , EnsembleNoteColor[13] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[14]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[14 ], EnsembleVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  EnsembleVelocityAlpha[14] , EnsembleNoteColor[14] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[15]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[15 ], EnsembleVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  EnsembleVelocityAlpha[15] , EnsembleNoteColor[15] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[16]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[16 ], EnsembleVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  EnsembleVelocityAlpha[16] , EnsembleNoteColor[16] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[17]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[17 ], EnsembleVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  EnsembleVelocityAlpha[17] , EnsembleNoteColor[17] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[18]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[18 ], EnsembleVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  EnsembleVelocityAlpha[18] , EnsembleNoteColor[18] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[19]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[19 ], EnsembleVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  EnsembleVelocityAlpha[19] , EnsembleNoteColor[19] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[20]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[20 ], EnsembleVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  EnsembleVelocityAlpha[20] , EnsembleNoteColor[20] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[21]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[21 ], EnsembleVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  EnsembleVelocityAlpha[21] , EnsembleNoteColor[21] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[22]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[22 ], EnsembleVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  EnsembleVelocityAlpha[22] , EnsembleNoteColor[22] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[23]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[23 ], EnsembleVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  EnsembleVelocityAlpha[23] , EnsembleNoteColor[23] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[24]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[24 ], EnsembleVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  EnsembleVelocityAlpha[24] , EnsembleNoteColor[24] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[25]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[25 ], EnsembleVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  EnsembleVelocityAlpha[25] , EnsembleNoteColor[25] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[26]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[26 ], EnsembleVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  EnsembleVelocityAlpha[26] , EnsembleNoteColor[26] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[27]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[27 ], EnsembleVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  EnsembleVelocityAlpha[27] , EnsembleNoteColor[27] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[28]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[28 ], EnsembleVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  EnsembleVelocityAlpha[28] , EnsembleNoteColor[28] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[29]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[29 ], EnsembleVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  EnsembleVelocityAlpha[29] , EnsembleNoteColor[29] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[30]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[30 ], EnsembleVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  EnsembleVelocityAlpha[30] , EnsembleNoteColor[30] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[31]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[31 ], EnsembleVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  EnsembleVelocityAlpha[31] , EnsembleNoteColor[31] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[32]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[32 ], EnsembleVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  EnsembleVelocityAlpha[32] , EnsembleNoteColor[32] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[33]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[33 ], EnsembleVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  EnsembleVelocityAlpha[33] , EnsembleNoteColor[33] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[34]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[34 ], EnsembleVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  EnsembleVelocityAlpha[34] , EnsembleNoteColor[34] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[35]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[35 ], EnsembleVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  EnsembleVelocityAlpha[35] , EnsembleNoteColor[35] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[36]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[36 ], EnsembleVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  EnsembleVelocityAlpha[36] , EnsembleNoteColor[36] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[37]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[37 ], EnsembleVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  EnsembleVelocityAlpha[37] , EnsembleNoteColor[37] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[38]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[38 ], EnsembleVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  EnsembleVelocityAlpha[38] , EnsembleNoteColor[38] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[39]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[39 ], EnsembleVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  EnsembleVelocityAlpha[39] , EnsembleNoteColor[39] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[40]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[40 ], EnsembleVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  EnsembleVelocityAlpha[40] , EnsembleNoteColor[40] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[41]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[41 ], EnsembleVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  EnsembleVelocityAlpha[41] , EnsembleNoteColor[41] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[42]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[42 ], EnsembleVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  EnsembleVelocityAlpha[42] , EnsembleNoteColor[42] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[43]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[43 ], EnsembleVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  EnsembleVelocityAlpha[43] , EnsembleNoteColor[43] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[44]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[44 ], EnsembleVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  EnsembleVelocityAlpha[44] , EnsembleNoteColor[44] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[45]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[45 ], EnsembleVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  EnsembleVelocityAlpha[45] , EnsembleNoteColor[45] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[46]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[46 ], EnsembleVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  EnsembleVelocityAlpha[46] , EnsembleNoteColor[46] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[47]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[47 ], EnsembleVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  EnsembleVelocityAlpha[47] , EnsembleNoteColor[47] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[48]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[48 ], EnsembleVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  EnsembleVelocityAlpha[48] , EnsembleNoteColor[48] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[49]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[49 ], EnsembleVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  EnsembleVelocityAlpha[49] , EnsembleNoteColor[49] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[50]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[50 ], EnsembleVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  EnsembleVelocityAlpha[50] , EnsembleNoteColor[50] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[51]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[51 ], EnsembleVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  EnsembleVelocityAlpha[51] , EnsembleNoteColor[51] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[52]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[52 ], EnsembleVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  EnsembleVelocityAlpha[52] , EnsembleNoteColor[52] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[53]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[53 ], EnsembleVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  EnsembleVelocityAlpha[53] , EnsembleNoteColor[53] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[54]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[54 ], EnsembleVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  EnsembleVelocityAlpha[54] , EnsembleNoteColor[54] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[55]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[55 ], EnsembleVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  EnsembleVelocityAlpha[55] , EnsembleNoteColor[55] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[56]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[56 ], EnsembleVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  EnsembleVelocityAlpha[56] , EnsembleNoteColor[56] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[57]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[57 ], EnsembleVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  EnsembleVelocityAlpha[57] , EnsembleNoteColor[57] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[58]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[58 ], EnsembleVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  EnsembleVelocityAlpha[58] , EnsembleNoteColor[58] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[59]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[59 ], EnsembleVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  EnsembleVelocityAlpha[59] , EnsembleNoteColor[59] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[60]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[60 ], EnsembleVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  EnsembleVelocityAlpha[60] , EnsembleNoteColor[60] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[61]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[61 ], EnsembleVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  EnsembleVelocityAlpha[61] , EnsembleNoteColor[61] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[62]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[62 ], EnsembleVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  EnsembleVelocityAlpha[62] , EnsembleNoteColor[62] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[63]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[63 ], EnsembleVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  EnsembleVelocityAlpha[63] , EnsembleNoteColor[63] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[64]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[64 ], EnsembleVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  EnsembleVelocityAlpha[64] , EnsembleNoteColor[64] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[65]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[65 ], EnsembleVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  EnsembleVelocityAlpha[65] , EnsembleNoteColor[65] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[66]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[66 ], EnsembleVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  EnsembleVelocityAlpha[66] , EnsembleNoteColor[66] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[67]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[67 ], EnsembleVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  EnsembleVelocityAlpha[67] , EnsembleNoteColor[67] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[68]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[68 ], EnsembleVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  EnsembleVelocityAlpha[68] , EnsembleNoteColor[68] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[69]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[69 ], EnsembleVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  EnsembleVelocityAlpha[69] , EnsembleNoteColor[69] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[70]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[70 ], EnsembleVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  EnsembleVelocityAlpha[70] , EnsembleNoteColor[70] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[71]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[71 ], EnsembleVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  EnsembleVelocityAlpha[71] , EnsembleNoteColor[71] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[72]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[72 ], EnsembleVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  EnsembleVelocityAlpha[72] , EnsembleNoteColor[72] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[73]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[73 ], EnsembleVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  EnsembleVelocityAlpha[73] , EnsembleNoteColor[73] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[74]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[74 ], EnsembleVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  EnsembleVelocityAlpha[74] , EnsembleNoteColor[74] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[75]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[75 ], EnsembleVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  EnsembleVelocityAlpha[75] , EnsembleNoteColor[75] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[76]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[76 ], EnsembleVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  EnsembleVelocityAlpha[76] , EnsembleNoteColor[76] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[77]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[77 ], EnsembleVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  EnsembleVelocityAlpha[77] , EnsembleNoteColor[77] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[78]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[78 ], EnsembleVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  EnsembleVelocityAlpha[78] , EnsembleNoteColor[78] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[79]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[79 ], EnsembleVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  EnsembleVelocityAlpha[79] , EnsembleNoteColor[79] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[80]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[80 ], EnsembleVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  EnsembleVelocityAlpha[80] , EnsembleNoteColor[80] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[81]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[81 ], EnsembleVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  EnsembleVelocityAlpha[81] , EnsembleNoteColor[81] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[82]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[82 ], EnsembleVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  EnsembleVelocityAlpha[82] , EnsembleNoteColor[82] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[83]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[83 ], EnsembleVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  EnsembleVelocityAlpha[83] , EnsembleNoteColor[83] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[84]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[84 ], EnsembleVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  EnsembleVelocityAlpha[84] , EnsembleNoteColor[84] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[85]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[85 ], EnsembleVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  EnsembleVelocityAlpha[85] , EnsembleNoteColor[85] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[86]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[86 ], EnsembleVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  EnsembleVelocityAlpha[86] , EnsembleNoteColor[86] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[87]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[87 ], EnsembleVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  EnsembleVelocityAlpha[87] , EnsembleNoteColor[87] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[88]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[88 ], EnsembleVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  EnsembleVelocityAlpha[88] , EnsembleNoteColor[88] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[89]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[89 ], EnsembleVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  EnsembleVelocityAlpha[89] , EnsembleNoteColor[89] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[90]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[90 ], EnsembleVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  EnsembleVelocityAlpha[90] , EnsembleNoteColor[90] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[91]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[91 ], EnsembleVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  EnsembleVelocityAlpha[91] , EnsembleNoteColor[91] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[92]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[92 ], EnsembleVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  EnsembleVelocityAlpha[92] , EnsembleNoteColor[92] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[93]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[93 ], EnsembleVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  EnsembleVelocityAlpha[93] , EnsembleNoteColor[93] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[94]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[94 ], EnsembleVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  EnsembleVelocityAlpha[94] , EnsembleNoteColor[94] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[95]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[95 ], EnsembleVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  EnsembleVelocityAlpha[95] , EnsembleNoteColor[95] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[96]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[96 ], EnsembleVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  EnsembleVelocityAlpha[96] , EnsembleNoteColor[96] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[97]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[97 ], EnsembleVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  EnsembleVelocityAlpha[97] , EnsembleNoteColor[97] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[98]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[98 ], EnsembleVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  EnsembleVelocityAlpha[98] , EnsembleNoteColor[98] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[99]  == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[99 ], EnsembleVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  EnsembleVelocityAlpha[99] , EnsembleNoteColor[99] ); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[100] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[100], EnsembleVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  EnsembleVelocityAlpha[100], EnsembleNoteColor[100]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[101] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[101], EnsembleVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  EnsembleVelocityAlpha[101], EnsembleNoteColor[101]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[102] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[102], EnsembleVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  EnsembleVelocityAlpha[102], EnsembleNoteColor[102]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[103] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[103], EnsembleVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  EnsembleVelocityAlpha[103], EnsembleNoteColor[103]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[104] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[104], EnsembleVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  EnsembleVelocityAlpha[104], EnsembleNoteColor[104]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[105] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[105], EnsembleVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  EnsembleVelocityAlpha[105], EnsembleNoteColor[105]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[106] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[106], EnsembleVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  EnsembleVelocityAlpha[106], EnsembleNoteColor[106]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[107] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[107], EnsembleVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  EnsembleVelocityAlpha[107], EnsembleNoteColor[107]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[108] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[108], EnsembleVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  EnsembleVelocityAlpha[108], EnsembleNoteColor[108]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[109] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[109], EnsembleVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  EnsembleVelocityAlpha[109], EnsembleNoteColor[109]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[110] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[110], EnsembleVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  EnsembleVelocityAlpha[110], EnsembleNoteColor[110]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[111] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[111], EnsembleVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  EnsembleVelocityAlpha[111], EnsembleNoteColor[111]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[112] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[112], EnsembleVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  EnsembleVelocityAlpha[112], EnsembleNoteColor[112]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[113] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[113], EnsembleVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  EnsembleVelocityAlpha[113], EnsembleNoteColor[113]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[114] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[114], EnsembleVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  EnsembleVelocityAlpha[114], EnsembleNoteColor[114]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[115] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[115], EnsembleVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  EnsembleVelocityAlpha[115], EnsembleNoteColor[115]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[116] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[116], EnsembleVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  EnsembleVelocityAlpha[116], EnsembleNoteColor[116]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[117] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[117], EnsembleVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  EnsembleVelocityAlpha[117], EnsembleNoteColor[117]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[118] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[118], EnsembleVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  EnsembleVelocityAlpha[118], EnsembleNoteColor[118]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[119] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[119], EnsembleVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  EnsembleVelocityAlpha[119], EnsembleNoteColor[119]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[120] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[120], EnsembleVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], EnsembleVelocityAlpha[120], EnsembleNoteColor[120]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[121] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[121], EnsembleVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], EnsembleVelocityAlpha[121], EnsembleNoteColor[121]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[122] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[122], EnsembleVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], EnsembleVelocityAlpha[122], EnsembleNoteColor[122]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[123] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[123], EnsembleVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], EnsembleVelocityAlpha[123], EnsembleNoteColor[123]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[124] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[124], EnsembleVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], EnsembleVelocityAlpha[124], EnsembleNoteColor[124]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[125] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[125], EnsembleVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], EnsembleVelocityAlpha[125], EnsembleNoteColor[125]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[126] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[126], EnsembleVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], EnsembleVelocityAlpha[126], EnsembleNoteColor[126]); ensemblegfx.display();}
//     if (EnsemblePitchIsActive[127] == true) {ensemblegfx = new EnsembleGFX (EnsemblePitchX[127], EnsembleVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], EnsembleVelocityAlpha[127], EnsembleNoteColor[127]); ensemblegfx.display();}
//   }
// }

// void BrassGFXDisplay(){//Brass
//   if (ChannelIsActive[7] == true) {// Brass Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
//     if (BrassPitchIsActive[0]   == true) {brassgfx = new BrassGFX (BrassPitchX[0  ], BrassVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  BrassVelocityAlpha[0]  , BrassNoteColor[0]  ); brassgfx.display();}
//     if (BrassPitchIsActive[1]   == true) {brassgfx = new BrassGFX (BrassPitchX[1  ], BrassVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  BrassVelocityAlpha[1]  , BrassNoteColor[1]  ); brassgfx.display();}
//     if (BrassPitchIsActive[2]   == true) {brassgfx = new BrassGFX (BrassPitchX[2  ], BrassVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  BrassVelocityAlpha[2]  , BrassNoteColor[2]  ); brassgfx.display();}
//     if (BrassPitchIsActive[3]   == true) {brassgfx = new BrassGFX (BrassPitchX[3  ], BrassVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  BrassVelocityAlpha[3]  , BrassNoteColor[3]  ); brassgfx.display();}
//     if (BrassPitchIsActive[4]   == true) {brassgfx = new BrassGFX (BrassPitchX[4  ], BrassVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  BrassVelocityAlpha[4]  , BrassNoteColor[4]  ); brassgfx.display();}
//     if (BrassPitchIsActive[5]   == true) {brassgfx = new BrassGFX (BrassPitchX[5  ], BrassVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  BrassVelocityAlpha[5]  , BrassNoteColor[5]  ); brassgfx.display();}
//     if (BrassPitchIsActive[6]   == true) {brassgfx = new BrassGFX (BrassPitchX[6  ], BrassVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  BrassVelocityAlpha[6]  , BrassNoteColor[6]  ); brassgfx.display();}
//     if (BrassPitchIsActive[7]   == true) {brassgfx = new BrassGFX (BrassPitchX[7  ], BrassVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  BrassVelocityAlpha[7]  , BrassNoteColor[7]  ); brassgfx.display();}
//     if (BrassPitchIsActive[8]   == true) {brassgfx = new BrassGFX (BrassPitchX[8  ], BrassVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  BrassVelocityAlpha[8]  , BrassNoteColor[8]  ); brassgfx.display();}
//     if (BrassPitchIsActive[9]   == true) {brassgfx = new BrassGFX (BrassPitchX[9  ], BrassVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  BrassVelocityAlpha[9]  , BrassNoteColor[9]  ); brassgfx.display();}
//     if (BrassPitchIsActive[10]  == true) {brassgfx = new BrassGFX (BrassPitchX[10 ], BrassVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  BrassVelocityAlpha[10] , BrassNoteColor[10] ); brassgfx.display();}
//     if (BrassPitchIsActive[11]  == true) {brassgfx = new BrassGFX (BrassPitchX[11 ], BrassVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  BrassVelocityAlpha[11] , BrassNoteColor[11] ); brassgfx.display();}
//     if (BrassPitchIsActive[12]  == true) {brassgfx = new BrassGFX (BrassPitchX[12 ], BrassVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  BrassVelocityAlpha[12] , BrassNoteColor[12] ); brassgfx.display();}
//     if (BrassPitchIsActive[13]  == true) {brassgfx = new BrassGFX (BrassPitchX[13 ], BrassVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  BrassVelocityAlpha[13] , BrassNoteColor[13] ); brassgfx.display();}
//     if (BrassPitchIsActive[14]  == true) {brassgfx = new BrassGFX (BrassPitchX[14 ], BrassVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  BrassVelocityAlpha[14] , BrassNoteColor[14] ); brassgfx.display();}
//     if (BrassPitchIsActive[15]  == true) {brassgfx = new BrassGFX (BrassPitchX[15 ], BrassVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  BrassVelocityAlpha[15] , BrassNoteColor[15] ); brassgfx.display();}
//     if (BrassPitchIsActive[16]  == true) {brassgfx = new BrassGFX (BrassPitchX[16 ], BrassVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  BrassVelocityAlpha[16] , BrassNoteColor[16] ); brassgfx.display();}
//     if (BrassPitchIsActive[17]  == true) {brassgfx = new BrassGFX (BrassPitchX[17 ], BrassVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  BrassVelocityAlpha[17] , BrassNoteColor[17] ); brassgfx.display();}
//     if (BrassPitchIsActive[18]  == true) {brassgfx = new BrassGFX (BrassPitchX[18 ], BrassVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  BrassVelocityAlpha[18] , BrassNoteColor[18] ); brassgfx.display();}
//     if (BrassPitchIsActive[19]  == true) {brassgfx = new BrassGFX (BrassPitchX[19 ], BrassVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  BrassVelocityAlpha[19] , BrassNoteColor[19] ); brassgfx.display();}
//     if (BrassPitchIsActive[20]  == true) {brassgfx = new BrassGFX (BrassPitchX[20 ], BrassVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  BrassVelocityAlpha[20] , BrassNoteColor[20] ); brassgfx.display();}
//     if (BrassPitchIsActive[21]  == true) {brassgfx = new BrassGFX (BrassPitchX[21 ], BrassVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  BrassVelocityAlpha[21] , BrassNoteColor[21] ); brassgfx.display();}
//     if (BrassPitchIsActive[22]  == true) {brassgfx = new BrassGFX (BrassPitchX[22 ], BrassVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  BrassVelocityAlpha[22] , BrassNoteColor[22] ); brassgfx.display();}
//     if (BrassPitchIsActive[23]  == true) {brassgfx = new BrassGFX (BrassPitchX[23 ], BrassVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  BrassVelocityAlpha[23] , BrassNoteColor[23] ); brassgfx.display();}
//     if (BrassPitchIsActive[24]  == true) {brassgfx = new BrassGFX (BrassPitchX[24 ], BrassVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  BrassVelocityAlpha[24] , BrassNoteColor[24] ); brassgfx.display();}
//     if (BrassPitchIsActive[25]  == true) {brassgfx = new BrassGFX (BrassPitchX[25 ], BrassVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  BrassVelocityAlpha[25] , BrassNoteColor[25] ); brassgfx.display();}
//     if (BrassPitchIsActive[26]  == true) {brassgfx = new BrassGFX (BrassPitchX[26 ], BrassVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  BrassVelocityAlpha[26] , BrassNoteColor[26] ); brassgfx.display();}
//     if (BrassPitchIsActive[27]  == true) {brassgfx = new BrassGFX (BrassPitchX[27 ], BrassVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  BrassVelocityAlpha[27] , BrassNoteColor[27] ); brassgfx.display();}
//     if (BrassPitchIsActive[28]  == true) {brassgfx = new BrassGFX (BrassPitchX[28 ], BrassVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  BrassVelocityAlpha[28] , BrassNoteColor[28] ); brassgfx.display();}
//     if (BrassPitchIsActive[29]  == true) {brassgfx = new BrassGFX (BrassPitchX[29 ], BrassVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  BrassVelocityAlpha[29] , BrassNoteColor[29] ); brassgfx.display();}
//     if (BrassPitchIsActive[30]  == true) {brassgfx = new BrassGFX (BrassPitchX[30 ], BrassVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  BrassVelocityAlpha[30] , BrassNoteColor[30] ); brassgfx.display();}
//     if (BrassPitchIsActive[31]  == true) {brassgfx = new BrassGFX (BrassPitchX[31 ], BrassVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  BrassVelocityAlpha[31] , BrassNoteColor[31] ); brassgfx.display();}
//     if (BrassPitchIsActive[32]  == true) {brassgfx = new BrassGFX (BrassPitchX[32 ], BrassVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  BrassVelocityAlpha[32] , BrassNoteColor[32] ); brassgfx.display();}
//     if (BrassPitchIsActive[33]  == true) {brassgfx = new BrassGFX (BrassPitchX[33 ], BrassVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  BrassVelocityAlpha[33] , BrassNoteColor[33] ); brassgfx.display();}
//     if (BrassPitchIsActive[34]  == true) {brassgfx = new BrassGFX (BrassPitchX[34 ], BrassVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  BrassVelocityAlpha[34] , BrassNoteColor[34] ); brassgfx.display();}
//     if (BrassPitchIsActive[35]  == true) {brassgfx = new BrassGFX (BrassPitchX[35 ], BrassVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  BrassVelocityAlpha[35] , BrassNoteColor[35] ); brassgfx.display();}
//     if (BrassPitchIsActive[36]  == true) {brassgfx = new BrassGFX (BrassPitchX[36 ], BrassVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  BrassVelocityAlpha[36] , BrassNoteColor[36] ); brassgfx.display();}
//     if (BrassPitchIsActive[37]  == true) {brassgfx = new BrassGFX (BrassPitchX[37 ], BrassVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  BrassVelocityAlpha[37] , BrassNoteColor[37] ); brassgfx.display();}
//     if (BrassPitchIsActive[38]  == true) {brassgfx = new BrassGFX (BrassPitchX[38 ], BrassVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  BrassVelocityAlpha[38] , BrassNoteColor[38] ); brassgfx.display();}
//     if (BrassPitchIsActive[39]  == true) {brassgfx = new BrassGFX (BrassPitchX[39 ], BrassVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  BrassVelocityAlpha[39] , BrassNoteColor[39] ); brassgfx.display();}
//     if (BrassPitchIsActive[40]  == true) {brassgfx = new BrassGFX (BrassPitchX[40 ], BrassVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  BrassVelocityAlpha[40] , BrassNoteColor[40] ); brassgfx.display();}
//     if (BrassPitchIsActive[41]  == true) {brassgfx = new BrassGFX (BrassPitchX[41 ], BrassVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  BrassVelocityAlpha[41] , BrassNoteColor[41] ); brassgfx.display();}
//     if (BrassPitchIsActive[42]  == true) {brassgfx = new BrassGFX (BrassPitchX[42 ], BrassVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  BrassVelocityAlpha[42] , BrassNoteColor[42] ); brassgfx.display();}
//     if (BrassPitchIsActive[43]  == true) {brassgfx = new BrassGFX (BrassPitchX[43 ], BrassVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  BrassVelocityAlpha[43] , BrassNoteColor[43] ); brassgfx.display();}
//     if (BrassPitchIsActive[44]  == true) {brassgfx = new BrassGFX (BrassPitchX[44 ], BrassVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  BrassVelocityAlpha[44] , BrassNoteColor[44] ); brassgfx.display();}
//     if (BrassPitchIsActive[45]  == true) {brassgfx = new BrassGFX (BrassPitchX[45 ], BrassVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  BrassVelocityAlpha[45] , BrassNoteColor[45] ); brassgfx.display();}
//     if (BrassPitchIsActive[46]  == true) {brassgfx = new BrassGFX (BrassPitchX[46 ], BrassVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  BrassVelocityAlpha[46] , BrassNoteColor[46] ); brassgfx.display();}
//     if (BrassPitchIsActive[47]  == true) {brassgfx = new BrassGFX (BrassPitchX[47 ], BrassVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  BrassVelocityAlpha[47] , BrassNoteColor[47] ); brassgfx.display();}
//     if (BrassPitchIsActive[48]  == true) {brassgfx = new BrassGFX (BrassPitchX[48 ], BrassVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  BrassVelocityAlpha[48] , BrassNoteColor[48] ); brassgfx.display();}
//     if (BrassPitchIsActive[49]  == true) {brassgfx = new BrassGFX (BrassPitchX[49 ], BrassVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  BrassVelocityAlpha[49] , BrassNoteColor[49] ); brassgfx.display();}
//     if (BrassPitchIsActive[50]  == true) {brassgfx = new BrassGFX (BrassPitchX[50 ], BrassVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  BrassVelocityAlpha[50] , BrassNoteColor[50] ); brassgfx.display();}
//     if (BrassPitchIsActive[51]  == true) {brassgfx = new BrassGFX (BrassPitchX[51 ], BrassVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  BrassVelocityAlpha[51] , BrassNoteColor[51] ); brassgfx.display();}
//     if (BrassPitchIsActive[52]  == true) {brassgfx = new BrassGFX (BrassPitchX[52 ], BrassVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  BrassVelocityAlpha[52] , BrassNoteColor[52] ); brassgfx.display();}
//     if (BrassPitchIsActive[53]  == true) {brassgfx = new BrassGFX (BrassPitchX[53 ], BrassVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  BrassVelocityAlpha[53] , BrassNoteColor[53] ); brassgfx.display();}
//     if (BrassPitchIsActive[54]  == true) {brassgfx = new BrassGFX (BrassPitchX[54 ], BrassVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  BrassVelocityAlpha[54] , BrassNoteColor[54] ); brassgfx.display();}
//     if (BrassPitchIsActive[55]  == true) {brassgfx = new BrassGFX (BrassPitchX[55 ], BrassVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  BrassVelocityAlpha[55] , BrassNoteColor[55] ); brassgfx.display();}
//     if (BrassPitchIsActive[56]  == true) {brassgfx = new BrassGFX (BrassPitchX[56 ], BrassVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  BrassVelocityAlpha[56] , BrassNoteColor[56] ); brassgfx.display();}
//     if (BrassPitchIsActive[57]  == true) {brassgfx = new BrassGFX (BrassPitchX[57 ], BrassVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  BrassVelocityAlpha[57] , BrassNoteColor[57] ); brassgfx.display();}
//     if (BrassPitchIsActive[58]  == true) {brassgfx = new BrassGFX (BrassPitchX[58 ], BrassVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  BrassVelocityAlpha[58] , BrassNoteColor[58] ); brassgfx.display();}
//     if (BrassPitchIsActive[59]  == true) {brassgfx = new BrassGFX (BrassPitchX[59 ], BrassVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  BrassVelocityAlpha[59] , BrassNoteColor[59] ); brassgfx.display();}
//     if (BrassPitchIsActive[60]  == true) {brassgfx = new BrassGFX (BrassPitchX[60 ], BrassVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  BrassVelocityAlpha[60] , BrassNoteColor[60] ); brassgfx.display();}
//     if (BrassPitchIsActive[61]  == true) {brassgfx = new BrassGFX (BrassPitchX[61 ], BrassVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  BrassVelocityAlpha[61] , BrassNoteColor[61] ); brassgfx.display();}
//     if (BrassPitchIsActive[62]  == true) {brassgfx = new BrassGFX (BrassPitchX[62 ], BrassVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  BrassVelocityAlpha[62] , BrassNoteColor[62] ); brassgfx.display();}
//     if (BrassPitchIsActive[63]  == true) {brassgfx = new BrassGFX (BrassPitchX[63 ], BrassVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  BrassVelocityAlpha[63] , BrassNoteColor[63] ); brassgfx.display();}
//     if (BrassPitchIsActive[64]  == true) {brassgfx = new BrassGFX (BrassPitchX[64 ], BrassVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  BrassVelocityAlpha[64] , BrassNoteColor[64] ); brassgfx.display();}
//     if (BrassPitchIsActive[65]  == true) {brassgfx = new BrassGFX (BrassPitchX[65 ], BrassVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  BrassVelocityAlpha[65] , BrassNoteColor[65] ); brassgfx.display();}
//     if (BrassPitchIsActive[66]  == true) {brassgfx = new BrassGFX (BrassPitchX[66 ], BrassVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  BrassVelocityAlpha[66] , BrassNoteColor[66] ); brassgfx.display();}
//     if (BrassPitchIsActive[67]  == true) {brassgfx = new BrassGFX (BrassPitchX[67 ], BrassVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  BrassVelocityAlpha[67] , BrassNoteColor[67] ); brassgfx.display();}
//     if (BrassPitchIsActive[68]  == true) {brassgfx = new BrassGFX (BrassPitchX[68 ], BrassVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  BrassVelocityAlpha[68] , BrassNoteColor[68] ); brassgfx.display();}
//     if (BrassPitchIsActive[69]  == true) {brassgfx = new BrassGFX (BrassPitchX[69 ], BrassVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  BrassVelocityAlpha[69] , BrassNoteColor[69] ); brassgfx.display();}
//     if (BrassPitchIsActive[70]  == true) {brassgfx = new BrassGFX (BrassPitchX[70 ], BrassVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  BrassVelocityAlpha[70] , BrassNoteColor[70] ); brassgfx.display();}
//     if (BrassPitchIsActive[71]  == true) {brassgfx = new BrassGFX (BrassPitchX[71 ], BrassVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  BrassVelocityAlpha[71] , BrassNoteColor[71] ); brassgfx.display();}
//     if (BrassPitchIsActive[72]  == true) {brassgfx = new BrassGFX (BrassPitchX[72 ], BrassVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  BrassVelocityAlpha[72] , BrassNoteColor[72] ); brassgfx.display();}
//     if (BrassPitchIsActive[73]  == true) {brassgfx = new BrassGFX (BrassPitchX[73 ], BrassVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  BrassVelocityAlpha[73] , BrassNoteColor[73] ); brassgfx.display();}
//     if (BrassPitchIsActive[74]  == true) {brassgfx = new BrassGFX (BrassPitchX[74 ], BrassVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  BrassVelocityAlpha[74] , BrassNoteColor[74] ); brassgfx.display();}
//     if (BrassPitchIsActive[75]  == true) {brassgfx = new BrassGFX (BrassPitchX[75 ], BrassVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  BrassVelocityAlpha[75] , BrassNoteColor[75] ); brassgfx.display();}
//     if (BrassPitchIsActive[76]  == true) {brassgfx = new BrassGFX (BrassPitchX[76 ], BrassVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  BrassVelocityAlpha[76] , BrassNoteColor[76] ); brassgfx.display();}
//     if (BrassPitchIsActive[77]  == true) {brassgfx = new BrassGFX (BrassPitchX[77 ], BrassVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  BrassVelocityAlpha[77] , BrassNoteColor[77] ); brassgfx.display();}
//     if (BrassPitchIsActive[78]  == true) {brassgfx = new BrassGFX (BrassPitchX[78 ], BrassVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  BrassVelocityAlpha[78] , BrassNoteColor[78] ); brassgfx.display();}
//     if (BrassPitchIsActive[79]  == true) {brassgfx = new BrassGFX (BrassPitchX[79 ], BrassVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  BrassVelocityAlpha[79] , BrassNoteColor[79] ); brassgfx.display();}
//     if (BrassPitchIsActive[80]  == true) {brassgfx = new BrassGFX (BrassPitchX[80 ], BrassVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  BrassVelocityAlpha[80] , BrassNoteColor[80] ); brassgfx.display();}
//     if (BrassPitchIsActive[81]  == true) {brassgfx = new BrassGFX (BrassPitchX[81 ], BrassVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  BrassVelocityAlpha[81] , BrassNoteColor[81] ); brassgfx.display();}
//     if (BrassPitchIsActive[82]  == true) {brassgfx = new BrassGFX (BrassPitchX[82 ], BrassVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  BrassVelocityAlpha[82] , BrassNoteColor[82] ); brassgfx.display();}
//     if (BrassPitchIsActive[83]  == true) {brassgfx = new BrassGFX (BrassPitchX[83 ], BrassVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  BrassVelocityAlpha[83] , BrassNoteColor[83] ); brassgfx.display();}
//     if (BrassPitchIsActive[84]  == true) {brassgfx = new BrassGFX (BrassPitchX[84 ], BrassVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  BrassVelocityAlpha[84] , BrassNoteColor[84] ); brassgfx.display();}
//     if (BrassPitchIsActive[85]  == true) {brassgfx = new BrassGFX (BrassPitchX[85 ], BrassVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  BrassVelocityAlpha[85] , BrassNoteColor[85] ); brassgfx.display();}
//     if (BrassPitchIsActive[86]  == true) {brassgfx = new BrassGFX (BrassPitchX[86 ], BrassVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  BrassVelocityAlpha[86] , BrassNoteColor[86] ); brassgfx.display();}
//     if (BrassPitchIsActive[87]  == true) {brassgfx = new BrassGFX (BrassPitchX[87 ], BrassVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  BrassVelocityAlpha[87] , BrassNoteColor[87] ); brassgfx.display();}
//     if (BrassPitchIsActive[88]  == true) {brassgfx = new BrassGFX (BrassPitchX[88 ], BrassVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  BrassVelocityAlpha[88] , BrassNoteColor[88] ); brassgfx.display();}
//     if (BrassPitchIsActive[89]  == true) {brassgfx = new BrassGFX (BrassPitchX[89 ], BrassVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  BrassVelocityAlpha[89] , BrassNoteColor[89] ); brassgfx.display();}
//     if (BrassPitchIsActive[90]  == true) {brassgfx = new BrassGFX (BrassPitchX[90 ], BrassVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  BrassVelocityAlpha[90] , BrassNoteColor[90] ); brassgfx.display();}
//     if (BrassPitchIsActive[91]  == true) {brassgfx = new BrassGFX (BrassPitchX[91 ], BrassVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  BrassVelocityAlpha[91] , BrassNoteColor[91] ); brassgfx.display();}
//     if (BrassPitchIsActive[92]  == true) {brassgfx = new BrassGFX (BrassPitchX[92 ], BrassVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  BrassVelocityAlpha[92] , BrassNoteColor[92] ); brassgfx.display();}
//     if (BrassPitchIsActive[93]  == true) {brassgfx = new BrassGFX (BrassPitchX[93 ], BrassVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  BrassVelocityAlpha[93] , BrassNoteColor[93] ); brassgfx.display();}
//     if (BrassPitchIsActive[94]  == true) {brassgfx = new BrassGFX (BrassPitchX[94 ], BrassVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  BrassVelocityAlpha[94] , BrassNoteColor[94] ); brassgfx.display();}
//     if (BrassPitchIsActive[95]  == true) {brassgfx = new BrassGFX (BrassPitchX[95 ], BrassVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  BrassVelocityAlpha[95] , BrassNoteColor[95] ); brassgfx.display();}
//     if (BrassPitchIsActive[96]  == true) {brassgfx = new BrassGFX (BrassPitchX[96 ], BrassVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  BrassVelocityAlpha[96] , BrassNoteColor[96] ); brassgfx.display();}
//     if (BrassPitchIsActive[97]  == true) {brassgfx = new BrassGFX (BrassPitchX[97 ], BrassVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  BrassVelocityAlpha[97] , BrassNoteColor[97] ); brassgfx.display();}
//     if (BrassPitchIsActive[98]  == true) {brassgfx = new BrassGFX (BrassPitchX[98 ], BrassVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  BrassVelocityAlpha[98] , BrassNoteColor[98] ); brassgfx.display();}
//     if (BrassPitchIsActive[99]  == true) {brassgfx = new BrassGFX (BrassPitchX[99 ], BrassVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  BrassVelocityAlpha[99] , BrassNoteColor[99] ); brassgfx.display();}
//     if (BrassPitchIsActive[100] == true) {brassgfx = new BrassGFX (BrassPitchX[100], BrassVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  BrassVelocityAlpha[100], BrassNoteColor[100]); brassgfx.display();}
//     if (BrassPitchIsActive[101] == true) {brassgfx = new BrassGFX (BrassPitchX[101], BrassVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  BrassVelocityAlpha[101], BrassNoteColor[101]); brassgfx.display();}
//     if (BrassPitchIsActive[102] == true) {brassgfx = new BrassGFX (BrassPitchX[102], BrassVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  BrassVelocityAlpha[102], BrassNoteColor[102]); brassgfx.display();}
//     if (BrassPitchIsActive[103] == true) {brassgfx = new BrassGFX (BrassPitchX[103], BrassVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  BrassVelocityAlpha[103], BrassNoteColor[103]); brassgfx.display();}
//     if (BrassPitchIsActive[104] == true) {brassgfx = new BrassGFX (BrassPitchX[104], BrassVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  BrassVelocityAlpha[104], BrassNoteColor[104]); brassgfx.display();}
//     if (BrassPitchIsActive[105] == true) {brassgfx = new BrassGFX (BrassPitchX[105], BrassVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  BrassVelocityAlpha[105], BrassNoteColor[105]); brassgfx.display();}
//     if (BrassPitchIsActive[106] == true) {brassgfx = new BrassGFX (BrassPitchX[106], BrassVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  BrassVelocityAlpha[106], BrassNoteColor[106]); brassgfx.display();}
//     if (BrassPitchIsActive[107] == true) {brassgfx = new BrassGFX (BrassPitchX[107], BrassVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  BrassVelocityAlpha[107], BrassNoteColor[107]); brassgfx.display();}
//     if (BrassPitchIsActive[108] == true) {brassgfx = new BrassGFX (BrassPitchX[108], BrassVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  BrassVelocityAlpha[108], BrassNoteColor[108]); brassgfx.display();}
//     if (BrassPitchIsActive[109] == true) {brassgfx = new BrassGFX (BrassPitchX[109], BrassVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  BrassVelocityAlpha[109], BrassNoteColor[109]); brassgfx.display();}
//     if (BrassPitchIsActive[110] == true) {brassgfx = new BrassGFX (BrassPitchX[110], BrassVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  BrassVelocityAlpha[110], BrassNoteColor[110]); brassgfx.display();}
//     if (BrassPitchIsActive[111] == true) {brassgfx = new BrassGFX (BrassPitchX[111], BrassVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  BrassVelocityAlpha[111], BrassNoteColor[111]); brassgfx.display();}
//     if (BrassPitchIsActive[112] == true) {brassgfx = new BrassGFX (BrassPitchX[112], BrassVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  BrassVelocityAlpha[112], BrassNoteColor[112]); brassgfx.display();}
//     if (BrassPitchIsActive[113] == true) {brassgfx = new BrassGFX (BrassPitchX[113], BrassVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  BrassVelocityAlpha[113], BrassNoteColor[113]); brassgfx.display();}
//     if (BrassPitchIsActive[114] == true) {brassgfx = new BrassGFX (BrassPitchX[114], BrassVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  BrassVelocityAlpha[114], BrassNoteColor[114]); brassgfx.display();}
//     if (BrassPitchIsActive[115] == true) {brassgfx = new BrassGFX (BrassPitchX[115], BrassVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  BrassVelocityAlpha[115], BrassNoteColor[115]); brassgfx.display();}
//     if (BrassPitchIsActive[116] == true) {brassgfx = new BrassGFX (BrassPitchX[116], BrassVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  BrassVelocityAlpha[116], BrassNoteColor[116]); brassgfx.display();}
//     if (BrassPitchIsActive[117] == true) {brassgfx = new BrassGFX (BrassPitchX[117], BrassVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  BrassVelocityAlpha[117], BrassNoteColor[117]); brassgfx.display();}
//     if (BrassPitchIsActive[118] == true) {brassgfx = new BrassGFX (BrassPitchX[118], BrassVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  BrassVelocityAlpha[118], BrassNoteColor[118]); brassgfx.display();}
//     if (BrassPitchIsActive[119] == true) {brassgfx = new BrassGFX (BrassPitchX[119], BrassVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  BrassVelocityAlpha[119], BrassNoteColor[119]); brassgfx.display();}
//     if (BrassPitchIsActive[120] == true) {brassgfx = new BrassGFX (BrassPitchX[120], BrassVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], BrassVelocityAlpha[120], BrassNoteColor[120]); brassgfx.display();}
//     if (BrassPitchIsActive[121] == true) {brassgfx = new BrassGFX (BrassPitchX[121], BrassVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], BrassVelocityAlpha[121], BrassNoteColor[121]); brassgfx.display();}
//     if (BrassPitchIsActive[122] == true) {brassgfx = new BrassGFX (BrassPitchX[122], BrassVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], BrassVelocityAlpha[122], BrassNoteColor[122]); brassgfx.display();}
//     if (BrassPitchIsActive[123] == true) {brassgfx = new BrassGFX (BrassPitchX[123], BrassVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], BrassVelocityAlpha[123], BrassNoteColor[123]); brassgfx.display();}
//     if (BrassPitchIsActive[124] == true) {brassgfx = new BrassGFX (BrassPitchX[124], BrassVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], BrassVelocityAlpha[124], BrassNoteColor[124]); brassgfx.display();}
//     if (BrassPitchIsActive[125] == true) {brassgfx = new BrassGFX (BrassPitchX[125], BrassVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], BrassVelocityAlpha[125], BrassNoteColor[125]); brassgfx.display();}
//     if (BrassPitchIsActive[126] == true) {brassgfx = new BrassGFX (BrassPitchX[126], BrassVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], BrassVelocityAlpha[126], BrassNoteColor[126]); brassgfx.display();}
//     if (BrassPitchIsActive[127] == true) {brassgfx = new BrassGFX (BrassPitchX[127], BrassVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], BrassVelocityAlpha[127], BrassNoteColor[127]); brassgfx.display();}
//   }
// }

// void ReedGFXDisplay(){//Reed
//   if (ChannelIsActive[8] == true) {// Reed Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
//     if (ReedPitchIsActive[0]   == true) {reedgfx = new ReedGFX (ReedPitchX[0  ], ReedVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  ReedVelocityAlpha[0]  , ReedNoteColor[0]  ); reedgfx.display();}
//     if (ReedPitchIsActive[1]   == true) {reedgfx = new ReedGFX (ReedPitchX[1  ], ReedVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  ReedVelocityAlpha[1]  , ReedNoteColor[1]  ); reedgfx.display();}
//     if (ReedPitchIsActive[2]   == true) {reedgfx = new ReedGFX (ReedPitchX[2  ], ReedVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  ReedVelocityAlpha[2]  , ReedNoteColor[2]  ); reedgfx.display();}
//     if (ReedPitchIsActive[3]   == true) {reedgfx = new ReedGFX (ReedPitchX[3  ], ReedVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  ReedVelocityAlpha[3]  , ReedNoteColor[3]  ); reedgfx.display();}
//     if (ReedPitchIsActive[4]   == true) {reedgfx = new ReedGFX (ReedPitchX[4  ], ReedVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  ReedVelocityAlpha[4]  , ReedNoteColor[4]  ); reedgfx.display();}
//     if (ReedPitchIsActive[5]   == true) {reedgfx = new ReedGFX (ReedPitchX[5  ], ReedVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  ReedVelocityAlpha[5]  , ReedNoteColor[5]  ); reedgfx.display();}
//     if (ReedPitchIsActive[6]   == true) {reedgfx = new ReedGFX (ReedPitchX[6  ], ReedVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  ReedVelocityAlpha[6]  , ReedNoteColor[6]  ); reedgfx.display();}
//     if (ReedPitchIsActive[7]   == true) {reedgfx = new ReedGFX (ReedPitchX[7  ], ReedVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  ReedVelocityAlpha[7]  , ReedNoteColor[7]  ); reedgfx.display();}
//     if (ReedPitchIsActive[8]   == true) {reedgfx = new ReedGFX (ReedPitchX[8  ], ReedVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  ReedVelocityAlpha[8]  , ReedNoteColor[8]  ); reedgfx.display();}
//     if (ReedPitchIsActive[9]   == true) {reedgfx = new ReedGFX (ReedPitchX[9  ], ReedVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  ReedVelocityAlpha[9]  , ReedNoteColor[9]  ); reedgfx.display();}
//     if (ReedPitchIsActive[10]  == true) {reedgfx = new ReedGFX (ReedPitchX[10 ], ReedVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  ReedVelocityAlpha[10] , ReedNoteColor[10] ); reedgfx.display();}
//     if (ReedPitchIsActive[11]  == true) {reedgfx = new ReedGFX (ReedPitchX[11 ], ReedVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  ReedVelocityAlpha[11] , ReedNoteColor[11] ); reedgfx.display();}
//     if (ReedPitchIsActive[12]  == true) {reedgfx = new ReedGFX (ReedPitchX[12 ], ReedVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  ReedVelocityAlpha[12] , ReedNoteColor[12] ); reedgfx.display();}
//     if (ReedPitchIsActive[13]  == true) {reedgfx = new ReedGFX (ReedPitchX[13 ], ReedVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  ReedVelocityAlpha[13] , ReedNoteColor[13] ); reedgfx.display();}
//     if (ReedPitchIsActive[14]  == true) {reedgfx = new ReedGFX (ReedPitchX[14 ], ReedVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  ReedVelocityAlpha[14] , ReedNoteColor[14] ); reedgfx.display();}
//     if (ReedPitchIsActive[15]  == true) {reedgfx = new ReedGFX (ReedPitchX[15 ], ReedVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  ReedVelocityAlpha[15] , ReedNoteColor[15] ); reedgfx.display();}
//     if (ReedPitchIsActive[16]  == true) {reedgfx = new ReedGFX (ReedPitchX[16 ], ReedVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  ReedVelocityAlpha[16] , ReedNoteColor[16] ); reedgfx.display();}
//     if (ReedPitchIsActive[17]  == true) {reedgfx = new ReedGFX (ReedPitchX[17 ], ReedVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  ReedVelocityAlpha[17] , ReedNoteColor[17] ); reedgfx.display();}
//     if (ReedPitchIsActive[18]  == true) {reedgfx = new ReedGFX (ReedPitchX[18 ], ReedVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  ReedVelocityAlpha[18] , ReedNoteColor[18] ); reedgfx.display();}
//     if (ReedPitchIsActive[19]  == true) {reedgfx = new ReedGFX (ReedPitchX[19 ], ReedVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  ReedVelocityAlpha[19] , ReedNoteColor[19] ); reedgfx.display();}
//     if (ReedPitchIsActive[20]  == true) {reedgfx = new ReedGFX (ReedPitchX[20 ], ReedVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  ReedVelocityAlpha[20] , ReedNoteColor[20] ); reedgfx.display();}
//     if (ReedPitchIsActive[21]  == true) {reedgfx = new ReedGFX (ReedPitchX[21 ], ReedVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  ReedVelocityAlpha[21] , ReedNoteColor[21] ); reedgfx.display();}
//     if (ReedPitchIsActive[22]  == true) {reedgfx = new ReedGFX (ReedPitchX[22 ], ReedVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  ReedVelocityAlpha[22] , ReedNoteColor[22] ); reedgfx.display();}
//     if (ReedPitchIsActive[23]  == true) {reedgfx = new ReedGFX (ReedPitchX[23 ], ReedVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  ReedVelocityAlpha[23] , ReedNoteColor[23] ); reedgfx.display();}
//     if (ReedPitchIsActive[24]  == true) {reedgfx = new ReedGFX (ReedPitchX[24 ], ReedVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  ReedVelocityAlpha[24] , ReedNoteColor[24] ); reedgfx.display();}
//     if (ReedPitchIsActive[25]  == true) {reedgfx = new ReedGFX (ReedPitchX[25 ], ReedVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  ReedVelocityAlpha[25] , ReedNoteColor[25] ); reedgfx.display();}
//     if (ReedPitchIsActive[26]  == true) {reedgfx = new ReedGFX (ReedPitchX[26 ], ReedVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  ReedVelocityAlpha[26] , ReedNoteColor[26] ); reedgfx.display();}
//     if (ReedPitchIsActive[27]  == true) {reedgfx = new ReedGFX (ReedPitchX[27 ], ReedVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  ReedVelocityAlpha[27] , ReedNoteColor[27] ); reedgfx.display();}
//     if (ReedPitchIsActive[28]  == true) {reedgfx = new ReedGFX (ReedPitchX[28 ], ReedVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  ReedVelocityAlpha[28] , ReedNoteColor[28] ); reedgfx.display();}
//     if (ReedPitchIsActive[29]  == true) {reedgfx = new ReedGFX (ReedPitchX[29 ], ReedVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  ReedVelocityAlpha[29] , ReedNoteColor[29] ); reedgfx.display();}
//     if (ReedPitchIsActive[30]  == true) {reedgfx = new ReedGFX (ReedPitchX[30 ], ReedVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  ReedVelocityAlpha[30] , ReedNoteColor[30] ); reedgfx.display();}
//     if (ReedPitchIsActive[31]  == true) {reedgfx = new ReedGFX (ReedPitchX[31 ], ReedVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  ReedVelocityAlpha[31] , ReedNoteColor[31] ); reedgfx.display();}
//     if (ReedPitchIsActive[32]  == true) {reedgfx = new ReedGFX (ReedPitchX[32 ], ReedVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  ReedVelocityAlpha[32] , ReedNoteColor[32] ); reedgfx.display();}
//     if (ReedPitchIsActive[33]  == true) {reedgfx = new ReedGFX (ReedPitchX[33 ], ReedVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  ReedVelocityAlpha[33] , ReedNoteColor[33] ); reedgfx.display();}
//     if (ReedPitchIsActive[34]  == true) {reedgfx = new ReedGFX (ReedPitchX[34 ], ReedVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  ReedVelocityAlpha[34] , ReedNoteColor[34] ); reedgfx.display();}
//     if (ReedPitchIsActive[35]  == true) {reedgfx = new ReedGFX (ReedPitchX[35 ], ReedVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  ReedVelocityAlpha[35] , ReedNoteColor[35] ); reedgfx.display();}
//     if (ReedPitchIsActive[36]  == true) {reedgfx = new ReedGFX (ReedPitchX[36 ], ReedVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  ReedVelocityAlpha[36] , ReedNoteColor[36] ); reedgfx.display();}
//     if (ReedPitchIsActive[37]  == true) {reedgfx = new ReedGFX (ReedPitchX[37 ], ReedVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  ReedVelocityAlpha[37] , ReedNoteColor[37] ); reedgfx.display();}
//     if (ReedPitchIsActive[38]  == true) {reedgfx = new ReedGFX (ReedPitchX[38 ], ReedVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  ReedVelocityAlpha[38] , ReedNoteColor[38] ); reedgfx.display();}
//     if (ReedPitchIsActive[39]  == true) {reedgfx = new ReedGFX (ReedPitchX[39 ], ReedVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  ReedVelocityAlpha[39] , ReedNoteColor[39] ); reedgfx.display();}
//     if (ReedPitchIsActive[40]  == true) {reedgfx = new ReedGFX (ReedPitchX[40 ], ReedVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  ReedVelocityAlpha[40] , ReedNoteColor[40] ); reedgfx.display();}
//     if (ReedPitchIsActive[41]  == true) {reedgfx = new ReedGFX (ReedPitchX[41 ], ReedVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  ReedVelocityAlpha[41] , ReedNoteColor[41] ); reedgfx.display();}
//     if (ReedPitchIsActive[42]  == true) {reedgfx = new ReedGFX (ReedPitchX[42 ], ReedVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  ReedVelocityAlpha[42] , ReedNoteColor[42] ); reedgfx.display();}
//     if (ReedPitchIsActive[43]  == true) {reedgfx = new ReedGFX (ReedPitchX[43 ], ReedVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  ReedVelocityAlpha[43] , ReedNoteColor[43] ); reedgfx.display();}
//     if (ReedPitchIsActive[44]  == true) {reedgfx = new ReedGFX (ReedPitchX[44 ], ReedVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  ReedVelocityAlpha[44] , ReedNoteColor[44] ); reedgfx.display();}
//     if (ReedPitchIsActive[45]  == true) {reedgfx = new ReedGFX (ReedPitchX[45 ], ReedVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  ReedVelocityAlpha[45] , ReedNoteColor[45] ); reedgfx.display();}
//     if (ReedPitchIsActive[46]  == true) {reedgfx = new ReedGFX (ReedPitchX[46 ], ReedVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  ReedVelocityAlpha[46] , ReedNoteColor[46] ); reedgfx.display();}
//     if (ReedPitchIsActive[47]  == true) {reedgfx = new ReedGFX (ReedPitchX[47 ], ReedVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  ReedVelocityAlpha[47] , ReedNoteColor[47] ); reedgfx.display();}
//     if (ReedPitchIsActive[48]  == true) {reedgfx = new ReedGFX (ReedPitchX[48 ], ReedVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  ReedVelocityAlpha[48] , ReedNoteColor[48] ); reedgfx.display();}
//     if (ReedPitchIsActive[49]  == true) {reedgfx = new ReedGFX (ReedPitchX[49 ], ReedVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  ReedVelocityAlpha[49] , ReedNoteColor[49] ); reedgfx.display();}
//     if (ReedPitchIsActive[50]  == true) {reedgfx = new ReedGFX (ReedPitchX[50 ], ReedVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  ReedVelocityAlpha[50] , ReedNoteColor[50] ); reedgfx.display();}
//     if (ReedPitchIsActive[51]  == true) {reedgfx = new ReedGFX (ReedPitchX[51 ], ReedVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  ReedVelocityAlpha[51] , ReedNoteColor[51] ); reedgfx.display();}
//     if (ReedPitchIsActive[52]  == true) {reedgfx = new ReedGFX (ReedPitchX[52 ], ReedVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  ReedVelocityAlpha[52] , ReedNoteColor[52] ); reedgfx.display();}
//     if (ReedPitchIsActive[53]  == true) {reedgfx = new ReedGFX (ReedPitchX[53 ], ReedVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  ReedVelocityAlpha[53] , ReedNoteColor[53] ); reedgfx.display();}
//     if (ReedPitchIsActive[54]  == true) {reedgfx = new ReedGFX (ReedPitchX[54 ], ReedVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  ReedVelocityAlpha[54] , ReedNoteColor[54] ); reedgfx.display();}
//     if (ReedPitchIsActive[55]  == true) {reedgfx = new ReedGFX (ReedPitchX[55 ], ReedVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  ReedVelocityAlpha[55] , ReedNoteColor[55] ); reedgfx.display();}
//     if (ReedPitchIsActive[56]  == true) {reedgfx = new ReedGFX (ReedPitchX[56 ], ReedVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  ReedVelocityAlpha[56] , ReedNoteColor[56] ); reedgfx.display();}
//     if (ReedPitchIsActive[57]  == true) {reedgfx = new ReedGFX (ReedPitchX[57 ], ReedVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  ReedVelocityAlpha[57] , ReedNoteColor[57] ); reedgfx.display();}
//     if (ReedPitchIsActive[58]  == true) {reedgfx = new ReedGFX (ReedPitchX[58 ], ReedVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  ReedVelocityAlpha[58] , ReedNoteColor[58] ); reedgfx.display();}
//     if (ReedPitchIsActive[59]  == true) {reedgfx = new ReedGFX (ReedPitchX[59 ], ReedVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  ReedVelocityAlpha[59] , ReedNoteColor[59] ); reedgfx.display();}
//     if (ReedPitchIsActive[60]  == true) {reedgfx = new ReedGFX (ReedPitchX[60 ], ReedVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  ReedVelocityAlpha[60] , ReedNoteColor[60] ); reedgfx.display();}
//     if (ReedPitchIsActive[61]  == true) {reedgfx = new ReedGFX (ReedPitchX[61 ], ReedVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  ReedVelocityAlpha[61] , ReedNoteColor[61] ); reedgfx.display();}
//     if (ReedPitchIsActive[62]  == true) {reedgfx = new ReedGFX (ReedPitchX[62 ], ReedVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  ReedVelocityAlpha[62] , ReedNoteColor[62] ); reedgfx.display();}
//     if (ReedPitchIsActive[63]  == true) {reedgfx = new ReedGFX (ReedPitchX[63 ], ReedVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  ReedVelocityAlpha[63] , ReedNoteColor[63] ); reedgfx.display();}
//     if (ReedPitchIsActive[64]  == true) {reedgfx = new ReedGFX (ReedPitchX[64 ], ReedVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  ReedVelocityAlpha[64] , ReedNoteColor[64] ); reedgfx.display();}
//     if (ReedPitchIsActive[65]  == true) {reedgfx = new ReedGFX (ReedPitchX[65 ], ReedVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  ReedVelocityAlpha[65] , ReedNoteColor[65] ); reedgfx.display();}
//     if (ReedPitchIsActive[66]  == true) {reedgfx = new ReedGFX (ReedPitchX[66 ], ReedVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  ReedVelocityAlpha[66] , ReedNoteColor[66] ); reedgfx.display();}
//     if (ReedPitchIsActive[67]  == true) {reedgfx = new ReedGFX (ReedPitchX[67 ], ReedVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  ReedVelocityAlpha[67] , ReedNoteColor[67] ); reedgfx.display();}
//     if (ReedPitchIsActive[68]  == true) {reedgfx = new ReedGFX (ReedPitchX[68 ], ReedVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  ReedVelocityAlpha[68] , ReedNoteColor[68] ); reedgfx.display();}
//     if (ReedPitchIsActive[69]  == true) {reedgfx = new ReedGFX (ReedPitchX[69 ], ReedVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  ReedVelocityAlpha[69] , ReedNoteColor[69] ); reedgfx.display();}
//     if (ReedPitchIsActive[70]  == true) {reedgfx = new ReedGFX (ReedPitchX[70 ], ReedVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  ReedVelocityAlpha[70] , ReedNoteColor[70] ); reedgfx.display();}
//     if (ReedPitchIsActive[71]  == true) {reedgfx = new ReedGFX (ReedPitchX[71 ], ReedVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  ReedVelocityAlpha[71] , ReedNoteColor[71] ); reedgfx.display();}
//     if (ReedPitchIsActive[72]  == true) {reedgfx = new ReedGFX (ReedPitchX[72 ], ReedVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  ReedVelocityAlpha[72] , ReedNoteColor[72] ); reedgfx.display();}
//     if (ReedPitchIsActive[73]  == true) {reedgfx = new ReedGFX (ReedPitchX[73 ], ReedVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  ReedVelocityAlpha[73] , ReedNoteColor[73] ); reedgfx.display();}
//     if (ReedPitchIsActive[74]  == true) {reedgfx = new ReedGFX (ReedPitchX[74 ], ReedVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  ReedVelocityAlpha[74] , ReedNoteColor[74] ); reedgfx.display();}
//     if (ReedPitchIsActive[75]  == true) {reedgfx = new ReedGFX (ReedPitchX[75 ], ReedVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  ReedVelocityAlpha[75] , ReedNoteColor[75] ); reedgfx.display();}
//     if (ReedPitchIsActive[76]  == true) {reedgfx = new ReedGFX (ReedPitchX[76 ], ReedVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  ReedVelocityAlpha[76] , ReedNoteColor[76] ); reedgfx.display();}
//     if (ReedPitchIsActive[77]  == true) {reedgfx = new ReedGFX (ReedPitchX[77 ], ReedVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  ReedVelocityAlpha[77] , ReedNoteColor[77] ); reedgfx.display();}
//     if (ReedPitchIsActive[78]  == true) {reedgfx = new ReedGFX (ReedPitchX[78 ], ReedVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  ReedVelocityAlpha[78] , ReedNoteColor[78] ); reedgfx.display();}
//     if (ReedPitchIsActive[79]  == true) {reedgfx = new ReedGFX (ReedPitchX[79 ], ReedVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  ReedVelocityAlpha[79] , ReedNoteColor[79] ); reedgfx.display();}
//     if (ReedPitchIsActive[80]  == true) {reedgfx = new ReedGFX (ReedPitchX[80 ], ReedVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  ReedVelocityAlpha[80] , ReedNoteColor[80] ); reedgfx.display();}
//     if (ReedPitchIsActive[81]  == true) {reedgfx = new ReedGFX (ReedPitchX[81 ], ReedVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  ReedVelocityAlpha[81] , ReedNoteColor[81] ); reedgfx.display();}
//     if (ReedPitchIsActive[82]  == true) {reedgfx = new ReedGFX (ReedPitchX[82 ], ReedVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  ReedVelocityAlpha[82] , ReedNoteColor[82] ); reedgfx.display();}
//     if (ReedPitchIsActive[83]  == true) {reedgfx = new ReedGFX (ReedPitchX[83 ], ReedVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  ReedVelocityAlpha[83] , ReedNoteColor[83] ); reedgfx.display();}
//     if (ReedPitchIsActive[84]  == true) {reedgfx = new ReedGFX (ReedPitchX[84 ], ReedVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  ReedVelocityAlpha[84] , ReedNoteColor[84] ); reedgfx.display();}
//     if (ReedPitchIsActive[85]  == true) {reedgfx = new ReedGFX (ReedPitchX[85 ], ReedVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  ReedVelocityAlpha[85] , ReedNoteColor[85] ); reedgfx.display();}
//     if (ReedPitchIsActive[86]  == true) {reedgfx = new ReedGFX (ReedPitchX[86 ], ReedVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  ReedVelocityAlpha[86] , ReedNoteColor[86] ); reedgfx.display();}
//     if (ReedPitchIsActive[87]  == true) {reedgfx = new ReedGFX (ReedPitchX[87 ], ReedVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  ReedVelocityAlpha[87] , ReedNoteColor[87] ); reedgfx.display();}
//     if (ReedPitchIsActive[88]  == true) {reedgfx = new ReedGFX (ReedPitchX[88 ], ReedVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  ReedVelocityAlpha[88] , ReedNoteColor[88] ); reedgfx.display();}
//     if (ReedPitchIsActive[89]  == true) {reedgfx = new ReedGFX (ReedPitchX[89 ], ReedVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  ReedVelocityAlpha[89] , ReedNoteColor[89] ); reedgfx.display();}
//     if (ReedPitchIsActive[90]  == true) {reedgfx = new ReedGFX (ReedPitchX[90 ], ReedVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  ReedVelocityAlpha[90] , ReedNoteColor[90] ); reedgfx.display();}
//     if (ReedPitchIsActive[91]  == true) {reedgfx = new ReedGFX (ReedPitchX[91 ], ReedVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  ReedVelocityAlpha[91] , ReedNoteColor[91] ); reedgfx.display();}
//     if (ReedPitchIsActive[92]  == true) {reedgfx = new ReedGFX (ReedPitchX[92 ], ReedVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  ReedVelocityAlpha[92] , ReedNoteColor[92] ); reedgfx.display();}
//     if (ReedPitchIsActive[93]  == true) {reedgfx = new ReedGFX (ReedPitchX[93 ], ReedVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  ReedVelocityAlpha[93] , ReedNoteColor[93] ); reedgfx.display();}
//     if (ReedPitchIsActive[94]  == true) {reedgfx = new ReedGFX (ReedPitchX[94 ], ReedVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  ReedVelocityAlpha[94] , ReedNoteColor[94] ); reedgfx.display();}
//     if (ReedPitchIsActive[95]  == true) {reedgfx = new ReedGFX (ReedPitchX[95 ], ReedVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  ReedVelocityAlpha[95] , ReedNoteColor[95] ); reedgfx.display();}
//     if (ReedPitchIsActive[96]  == true) {reedgfx = new ReedGFX (ReedPitchX[96 ], ReedVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  ReedVelocityAlpha[96] , ReedNoteColor[96] ); reedgfx.display();}
//     if (ReedPitchIsActive[97]  == true) {reedgfx = new ReedGFX (ReedPitchX[97 ], ReedVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  ReedVelocityAlpha[97] , ReedNoteColor[97] ); reedgfx.display();}
//     if (ReedPitchIsActive[98]  == true) {reedgfx = new ReedGFX (ReedPitchX[98 ], ReedVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  ReedVelocityAlpha[98] , ReedNoteColor[98] ); reedgfx.display();}
//     if (ReedPitchIsActive[99]  == true) {reedgfx = new ReedGFX (ReedPitchX[99 ], ReedVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  ReedVelocityAlpha[99] , ReedNoteColor[99] ); reedgfx.display();}
//     if (ReedPitchIsActive[100] == true) {reedgfx = new ReedGFX (ReedPitchX[100], ReedVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  ReedVelocityAlpha[100], ReedNoteColor[100]); reedgfx.display();}
//     if (ReedPitchIsActive[101] == true) {reedgfx = new ReedGFX (ReedPitchX[101], ReedVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  ReedVelocityAlpha[101], ReedNoteColor[101]); reedgfx.display();}
//     if (ReedPitchIsActive[102] == true) {reedgfx = new ReedGFX (ReedPitchX[102], ReedVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  ReedVelocityAlpha[102], ReedNoteColor[102]); reedgfx.display();}
//     if (ReedPitchIsActive[103] == true) {reedgfx = new ReedGFX (ReedPitchX[103], ReedVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  ReedVelocityAlpha[103], ReedNoteColor[103]); reedgfx.display();}
//     if (ReedPitchIsActive[104] == true) {reedgfx = new ReedGFX (ReedPitchX[104], ReedVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  ReedVelocityAlpha[104], ReedNoteColor[104]); reedgfx.display();}
//     if (ReedPitchIsActive[105] == true) {reedgfx = new ReedGFX (ReedPitchX[105], ReedVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  ReedVelocityAlpha[105], ReedNoteColor[105]); reedgfx.display();}
//     if (ReedPitchIsActive[106] == true) {reedgfx = new ReedGFX (ReedPitchX[106], ReedVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  ReedVelocityAlpha[106], ReedNoteColor[106]); reedgfx.display();}
//     if (ReedPitchIsActive[107] == true) {reedgfx = new ReedGFX (ReedPitchX[107], ReedVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  ReedVelocityAlpha[107], ReedNoteColor[107]); reedgfx.display();}
//     if (ReedPitchIsActive[108] == true) {reedgfx = new ReedGFX (ReedPitchX[108], ReedVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  ReedVelocityAlpha[108], ReedNoteColor[108]); reedgfx.display();}
//     if (ReedPitchIsActive[109] == true) {reedgfx = new ReedGFX (ReedPitchX[109], ReedVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  ReedVelocityAlpha[109], ReedNoteColor[109]); reedgfx.display();}
//     if (ReedPitchIsActive[110] == true) {reedgfx = new ReedGFX (ReedPitchX[110], ReedVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  ReedVelocityAlpha[110], ReedNoteColor[110]); reedgfx.display();}
//     if (ReedPitchIsActive[111] == true) {reedgfx = new ReedGFX (ReedPitchX[111], ReedVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  ReedVelocityAlpha[111], ReedNoteColor[111]); reedgfx.display();}
//     if (ReedPitchIsActive[112] == true) {reedgfx = new ReedGFX (ReedPitchX[112], ReedVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  ReedVelocityAlpha[112], ReedNoteColor[112]); reedgfx.display();}
//     if (ReedPitchIsActive[113] == true) {reedgfx = new ReedGFX (ReedPitchX[113], ReedVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  ReedVelocityAlpha[113], ReedNoteColor[113]); reedgfx.display();}
//     if (ReedPitchIsActive[114] == true) {reedgfx = new ReedGFX (ReedPitchX[114], ReedVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  ReedVelocityAlpha[114], ReedNoteColor[114]); reedgfx.display();}
//     if (ReedPitchIsActive[115] == true) {reedgfx = new ReedGFX (ReedPitchX[115], ReedVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  ReedVelocityAlpha[115], ReedNoteColor[115]); reedgfx.display();}
//     if (ReedPitchIsActive[116] == true) {reedgfx = new ReedGFX (ReedPitchX[116], ReedVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  ReedVelocityAlpha[116], ReedNoteColor[116]); reedgfx.display();}
//     if (ReedPitchIsActive[117] == true) {reedgfx = new ReedGFX (ReedPitchX[117], ReedVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  ReedVelocityAlpha[117], ReedNoteColor[117]); reedgfx.display();}
//     if (ReedPitchIsActive[118] == true) {reedgfx = new ReedGFX (ReedPitchX[118], ReedVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  ReedVelocityAlpha[118], ReedNoteColor[118]); reedgfx.display();}
//     if (ReedPitchIsActive[119] == true) {reedgfx = new ReedGFX (ReedPitchX[119], ReedVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  ReedVelocityAlpha[119], ReedNoteColor[119]); reedgfx.display();}
//     if (ReedPitchIsActive[120] == true) {reedgfx = new ReedGFX (ReedPitchX[120], ReedVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], ReedVelocityAlpha[120], ReedNoteColor[120]); reedgfx.display();}
//     if (ReedPitchIsActive[121] == true) {reedgfx = new ReedGFX (ReedPitchX[121], ReedVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], ReedVelocityAlpha[121], ReedNoteColor[121]); reedgfx.display();}
//     if (ReedPitchIsActive[122] == true) {reedgfx = new ReedGFX (ReedPitchX[122], ReedVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], ReedVelocityAlpha[122], ReedNoteColor[122]); reedgfx.display();}
//     if (ReedPitchIsActive[123] == true) {reedgfx = new ReedGFX (ReedPitchX[123], ReedVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], ReedVelocityAlpha[123], ReedNoteColor[123]); reedgfx.display();}
//     if (ReedPitchIsActive[124] == true) {reedgfx = new ReedGFX (ReedPitchX[124], ReedVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], ReedVelocityAlpha[124], ReedNoteColor[124]); reedgfx.display();}
//     if (ReedPitchIsActive[125] == true) {reedgfx = new ReedGFX (ReedPitchX[125], ReedVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], ReedVelocityAlpha[125], ReedNoteColor[125]); reedgfx.display();}
//     if (ReedPitchIsActive[126] == true) {reedgfx = new ReedGFX (ReedPitchX[126], ReedVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], ReedVelocityAlpha[126], ReedNoteColor[126]); reedgfx.display();}
//     if (ReedPitchIsActive[127] == true) {reedgfx = new ReedGFX (ReedPitchX[127], ReedVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], ReedVelocityAlpha[127], ReedNoteColor[127]); reedgfx.display();}
//   }
// }

// void PipeGFXDisplay(){//Pipe
//   if (ChannelIsActive[9] == true) {// Pipe Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
//     if (PipePitchIsActive[0]   == true) {pipegfx = new PipeGFX (PipePitchX[0  ], PipeVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  PipeVelocityAlpha[0]  , PipeNoteColor[0]  ); pipegfx.display();}
//     if (PipePitchIsActive[1]   == true) {pipegfx = new PipeGFX (PipePitchX[1  ], PipeVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  PipeVelocityAlpha[1]  , PipeNoteColor[1]  ); pipegfx.display();}
//     if (PipePitchIsActive[2]   == true) {pipegfx = new PipeGFX (PipePitchX[2  ], PipeVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  PipeVelocityAlpha[2]  , PipeNoteColor[2]  ); pipegfx.display();}
//     if (PipePitchIsActive[3]   == true) {pipegfx = new PipeGFX (PipePitchX[3  ], PipeVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  PipeVelocityAlpha[3]  , PipeNoteColor[3]  ); pipegfx.display();}
//     if (PipePitchIsActive[4]   == true) {pipegfx = new PipeGFX (PipePitchX[4  ], PipeVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  PipeVelocityAlpha[4]  , PipeNoteColor[4]  ); pipegfx.display();}
//     if (PipePitchIsActive[5]   == true) {pipegfx = new PipeGFX (PipePitchX[5  ], PipeVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  PipeVelocityAlpha[5]  , PipeNoteColor[5]  ); pipegfx.display();}
//     if (PipePitchIsActive[6]   == true) {pipegfx = new PipeGFX (PipePitchX[6  ], PipeVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  PipeVelocityAlpha[6]  , PipeNoteColor[6]  ); pipegfx.display();}
//     if (PipePitchIsActive[7]   == true) {pipegfx = new PipeGFX (PipePitchX[7  ], PipeVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  PipeVelocityAlpha[7]  , PipeNoteColor[7]  ); pipegfx.display();}
//     if (PipePitchIsActive[8]   == true) {pipegfx = new PipeGFX (PipePitchX[8  ], PipeVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  PipeVelocityAlpha[8]  , PipeNoteColor[8]  ); pipegfx.display();}
//     if (PipePitchIsActive[9]   == true) {pipegfx = new PipeGFX (PipePitchX[9  ], PipeVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  PipeVelocityAlpha[9]  , PipeNoteColor[9]  ); pipegfx.display();}
//     if (PipePitchIsActive[10]  == true) {pipegfx = new PipeGFX (PipePitchX[10 ], PipeVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  PipeVelocityAlpha[10] , PipeNoteColor[10] ); pipegfx.display();}
//     if (PipePitchIsActive[11]  == true) {pipegfx = new PipeGFX (PipePitchX[11 ], PipeVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  PipeVelocityAlpha[11] , PipeNoteColor[11] ); pipegfx.display();}
//     if (PipePitchIsActive[12]  == true) {pipegfx = new PipeGFX (PipePitchX[12 ], PipeVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  PipeVelocityAlpha[12] , PipeNoteColor[12] ); pipegfx.display();}
//     if (PipePitchIsActive[13]  == true) {pipegfx = new PipeGFX (PipePitchX[13 ], PipeVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  PipeVelocityAlpha[13] , PipeNoteColor[13] ); pipegfx.display();}
//     if (PipePitchIsActive[14]  == true) {pipegfx = new PipeGFX (PipePitchX[14 ], PipeVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  PipeVelocityAlpha[14] , PipeNoteColor[14] ); pipegfx.display();}
//     if (PipePitchIsActive[15]  == true) {pipegfx = new PipeGFX (PipePitchX[15 ], PipeVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  PipeVelocityAlpha[15] , PipeNoteColor[15] ); pipegfx.display();}
//     if (PipePitchIsActive[16]  == true) {pipegfx = new PipeGFX (PipePitchX[16 ], PipeVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  PipeVelocityAlpha[16] , PipeNoteColor[16] ); pipegfx.display();}
//     if (PipePitchIsActive[17]  == true) {pipegfx = new PipeGFX (PipePitchX[17 ], PipeVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  PipeVelocityAlpha[17] , PipeNoteColor[17] ); pipegfx.display();}
//     if (PipePitchIsActive[18]  == true) {pipegfx = new PipeGFX (PipePitchX[18 ], PipeVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  PipeVelocityAlpha[18] , PipeNoteColor[18] ); pipegfx.display();}
//     if (PipePitchIsActive[19]  == true) {pipegfx = new PipeGFX (PipePitchX[19 ], PipeVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  PipeVelocityAlpha[19] , PipeNoteColor[19] ); pipegfx.display();}
//     if (PipePitchIsActive[20]  == true) {pipegfx = new PipeGFX (PipePitchX[20 ], PipeVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  PipeVelocityAlpha[20] , PipeNoteColor[20] ); pipegfx.display();}
//     if (PipePitchIsActive[21]  == true) {pipegfx = new PipeGFX (PipePitchX[21 ], PipeVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  PipeVelocityAlpha[21] , PipeNoteColor[21] ); pipegfx.display();}
//     if (PipePitchIsActive[22]  == true) {pipegfx = new PipeGFX (PipePitchX[22 ], PipeVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  PipeVelocityAlpha[22] , PipeNoteColor[22] ); pipegfx.display();}
//     if (PipePitchIsActive[23]  == true) {pipegfx = new PipeGFX (PipePitchX[23 ], PipeVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  PipeVelocityAlpha[23] , PipeNoteColor[23] ); pipegfx.display();}
//     if (PipePitchIsActive[24]  == true) {pipegfx = new PipeGFX (PipePitchX[24 ], PipeVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  PipeVelocityAlpha[24] , PipeNoteColor[24] ); pipegfx.display();}
//     if (PipePitchIsActive[25]  == true) {pipegfx = new PipeGFX (PipePitchX[25 ], PipeVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  PipeVelocityAlpha[25] , PipeNoteColor[25] ); pipegfx.display();}
//     if (PipePitchIsActive[26]  == true) {pipegfx = new PipeGFX (PipePitchX[26 ], PipeVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  PipeVelocityAlpha[26] , PipeNoteColor[26] ); pipegfx.display();}
//     if (PipePitchIsActive[27]  == true) {pipegfx = new PipeGFX (PipePitchX[27 ], PipeVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  PipeVelocityAlpha[27] , PipeNoteColor[27] ); pipegfx.display();}
//     if (PipePitchIsActive[28]  == true) {pipegfx = new PipeGFX (PipePitchX[28 ], PipeVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  PipeVelocityAlpha[28] , PipeNoteColor[28] ); pipegfx.display();}
//     if (PipePitchIsActive[29]  == true) {pipegfx = new PipeGFX (PipePitchX[29 ], PipeVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  PipeVelocityAlpha[29] , PipeNoteColor[29] ); pipegfx.display();}
//     if (PipePitchIsActive[30]  == true) {pipegfx = new PipeGFX (PipePitchX[30 ], PipeVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  PipeVelocityAlpha[30] , PipeNoteColor[30] ); pipegfx.display();}
//     if (PipePitchIsActive[31]  == true) {pipegfx = new PipeGFX (PipePitchX[31 ], PipeVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  PipeVelocityAlpha[31] , PipeNoteColor[31] ); pipegfx.display();}
//     if (PipePitchIsActive[32]  == true) {pipegfx = new PipeGFX (PipePitchX[32 ], PipeVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  PipeVelocityAlpha[32] , PipeNoteColor[32] ); pipegfx.display();}
//     if (PipePitchIsActive[33]  == true) {pipegfx = new PipeGFX (PipePitchX[33 ], PipeVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  PipeVelocityAlpha[33] , PipeNoteColor[33] ); pipegfx.display();}
//     if (PipePitchIsActive[34]  == true) {pipegfx = new PipeGFX (PipePitchX[34 ], PipeVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  PipeVelocityAlpha[34] , PipeNoteColor[34] ); pipegfx.display();}
//     if (PipePitchIsActive[35]  == true) {pipegfx = new PipeGFX (PipePitchX[35 ], PipeVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  PipeVelocityAlpha[35] , PipeNoteColor[35] ); pipegfx.display();}
//     if (PipePitchIsActive[36]  == true) {pipegfx = new PipeGFX (PipePitchX[36 ], PipeVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  PipeVelocityAlpha[36] , PipeNoteColor[36] ); pipegfx.display();}
//     if (PipePitchIsActive[37]  == true) {pipegfx = new PipeGFX (PipePitchX[37 ], PipeVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  PipeVelocityAlpha[37] , PipeNoteColor[37] ); pipegfx.display();}
//     if (PipePitchIsActive[38]  == true) {pipegfx = new PipeGFX (PipePitchX[38 ], PipeVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  PipeVelocityAlpha[38] , PipeNoteColor[38] ); pipegfx.display();}
//     if (PipePitchIsActive[39]  == true) {pipegfx = new PipeGFX (PipePitchX[39 ], PipeVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  PipeVelocityAlpha[39] , PipeNoteColor[39] ); pipegfx.display();}
//     if (PipePitchIsActive[40]  == true) {pipegfx = new PipeGFX (PipePitchX[40 ], PipeVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  PipeVelocityAlpha[40] , PipeNoteColor[40] ); pipegfx.display();}
//     if (PipePitchIsActive[41]  == true) {pipegfx = new PipeGFX (PipePitchX[41 ], PipeVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  PipeVelocityAlpha[41] , PipeNoteColor[41] ); pipegfx.display();}
//     if (PipePitchIsActive[42]  == true) {pipegfx = new PipeGFX (PipePitchX[42 ], PipeVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  PipeVelocityAlpha[42] , PipeNoteColor[42] ); pipegfx.display();}
//     if (PipePitchIsActive[43]  == true) {pipegfx = new PipeGFX (PipePitchX[43 ], PipeVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  PipeVelocityAlpha[43] , PipeNoteColor[43] ); pipegfx.display();}
//     if (PipePitchIsActive[44]  == true) {pipegfx = new PipeGFX (PipePitchX[44 ], PipeVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  PipeVelocityAlpha[44] , PipeNoteColor[44] ); pipegfx.display();}
//     if (PipePitchIsActive[45]  == true) {pipegfx = new PipeGFX (PipePitchX[45 ], PipeVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  PipeVelocityAlpha[45] , PipeNoteColor[45] ); pipegfx.display();}
//     if (PipePitchIsActive[46]  == true) {pipegfx = new PipeGFX (PipePitchX[46 ], PipeVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  PipeVelocityAlpha[46] , PipeNoteColor[46] ); pipegfx.display();}
//     if (PipePitchIsActive[47]  == true) {pipegfx = new PipeGFX (PipePitchX[47 ], PipeVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  PipeVelocityAlpha[47] , PipeNoteColor[47] ); pipegfx.display();}
//     if (PipePitchIsActive[48]  == true) {pipegfx = new PipeGFX (PipePitchX[48 ], PipeVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  PipeVelocityAlpha[48] , PipeNoteColor[48] ); pipegfx.display();}
//     if (PipePitchIsActive[49]  == true) {pipegfx = new PipeGFX (PipePitchX[49 ], PipeVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  PipeVelocityAlpha[49] , PipeNoteColor[49] ); pipegfx.display();}
//     if (PipePitchIsActive[50]  == true) {pipegfx = new PipeGFX (PipePitchX[50 ], PipeVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  PipeVelocityAlpha[50] , PipeNoteColor[50] ); pipegfx.display();}
//     if (PipePitchIsActive[51]  == true) {pipegfx = new PipeGFX (PipePitchX[51 ], PipeVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  PipeVelocityAlpha[51] , PipeNoteColor[51] ); pipegfx.display();}
//     if (PipePitchIsActive[52]  == true) {pipegfx = new PipeGFX (PipePitchX[52 ], PipeVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  PipeVelocityAlpha[52] , PipeNoteColor[52] ); pipegfx.display();}
//     if (PipePitchIsActive[53]  == true) {pipegfx = new PipeGFX (PipePitchX[53 ], PipeVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  PipeVelocityAlpha[53] , PipeNoteColor[53] ); pipegfx.display();}
//     if (PipePitchIsActive[54]  == true) {pipegfx = new PipeGFX (PipePitchX[54 ], PipeVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  PipeVelocityAlpha[54] , PipeNoteColor[54] ); pipegfx.display();}
//     if (PipePitchIsActive[55]  == true) {pipegfx = new PipeGFX (PipePitchX[55 ], PipeVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  PipeVelocityAlpha[55] , PipeNoteColor[55] ); pipegfx.display();}
//     if (PipePitchIsActive[56]  == true) {pipegfx = new PipeGFX (PipePitchX[56 ], PipeVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  PipeVelocityAlpha[56] , PipeNoteColor[56] ); pipegfx.display();}
//     if (PipePitchIsActive[57]  == true) {pipegfx = new PipeGFX (PipePitchX[57 ], PipeVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  PipeVelocityAlpha[57] , PipeNoteColor[57] ); pipegfx.display();}
//     if (PipePitchIsActive[58]  == true) {pipegfx = new PipeGFX (PipePitchX[58 ], PipeVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  PipeVelocityAlpha[58] , PipeNoteColor[58] ); pipegfx.display();}
//     if (PipePitchIsActive[59]  == true) {pipegfx = new PipeGFX (PipePitchX[59 ], PipeVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  PipeVelocityAlpha[59] , PipeNoteColor[59] ); pipegfx.display();}
//     if (PipePitchIsActive[60]  == true) {pipegfx = new PipeGFX (PipePitchX[60 ], PipeVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  PipeVelocityAlpha[60] , PipeNoteColor[60] ); pipegfx.display();}
//     if (PipePitchIsActive[61]  == true) {pipegfx = new PipeGFX (PipePitchX[61 ], PipeVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  PipeVelocityAlpha[61] , PipeNoteColor[61] ); pipegfx.display();}
//     if (PipePitchIsActive[62]  == true) {pipegfx = new PipeGFX (PipePitchX[62 ], PipeVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  PipeVelocityAlpha[62] , PipeNoteColor[62] ); pipegfx.display();}
//     if (PipePitchIsActive[63]  == true) {pipegfx = new PipeGFX (PipePitchX[63 ], PipeVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  PipeVelocityAlpha[63] , PipeNoteColor[63] ); pipegfx.display();}
//     if (PipePitchIsActive[64]  == true) {pipegfx = new PipeGFX (PipePitchX[64 ], PipeVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  PipeVelocityAlpha[64] , PipeNoteColor[64] ); pipegfx.display();}
//     if (PipePitchIsActive[65]  == true) {pipegfx = new PipeGFX (PipePitchX[65 ], PipeVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  PipeVelocityAlpha[65] , PipeNoteColor[65] ); pipegfx.display();}
//     if (PipePitchIsActive[66]  == true) {pipegfx = new PipeGFX (PipePitchX[66 ], PipeVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  PipeVelocityAlpha[66] , PipeNoteColor[66] ); pipegfx.display();}
//     if (PipePitchIsActive[67]  == true) {pipegfx = new PipeGFX (PipePitchX[67 ], PipeVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  PipeVelocityAlpha[67] , PipeNoteColor[67] ); pipegfx.display();}
//     if (PipePitchIsActive[68]  == true) {pipegfx = new PipeGFX (PipePitchX[68 ], PipeVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  PipeVelocityAlpha[68] , PipeNoteColor[68] ); pipegfx.display();}
//     if (PipePitchIsActive[69]  == true) {pipegfx = new PipeGFX (PipePitchX[69 ], PipeVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  PipeVelocityAlpha[69] , PipeNoteColor[69] ); pipegfx.display();}
//     if (PipePitchIsActive[70]  == true) {pipegfx = new PipeGFX (PipePitchX[70 ], PipeVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  PipeVelocityAlpha[70] , PipeNoteColor[70] ); pipegfx.display();}
//     if (PipePitchIsActive[71]  == true) {pipegfx = new PipeGFX (PipePitchX[71 ], PipeVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  PipeVelocityAlpha[71] , PipeNoteColor[71] ); pipegfx.display();}
//     if (PipePitchIsActive[72]  == true) {pipegfx = new PipeGFX (PipePitchX[72 ], PipeVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  PipeVelocityAlpha[72] , PipeNoteColor[72] ); pipegfx.display();}
//     if (PipePitchIsActive[73]  == true) {pipegfx = new PipeGFX (PipePitchX[73 ], PipeVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  PipeVelocityAlpha[73] , PipeNoteColor[73] ); pipegfx.display();}
//     if (PipePitchIsActive[74]  == true) {pipegfx = new PipeGFX (PipePitchX[74 ], PipeVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  PipeVelocityAlpha[74] , PipeNoteColor[74] ); pipegfx.display();}
//     if (PipePitchIsActive[75]  == true) {pipegfx = new PipeGFX (PipePitchX[75 ], PipeVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  PipeVelocityAlpha[75] , PipeNoteColor[75] ); pipegfx.display();}
//     if (PipePitchIsActive[76]  == true) {pipegfx = new PipeGFX (PipePitchX[76 ], PipeVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  PipeVelocityAlpha[76] , PipeNoteColor[76] ); pipegfx.display();}
//     if (PipePitchIsActive[77]  == true) {pipegfx = new PipeGFX (PipePitchX[77 ], PipeVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  PipeVelocityAlpha[77] , PipeNoteColor[77] ); pipegfx.display();}
//     if (PipePitchIsActive[78]  == true) {pipegfx = new PipeGFX (PipePitchX[78 ], PipeVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  PipeVelocityAlpha[78] , PipeNoteColor[78] ); pipegfx.display();}
//     if (PipePitchIsActive[79]  == true) {pipegfx = new PipeGFX (PipePitchX[79 ], PipeVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  PipeVelocityAlpha[79] , PipeNoteColor[79] ); pipegfx.display();}
//     if (PipePitchIsActive[80]  == true) {pipegfx = new PipeGFX (PipePitchX[80 ], PipeVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  PipeVelocityAlpha[80] , PipeNoteColor[80] ); pipegfx.display();}
//     if (PipePitchIsActive[81]  == true) {pipegfx = new PipeGFX (PipePitchX[81 ], PipeVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  PipeVelocityAlpha[81] , PipeNoteColor[81] ); pipegfx.display();}
//     if (PipePitchIsActive[82]  == true) {pipegfx = new PipeGFX (PipePitchX[82 ], PipeVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  PipeVelocityAlpha[82] , PipeNoteColor[82] ); pipegfx.display();}
//     if (PipePitchIsActive[83]  == true) {pipegfx = new PipeGFX (PipePitchX[83 ], PipeVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  PipeVelocityAlpha[83] , PipeNoteColor[83] ); pipegfx.display();}
//     if (PipePitchIsActive[84]  == true) {pipegfx = new PipeGFX (PipePitchX[84 ], PipeVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  PipeVelocityAlpha[84] , PipeNoteColor[84] ); pipegfx.display();}
//     if (PipePitchIsActive[85]  == true) {pipegfx = new PipeGFX (PipePitchX[85 ], PipeVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  PipeVelocityAlpha[85] , PipeNoteColor[85] ); pipegfx.display();}
//     if (PipePitchIsActive[86]  == true) {pipegfx = new PipeGFX (PipePitchX[86 ], PipeVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  PipeVelocityAlpha[86] , PipeNoteColor[86] ); pipegfx.display();}
//     if (PipePitchIsActive[87]  == true) {pipegfx = new PipeGFX (PipePitchX[87 ], PipeVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  PipeVelocityAlpha[87] , PipeNoteColor[87] ); pipegfx.display();}
//     if (PipePitchIsActive[88]  == true) {pipegfx = new PipeGFX (PipePitchX[88 ], PipeVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  PipeVelocityAlpha[88] , PipeNoteColor[88] ); pipegfx.display();}
//     if (PipePitchIsActive[89]  == true) {pipegfx = new PipeGFX (PipePitchX[89 ], PipeVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  PipeVelocityAlpha[89] , PipeNoteColor[89] ); pipegfx.display();}
//     if (PipePitchIsActive[90]  == true) {pipegfx = new PipeGFX (PipePitchX[90 ], PipeVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  PipeVelocityAlpha[90] , PipeNoteColor[90] ); pipegfx.display();}
//     if (PipePitchIsActive[91]  == true) {pipegfx = new PipeGFX (PipePitchX[91 ], PipeVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  PipeVelocityAlpha[91] , PipeNoteColor[91] ); pipegfx.display();}
//     if (PipePitchIsActive[92]  == true) {pipegfx = new PipeGFX (PipePitchX[92 ], PipeVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  PipeVelocityAlpha[92] , PipeNoteColor[92] ); pipegfx.display();}
//     if (PipePitchIsActive[93]  == true) {pipegfx = new PipeGFX (PipePitchX[93 ], PipeVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  PipeVelocityAlpha[93] , PipeNoteColor[93] ); pipegfx.display();}
//     if (PipePitchIsActive[94]  == true) {pipegfx = new PipeGFX (PipePitchX[94 ], PipeVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  PipeVelocityAlpha[94] , PipeNoteColor[94] ); pipegfx.display();}
//     if (PipePitchIsActive[95]  == true) {pipegfx = new PipeGFX (PipePitchX[95 ], PipeVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  PipeVelocityAlpha[95] , PipeNoteColor[95] ); pipegfx.display();}
//     if (PipePitchIsActive[96]  == true) {pipegfx = new PipeGFX (PipePitchX[96 ], PipeVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  PipeVelocityAlpha[96] , PipeNoteColor[96] ); pipegfx.display();}
//     if (PipePitchIsActive[97]  == true) {pipegfx = new PipeGFX (PipePitchX[97 ], PipeVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  PipeVelocityAlpha[97] , PipeNoteColor[97] ); pipegfx.display();}
//     if (PipePitchIsActive[98]  == true) {pipegfx = new PipeGFX (PipePitchX[98 ], PipeVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  PipeVelocityAlpha[98] , PipeNoteColor[98] ); pipegfx.display();}
//     if (PipePitchIsActive[99]  == true) {pipegfx = new PipeGFX (PipePitchX[99 ], PipeVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  PipeVelocityAlpha[99] , PipeNoteColor[99] ); pipegfx.display();}
//     if (PipePitchIsActive[100] == true) {pipegfx = new PipeGFX (PipePitchX[100], PipeVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  PipeVelocityAlpha[100], PipeNoteColor[100]); pipegfx.display();}
//     if (PipePitchIsActive[101] == true) {pipegfx = new PipeGFX (PipePitchX[101], PipeVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  PipeVelocityAlpha[101], PipeNoteColor[101]); pipegfx.display();}
//     if (PipePitchIsActive[102] == true) {pipegfx = new PipeGFX (PipePitchX[102], PipeVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  PipeVelocityAlpha[102], PipeNoteColor[102]); pipegfx.display();}
//     if (PipePitchIsActive[103] == true) {pipegfx = new PipeGFX (PipePitchX[103], PipeVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  PipeVelocityAlpha[103], PipeNoteColor[103]); pipegfx.display();}
//     if (PipePitchIsActive[104] == true) {pipegfx = new PipeGFX (PipePitchX[104], PipeVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  PipeVelocityAlpha[104], PipeNoteColor[104]); pipegfx.display();}
//     if (PipePitchIsActive[105] == true) {pipegfx = new PipeGFX (PipePitchX[105], PipeVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  PipeVelocityAlpha[105], PipeNoteColor[105]); pipegfx.display();}
//     if (PipePitchIsActive[106] == true) {pipegfx = new PipeGFX (PipePitchX[106], PipeVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  PipeVelocityAlpha[106], PipeNoteColor[106]); pipegfx.display();}
//     if (PipePitchIsActive[107] == true) {pipegfx = new PipeGFX (PipePitchX[107], PipeVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  PipeVelocityAlpha[107], PipeNoteColor[107]); pipegfx.display();}
//     if (PipePitchIsActive[108] == true) {pipegfx = new PipeGFX (PipePitchX[108], PipeVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  PipeVelocityAlpha[108], PipeNoteColor[108]); pipegfx.display();}
//     if (PipePitchIsActive[109] == true) {pipegfx = new PipeGFX (PipePitchX[109], PipeVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  PipeVelocityAlpha[109], PipeNoteColor[109]); pipegfx.display();}
//     if (PipePitchIsActive[110] == true) {pipegfx = new PipeGFX (PipePitchX[110], PipeVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  PipeVelocityAlpha[110], PipeNoteColor[110]); pipegfx.display();}
//     if (PipePitchIsActive[111] == true) {pipegfx = new PipeGFX (PipePitchX[111], PipeVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  PipeVelocityAlpha[111], PipeNoteColor[111]); pipegfx.display();}
//     if (PipePitchIsActive[112] == true) {pipegfx = new PipeGFX (PipePitchX[112], PipeVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  PipeVelocityAlpha[112], PipeNoteColor[112]); pipegfx.display();}
//     if (PipePitchIsActive[113] == true) {pipegfx = new PipeGFX (PipePitchX[113], PipeVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  PipeVelocityAlpha[113], PipeNoteColor[113]); pipegfx.display();}
//     if (PipePitchIsActive[114] == true) {pipegfx = new PipeGFX (PipePitchX[114], PipeVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  PipeVelocityAlpha[114], PipeNoteColor[114]); pipegfx.display();}
//     if (PipePitchIsActive[115] == true) {pipegfx = new PipeGFX (PipePitchX[115], PipeVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  PipeVelocityAlpha[115], PipeNoteColor[115]); pipegfx.display();}
//     if (PipePitchIsActive[116] == true) {pipegfx = new PipeGFX (PipePitchX[116], PipeVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  PipeVelocityAlpha[116], PipeNoteColor[116]); pipegfx.display();}
//     if (PipePitchIsActive[117] == true) {pipegfx = new PipeGFX (PipePitchX[117], PipeVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  PipeVelocityAlpha[117], PipeNoteColor[117]); pipegfx.display();}
//     if (PipePitchIsActive[118] == true) {pipegfx = new PipeGFX (PipePitchX[118], PipeVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  PipeVelocityAlpha[118], PipeNoteColor[118]); pipegfx.display();}
//     if (PipePitchIsActive[119] == true) {pipegfx = new PipeGFX (PipePitchX[119], PipeVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  PipeVelocityAlpha[119], PipeNoteColor[119]); pipegfx.display();}
//     if (PipePitchIsActive[120] == true) {pipegfx = new PipeGFX (PipePitchX[120], PipeVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], PipeVelocityAlpha[120], PipeNoteColor[120]); pipegfx.display();}
//     if (PipePitchIsActive[121] == true) {pipegfx = new PipeGFX (PipePitchX[121], PipeVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], PipeVelocityAlpha[121], PipeNoteColor[121]); pipegfx.display();}
//     if (PipePitchIsActive[122] == true) {pipegfx = new PipeGFX (PipePitchX[122], PipeVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], PipeVelocityAlpha[122], PipeNoteColor[122]); pipegfx.display();}
//     if (PipePitchIsActive[123] == true) {pipegfx = new PipeGFX (PipePitchX[123], PipeVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], PipeVelocityAlpha[123], PipeNoteColor[123]); pipegfx.display();}
//     if (PipePitchIsActive[124] == true) {pipegfx = new PipeGFX (PipePitchX[124], PipeVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], PipeVelocityAlpha[124], PipeNoteColor[124]); pipegfx.display();}
//     if (PipePitchIsActive[125] == true) {pipegfx = new PipeGFX (PipePitchX[125], PipeVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], PipeVelocityAlpha[125], PipeNoteColor[125]); pipegfx.display();}
//     if (PipePitchIsActive[126] == true) {pipegfx = new PipeGFX (PipePitchX[126], PipeVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], PipeVelocityAlpha[126], PipeNoteColor[126]); pipegfx.display();}
//     if (PipePitchIsActive[127] == true) {pipegfx = new PipeGFX (PipePitchX[127], PipeVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], PipeVelocityAlpha[127], PipeNoteColor[127]); pipegfx.display();}
//   }
// }

// void SynthLeadGFXDisplay(){//SynthLead
//   if (ChannelIsActive[10] == true) {// SynthLead Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
//     if (SynthLeadPitchIsActive[0]   == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[0  ], SynthLeadVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthLeadVelocityAlpha[0]  , SynthLeadNoteColor[0]  ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[1]   == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[1  ], SynthLeadVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthLeadVelocityAlpha[1]  , SynthLeadNoteColor[1]  ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[2]   == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[2  ], SynthLeadVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthLeadVelocityAlpha[2]  , SynthLeadNoteColor[2]  ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[3]   == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[3  ], SynthLeadVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthLeadVelocityAlpha[3]  , SynthLeadNoteColor[3]  ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[4]   == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[4  ], SynthLeadVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthLeadVelocityAlpha[4]  , SynthLeadNoteColor[4]  ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[5]   == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[5  ], SynthLeadVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthLeadVelocityAlpha[5]  , SynthLeadNoteColor[5]  ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[6]   == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[6  ], SynthLeadVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthLeadVelocityAlpha[6]  , SynthLeadNoteColor[6]  ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[7]   == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[7  ], SynthLeadVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthLeadVelocityAlpha[7]  , SynthLeadNoteColor[7]  ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[8]   == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[8  ], SynthLeadVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthLeadVelocityAlpha[8]  , SynthLeadNoteColor[8]  ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[9]   == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[9  ], SynthLeadVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthLeadVelocityAlpha[9]  , SynthLeadNoteColor[9]  ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[10]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[10 ], SynthLeadVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthLeadVelocityAlpha[10] , SynthLeadNoteColor[10] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[11]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[11 ], SynthLeadVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthLeadVelocityAlpha[11] , SynthLeadNoteColor[11] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[12]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[12 ], SynthLeadVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthLeadVelocityAlpha[12] , SynthLeadNoteColor[12] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[13]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[13 ], SynthLeadVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthLeadVelocityAlpha[13] , SynthLeadNoteColor[13] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[14]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[14 ], SynthLeadVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthLeadVelocityAlpha[14] , SynthLeadNoteColor[14] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[15]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[15 ], SynthLeadVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthLeadVelocityAlpha[15] , SynthLeadNoteColor[15] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[16]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[16 ], SynthLeadVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthLeadVelocityAlpha[16] , SynthLeadNoteColor[16] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[17]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[17 ], SynthLeadVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthLeadVelocityAlpha[17] , SynthLeadNoteColor[17] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[18]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[18 ], SynthLeadVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthLeadVelocityAlpha[18] , SynthLeadNoteColor[18] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[19]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[19 ], SynthLeadVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthLeadVelocityAlpha[19] , SynthLeadNoteColor[19] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[20]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[20 ], SynthLeadVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthLeadVelocityAlpha[20] , SynthLeadNoteColor[20] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[21]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[21 ], SynthLeadVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthLeadVelocityAlpha[21] , SynthLeadNoteColor[21] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[22]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[22 ], SynthLeadVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthLeadVelocityAlpha[22] , SynthLeadNoteColor[22] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[23]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[23 ], SynthLeadVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthLeadVelocityAlpha[23] , SynthLeadNoteColor[23] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[24]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[24 ], SynthLeadVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthLeadVelocityAlpha[24] , SynthLeadNoteColor[24] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[25]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[25 ], SynthLeadVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthLeadVelocityAlpha[25] , SynthLeadNoteColor[25] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[26]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[26 ], SynthLeadVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthLeadVelocityAlpha[26] , SynthLeadNoteColor[26] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[27]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[27 ], SynthLeadVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthLeadVelocityAlpha[27] , SynthLeadNoteColor[27] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[28]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[28 ], SynthLeadVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthLeadVelocityAlpha[28] , SynthLeadNoteColor[28] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[29]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[29 ], SynthLeadVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthLeadVelocityAlpha[29] , SynthLeadNoteColor[29] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[30]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[30 ], SynthLeadVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthLeadVelocityAlpha[30] , SynthLeadNoteColor[30] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[31]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[31 ], SynthLeadVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthLeadVelocityAlpha[31] , SynthLeadNoteColor[31] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[32]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[32 ], SynthLeadVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthLeadVelocityAlpha[32] , SynthLeadNoteColor[32] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[33]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[33 ], SynthLeadVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthLeadVelocityAlpha[33] , SynthLeadNoteColor[33] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[34]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[34 ], SynthLeadVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthLeadVelocityAlpha[34] , SynthLeadNoteColor[34] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[35]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[35 ], SynthLeadVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthLeadVelocityAlpha[35] , SynthLeadNoteColor[35] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[36]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[36 ], SynthLeadVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthLeadVelocityAlpha[36] , SynthLeadNoteColor[36] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[37]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[37 ], SynthLeadVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthLeadVelocityAlpha[37] , SynthLeadNoteColor[37] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[38]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[38 ], SynthLeadVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthLeadVelocityAlpha[38] , SynthLeadNoteColor[38] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[39]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[39 ], SynthLeadVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthLeadVelocityAlpha[39] , SynthLeadNoteColor[39] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[40]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[40 ], SynthLeadVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthLeadVelocityAlpha[40] , SynthLeadNoteColor[40] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[41]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[41 ], SynthLeadVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthLeadVelocityAlpha[41] , SynthLeadNoteColor[41] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[42]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[42 ], SynthLeadVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthLeadVelocityAlpha[42] , SynthLeadNoteColor[42] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[43]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[43 ], SynthLeadVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthLeadVelocityAlpha[43] , SynthLeadNoteColor[43] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[44]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[44 ], SynthLeadVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthLeadVelocityAlpha[44] , SynthLeadNoteColor[44] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[45]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[45 ], SynthLeadVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthLeadVelocityAlpha[45] , SynthLeadNoteColor[45] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[46]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[46 ], SynthLeadVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthLeadVelocityAlpha[46] , SynthLeadNoteColor[46] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[47]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[47 ], SynthLeadVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthLeadVelocityAlpha[47] , SynthLeadNoteColor[47] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[48]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[48 ], SynthLeadVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthLeadVelocityAlpha[48] , SynthLeadNoteColor[48] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[49]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[49 ], SynthLeadVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthLeadVelocityAlpha[49] , SynthLeadNoteColor[49] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[50]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[50 ], SynthLeadVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthLeadVelocityAlpha[50] , SynthLeadNoteColor[50] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[51]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[51 ], SynthLeadVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthLeadVelocityAlpha[51] , SynthLeadNoteColor[51] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[52]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[52 ], SynthLeadVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthLeadVelocityAlpha[52] , SynthLeadNoteColor[52] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[53]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[53 ], SynthLeadVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthLeadVelocityAlpha[53] , SynthLeadNoteColor[53] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[54]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[54 ], SynthLeadVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthLeadVelocityAlpha[54] , SynthLeadNoteColor[54] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[55]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[55 ], SynthLeadVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthLeadVelocityAlpha[55] , SynthLeadNoteColor[55] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[56]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[56 ], SynthLeadVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthLeadVelocityAlpha[56] , SynthLeadNoteColor[56] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[57]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[57 ], SynthLeadVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthLeadVelocityAlpha[57] , SynthLeadNoteColor[57] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[58]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[58 ], SynthLeadVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthLeadVelocityAlpha[58] , SynthLeadNoteColor[58] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[59]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[59 ], SynthLeadVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthLeadVelocityAlpha[59] , SynthLeadNoteColor[59] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[60]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[60 ], SynthLeadVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthLeadVelocityAlpha[60] , SynthLeadNoteColor[60] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[61]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[61 ], SynthLeadVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthLeadVelocityAlpha[61] , SynthLeadNoteColor[61] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[62]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[62 ], SynthLeadVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthLeadVelocityAlpha[62] , SynthLeadNoteColor[62] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[63]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[63 ], SynthLeadVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthLeadVelocityAlpha[63] , SynthLeadNoteColor[63] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[64]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[64 ], SynthLeadVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthLeadVelocityAlpha[64] , SynthLeadNoteColor[64] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[65]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[65 ], SynthLeadVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthLeadVelocityAlpha[65] , SynthLeadNoteColor[65] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[66]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[66 ], SynthLeadVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthLeadVelocityAlpha[66] , SynthLeadNoteColor[66] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[67]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[67 ], SynthLeadVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthLeadVelocityAlpha[67] , SynthLeadNoteColor[67] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[68]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[68 ], SynthLeadVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthLeadVelocityAlpha[68] , SynthLeadNoteColor[68] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[69]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[69 ], SynthLeadVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthLeadVelocityAlpha[69] , SynthLeadNoteColor[69] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[70]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[70 ], SynthLeadVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthLeadVelocityAlpha[70] , SynthLeadNoteColor[70] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[71]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[71 ], SynthLeadVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthLeadVelocityAlpha[71] , SynthLeadNoteColor[71] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[72]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[72 ], SynthLeadVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthLeadVelocityAlpha[72] , SynthLeadNoteColor[72] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[73]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[73 ], SynthLeadVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthLeadVelocityAlpha[73] , SynthLeadNoteColor[73] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[74]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[74 ], SynthLeadVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthLeadVelocityAlpha[74] , SynthLeadNoteColor[74] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[75]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[75 ], SynthLeadVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthLeadVelocityAlpha[75] , SynthLeadNoteColor[75] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[76]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[76 ], SynthLeadVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthLeadVelocityAlpha[76] , SynthLeadNoteColor[76] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[77]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[77 ], SynthLeadVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthLeadVelocityAlpha[77] , SynthLeadNoteColor[77] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[78]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[78 ], SynthLeadVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthLeadVelocityAlpha[78] , SynthLeadNoteColor[78] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[79]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[79 ], SynthLeadVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthLeadVelocityAlpha[79] , SynthLeadNoteColor[79] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[80]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[80 ], SynthLeadVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthLeadVelocityAlpha[80] , SynthLeadNoteColor[80] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[81]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[81 ], SynthLeadVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthLeadVelocityAlpha[81] , SynthLeadNoteColor[81] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[82]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[82 ], SynthLeadVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthLeadVelocityAlpha[82] , SynthLeadNoteColor[82] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[83]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[83 ], SynthLeadVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthLeadVelocityAlpha[83] , SynthLeadNoteColor[83] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[84]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[84 ], SynthLeadVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthLeadVelocityAlpha[84] , SynthLeadNoteColor[84] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[85]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[85 ], SynthLeadVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthLeadVelocityAlpha[85] , SynthLeadNoteColor[85] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[86]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[86 ], SynthLeadVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthLeadVelocityAlpha[86] , SynthLeadNoteColor[86] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[87]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[87 ], SynthLeadVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthLeadVelocityAlpha[87] , SynthLeadNoteColor[87] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[88]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[88 ], SynthLeadVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthLeadVelocityAlpha[88] , SynthLeadNoteColor[88] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[89]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[89 ], SynthLeadVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthLeadVelocityAlpha[89] , SynthLeadNoteColor[89] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[90]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[90 ], SynthLeadVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthLeadVelocityAlpha[90] , SynthLeadNoteColor[90] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[91]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[91 ], SynthLeadVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthLeadVelocityAlpha[91] , SynthLeadNoteColor[91] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[92]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[92 ], SynthLeadVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthLeadVelocityAlpha[92] , SynthLeadNoteColor[92] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[93]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[93 ], SynthLeadVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthLeadVelocityAlpha[93] , SynthLeadNoteColor[93] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[94]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[94 ], SynthLeadVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthLeadVelocityAlpha[94] , SynthLeadNoteColor[94] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[95]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[95 ], SynthLeadVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthLeadVelocityAlpha[95] , SynthLeadNoteColor[95] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[96]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[96 ], SynthLeadVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthLeadVelocityAlpha[96] , SynthLeadNoteColor[96] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[97]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[97 ], SynthLeadVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthLeadVelocityAlpha[97] , SynthLeadNoteColor[97] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[98]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[98 ], SynthLeadVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthLeadVelocityAlpha[98] , SynthLeadNoteColor[98] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[99]  == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[99 ], SynthLeadVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthLeadVelocityAlpha[99] , SynthLeadNoteColor[99] ); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[100] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[100], SynthLeadVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthLeadVelocityAlpha[100], SynthLeadNoteColor[100]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[101] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[101], SynthLeadVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthLeadVelocityAlpha[101], SynthLeadNoteColor[101]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[102] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[102], SynthLeadVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthLeadVelocityAlpha[102], SynthLeadNoteColor[102]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[103] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[103], SynthLeadVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthLeadVelocityAlpha[103], SynthLeadNoteColor[103]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[104] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[104], SynthLeadVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthLeadVelocityAlpha[104], SynthLeadNoteColor[104]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[105] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[105], SynthLeadVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthLeadVelocityAlpha[105], SynthLeadNoteColor[105]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[106] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[106], SynthLeadVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthLeadVelocityAlpha[106], SynthLeadNoteColor[106]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[107] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[107], SynthLeadVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthLeadVelocityAlpha[107], SynthLeadNoteColor[107]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[108] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[108], SynthLeadVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthLeadVelocityAlpha[108], SynthLeadNoteColor[108]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[109] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[109], SynthLeadVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthLeadVelocityAlpha[109], SynthLeadNoteColor[109]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[110] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[110], SynthLeadVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthLeadVelocityAlpha[110], SynthLeadNoteColor[110]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[111] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[111], SynthLeadVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthLeadVelocityAlpha[111], SynthLeadNoteColor[111]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[112] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[112], SynthLeadVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthLeadVelocityAlpha[112], SynthLeadNoteColor[112]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[113] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[113], SynthLeadVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthLeadVelocityAlpha[113], SynthLeadNoteColor[113]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[114] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[114], SynthLeadVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthLeadVelocityAlpha[114], SynthLeadNoteColor[114]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[115] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[115], SynthLeadVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthLeadVelocityAlpha[115], SynthLeadNoteColor[115]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[116] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[116], SynthLeadVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthLeadVelocityAlpha[116], SynthLeadNoteColor[116]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[117] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[117], SynthLeadVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthLeadVelocityAlpha[117], SynthLeadNoteColor[117]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[118] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[118], SynthLeadVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthLeadVelocityAlpha[118], SynthLeadNoteColor[118]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[119] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[119], SynthLeadVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthLeadVelocityAlpha[119], SynthLeadNoteColor[119]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[120] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[120], SynthLeadVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], SynthLeadVelocityAlpha[120], SynthLeadNoteColor[120]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[121] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[121], SynthLeadVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], SynthLeadVelocityAlpha[121], SynthLeadNoteColor[121]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[122] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[122], SynthLeadVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], SynthLeadVelocityAlpha[122], SynthLeadNoteColor[122]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[123] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[123], SynthLeadVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], SynthLeadVelocityAlpha[123], SynthLeadNoteColor[123]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[124] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[124], SynthLeadVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], SynthLeadVelocityAlpha[124], SynthLeadNoteColor[124]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[125] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[125], SynthLeadVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], SynthLeadVelocityAlpha[125], SynthLeadNoteColor[125]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[126] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[126], SynthLeadVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], SynthLeadVelocityAlpha[126], SynthLeadNoteColor[126]); synthleadgfx.display();}
//     if (SynthLeadPitchIsActive[127] == true) {synthleadgfx = new SynthLeadGFX (SynthLeadPitchX[127], SynthLeadVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], SynthLeadVelocityAlpha[127], SynthLeadNoteColor[127]); synthleadgfx.display();}
//   }
// }

// void SynthPadGFXDisplay(){//SynthPad
//   if (ChannelIsActive[11] == true) {// SynthPad Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
//     if (SynthPadPitchIsActive[0]   == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[0  ], SynthPadVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthPadVelocityAlpha[0]  , SynthPadNoteColor[0]  ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[1]   == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[1  ], SynthPadVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthPadVelocityAlpha[1]  , SynthPadNoteColor[1]  ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[2]   == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[2  ], SynthPadVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthPadVelocityAlpha[2]  , SynthPadNoteColor[2]  ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[3]   == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[3  ], SynthPadVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthPadVelocityAlpha[3]  , SynthPadNoteColor[3]  ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[4]   == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[4  ], SynthPadVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthPadVelocityAlpha[4]  , SynthPadNoteColor[4]  ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[5]   == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[5  ], SynthPadVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthPadVelocityAlpha[5]  , SynthPadNoteColor[5]  ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[6]   == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[6  ], SynthPadVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthPadVelocityAlpha[6]  , SynthPadNoteColor[6]  ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[7]   == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[7  ], SynthPadVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthPadVelocityAlpha[7]  , SynthPadNoteColor[7]  ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[8]   == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[8  ], SynthPadVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthPadVelocityAlpha[8]  , SynthPadNoteColor[8]  ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[9]   == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[9  ], SynthPadVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthPadVelocityAlpha[9]  , SynthPadNoteColor[9]  ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[10]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[10 ], SynthPadVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthPadVelocityAlpha[10] , SynthPadNoteColor[10] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[11]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[11 ], SynthPadVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthPadVelocityAlpha[11] , SynthPadNoteColor[11] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[12]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[12 ], SynthPadVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthPadVelocityAlpha[12] , SynthPadNoteColor[12] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[13]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[13 ], SynthPadVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthPadVelocityAlpha[13] , SynthPadNoteColor[13] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[14]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[14 ], SynthPadVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthPadVelocityAlpha[14] , SynthPadNoteColor[14] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[15]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[15 ], SynthPadVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthPadVelocityAlpha[15] , SynthPadNoteColor[15] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[16]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[16 ], SynthPadVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthPadVelocityAlpha[16] , SynthPadNoteColor[16] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[17]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[17 ], SynthPadVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthPadVelocityAlpha[17] , SynthPadNoteColor[17] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[18]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[18 ], SynthPadVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthPadVelocityAlpha[18] , SynthPadNoteColor[18] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[19]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[19 ], SynthPadVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthPadVelocityAlpha[19] , SynthPadNoteColor[19] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[20]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[20 ], SynthPadVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthPadVelocityAlpha[20] , SynthPadNoteColor[20] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[21]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[21 ], SynthPadVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthPadVelocityAlpha[21] , SynthPadNoteColor[21] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[22]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[22 ], SynthPadVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthPadVelocityAlpha[22] , SynthPadNoteColor[22] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[23]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[23 ], SynthPadVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthPadVelocityAlpha[23] , SynthPadNoteColor[23] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[24]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[24 ], SynthPadVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthPadVelocityAlpha[24] , SynthPadNoteColor[24] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[25]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[25 ], SynthPadVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthPadVelocityAlpha[25] , SynthPadNoteColor[25] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[26]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[26 ], SynthPadVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthPadVelocityAlpha[26] , SynthPadNoteColor[26] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[27]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[27 ], SynthPadVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthPadVelocityAlpha[27] , SynthPadNoteColor[27] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[28]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[28 ], SynthPadVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthPadVelocityAlpha[28] , SynthPadNoteColor[28] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[29]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[29 ], SynthPadVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthPadVelocityAlpha[29] , SynthPadNoteColor[29] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[30]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[30 ], SynthPadVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthPadVelocityAlpha[30] , SynthPadNoteColor[30] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[31]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[31 ], SynthPadVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthPadVelocityAlpha[31] , SynthPadNoteColor[31] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[32]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[32 ], SynthPadVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthPadVelocityAlpha[32] , SynthPadNoteColor[32] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[33]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[33 ], SynthPadVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthPadVelocityAlpha[33] , SynthPadNoteColor[33] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[34]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[34 ], SynthPadVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthPadVelocityAlpha[34] , SynthPadNoteColor[34] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[35]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[35 ], SynthPadVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthPadVelocityAlpha[35] , SynthPadNoteColor[35] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[36]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[36 ], SynthPadVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthPadVelocityAlpha[36] , SynthPadNoteColor[36] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[37]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[37 ], SynthPadVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthPadVelocityAlpha[37] , SynthPadNoteColor[37] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[38]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[38 ], SynthPadVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthPadVelocityAlpha[38] , SynthPadNoteColor[38] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[39]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[39 ], SynthPadVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthPadVelocityAlpha[39] , SynthPadNoteColor[39] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[40]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[40 ], SynthPadVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthPadVelocityAlpha[40] , SynthPadNoteColor[40] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[41]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[41 ], SynthPadVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthPadVelocityAlpha[41] , SynthPadNoteColor[41] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[42]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[42 ], SynthPadVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthPadVelocityAlpha[42] , SynthPadNoteColor[42] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[43]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[43 ], SynthPadVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthPadVelocityAlpha[43] , SynthPadNoteColor[43] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[44]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[44 ], SynthPadVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthPadVelocityAlpha[44] , SynthPadNoteColor[44] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[45]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[45 ], SynthPadVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthPadVelocityAlpha[45] , SynthPadNoteColor[45] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[46]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[46 ], SynthPadVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthPadVelocityAlpha[46] , SynthPadNoteColor[46] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[47]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[47 ], SynthPadVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthPadVelocityAlpha[47] , SynthPadNoteColor[47] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[48]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[48 ], SynthPadVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthPadVelocityAlpha[48] , SynthPadNoteColor[48] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[49]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[49 ], SynthPadVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthPadVelocityAlpha[49] , SynthPadNoteColor[49] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[50]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[50 ], SynthPadVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthPadVelocityAlpha[50] , SynthPadNoteColor[50] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[51]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[51 ], SynthPadVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthPadVelocityAlpha[51] , SynthPadNoteColor[51] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[52]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[52 ], SynthPadVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthPadVelocityAlpha[52] , SynthPadNoteColor[52] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[53]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[53 ], SynthPadVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthPadVelocityAlpha[53] , SynthPadNoteColor[53] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[54]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[54 ], SynthPadVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthPadVelocityAlpha[54] , SynthPadNoteColor[54] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[55]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[55 ], SynthPadVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthPadVelocityAlpha[55] , SynthPadNoteColor[55] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[56]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[56 ], SynthPadVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthPadVelocityAlpha[56] , SynthPadNoteColor[56] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[57]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[57 ], SynthPadVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthPadVelocityAlpha[57] , SynthPadNoteColor[57] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[58]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[58 ], SynthPadVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthPadVelocityAlpha[58] , SynthPadNoteColor[58] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[59]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[59 ], SynthPadVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthPadVelocityAlpha[59] , SynthPadNoteColor[59] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[60]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[60 ], SynthPadVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthPadVelocityAlpha[60] , SynthPadNoteColor[60] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[61]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[61 ], SynthPadVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthPadVelocityAlpha[61] , SynthPadNoteColor[61] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[62]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[62 ], SynthPadVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthPadVelocityAlpha[62] , SynthPadNoteColor[62] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[63]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[63 ], SynthPadVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthPadVelocityAlpha[63] , SynthPadNoteColor[63] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[64]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[64 ], SynthPadVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthPadVelocityAlpha[64] , SynthPadNoteColor[64] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[65]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[65 ], SynthPadVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthPadVelocityAlpha[65] , SynthPadNoteColor[65] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[66]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[66 ], SynthPadVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthPadVelocityAlpha[66] , SynthPadNoteColor[66] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[67]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[67 ], SynthPadVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthPadVelocityAlpha[67] , SynthPadNoteColor[67] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[68]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[68 ], SynthPadVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthPadVelocityAlpha[68] , SynthPadNoteColor[68] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[69]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[69 ], SynthPadVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthPadVelocityAlpha[69] , SynthPadNoteColor[69] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[70]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[70 ], SynthPadVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthPadVelocityAlpha[70] , SynthPadNoteColor[70] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[71]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[71 ], SynthPadVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthPadVelocityAlpha[71] , SynthPadNoteColor[71] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[72]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[72 ], SynthPadVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthPadVelocityAlpha[72] , SynthPadNoteColor[72] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[73]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[73 ], SynthPadVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthPadVelocityAlpha[73] , SynthPadNoteColor[73] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[74]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[74 ], SynthPadVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthPadVelocityAlpha[74] , SynthPadNoteColor[74] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[75]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[75 ], SynthPadVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthPadVelocityAlpha[75] , SynthPadNoteColor[75] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[76]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[76 ], SynthPadVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthPadVelocityAlpha[76] , SynthPadNoteColor[76] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[77]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[77 ], SynthPadVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthPadVelocityAlpha[77] , SynthPadNoteColor[77] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[78]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[78 ], SynthPadVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthPadVelocityAlpha[78] , SynthPadNoteColor[78] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[79]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[79 ], SynthPadVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthPadVelocityAlpha[79] , SynthPadNoteColor[79] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[80]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[80 ], SynthPadVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthPadVelocityAlpha[80] , SynthPadNoteColor[80] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[81]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[81 ], SynthPadVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthPadVelocityAlpha[81] , SynthPadNoteColor[81] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[82]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[82 ], SynthPadVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthPadVelocityAlpha[82] , SynthPadNoteColor[82] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[83]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[83 ], SynthPadVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthPadVelocityAlpha[83] , SynthPadNoteColor[83] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[84]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[84 ], SynthPadVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthPadVelocityAlpha[84] , SynthPadNoteColor[84] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[85]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[85 ], SynthPadVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthPadVelocityAlpha[85] , SynthPadNoteColor[85] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[86]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[86 ], SynthPadVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthPadVelocityAlpha[86] , SynthPadNoteColor[86] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[87]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[87 ], SynthPadVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthPadVelocityAlpha[87] , SynthPadNoteColor[87] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[88]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[88 ], SynthPadVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthPadVelocityAlpha[88] , SynthPadNoteColor[88] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[89]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[89 ], SynthPadVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthPadVelocityAlpha[89] , SynthPadNoteColor[89] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[90]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[90 ], SynthPadVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthPadVelocityAlpha[90] , SynthPadNoteColor[90] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[91]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[91 ], SynthPadVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthPadVelocityAlpha[91] , SynthPadNoteColor[91] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[92]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[92 ], SynthPadVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthPadVelocityAlpha[92] , SynthPadNoteColor[92] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[93]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[93 ], SynthPadVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthPadVelocityAlpha[93] , SynthPadNoteColor[93] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[94]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[94 ], SynthPadVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthPadVelocityAlpha[94] , SynthPadNoteColor[94] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[95]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[95 ], SynthPadVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthPadVelocityAlpha[95] , SynthPadNoteColor[95] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[96]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[96 ], SynthPadVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthPadVelocityAlpha[96] , SynthPadNoteColor[96] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[97]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[97 ], SynthPadVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthPadVelocityAlpha[97] , SynthPadNoteColor[97] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[98]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[98 ], SynthPadVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthPadVelocityAlpha[98] , SynthPadNoteColor[98] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[99]  == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[99 ], SynthPadVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthPadVelocityAlpha[99] , SynthPadNoteColor[99] ); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[100] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[100], SynthPadVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthPadVelocityAlpha[100], SynthPadNoteColor[100]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[101] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[101], SynthPadVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthPadVelocityAlpha[101], SynthPadNoteColor[101]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[102] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[102], SynthPadVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthPadVelocityAlpha[102], SynthPadNoteColor[102]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[103] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[103], SynthPadVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthPadVelocityAlpha[103], SynthPadNoteColor[103]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[104] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[104], SynthPadVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthPadVelocityAlpha[104], SynthPadNoteColor[104]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[105] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[105], SynthPadVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthPadVelocityAlpha[105], SynthPadNoteColor[105]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[106] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[106], SynthPadVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthPadVelocityAlpha[106], SynthPadNoteColor[106]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[107] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[107], SynthPadVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthPadVelocityAlpha[107], SynthPadNoteColor[107]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[108] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[108], SynthPadVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthPadVelocityAlpha[108], SynthPadNoteColor[108]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[109] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[109], SynthPadVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthPadVelocityAlpha[109], SynthPadNoteColor[109]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[110] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[110], SynthPadVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthPadVelocityAlpha[110], SynthPadNoteColor[110]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[111] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[111], SynthPadVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthPadVelocityAlpha[111], SynthPadNoteColor[111]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[112] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[112], SynthPadVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthPadVelocityAlpha[112], SynthPadNoteColor[112]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[113] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[113], SynthPadVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthPadVelocityAlpha[113], SynthPadNoteColor[113]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[114] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[114], SynthPadVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthPadVelocityAlpha[114], SynthPadNoteColor[114]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[115] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[115], SynthPadVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthPadVelocityAlpha[115], SynthPadNoteColor[115]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[116] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[116], SynthPadVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthPadVelocityAlpha[116], SynthPadNoteColor[116]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[117] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[117], SynthPadVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthPadVelocityAlpha[117], SynthPadNoteColor[117]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[118] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[118], SynthPadVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthPadVelocityAlpha[118], SynthPadNoteColor[118]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[119] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[119], SynthPadVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthPadVelocityAlpha[119], SynthPadNoteColor[119]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[120] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[120], SynthPadVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], SynthPadVelocityAlpha[120], SynthPadNoteColor[120]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[121] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[121], SynthPadVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], SynthPadVelocityAlpha[121], SynthPadNoteColor[121]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[122] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[122], SynthPadVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], SynthPadVelocityAlpha[122], SynthPadNoteColor[122]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[123] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[123], SynthPadVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], SynthPadVelocityAlpha[123], SynthPadNoteColor[123]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[124] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[124], SynthPadVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], SynthPadVelocityAlpha[124], SynthPadNoteColor[124]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[125] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[125], SynthPadVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], SynthPadVelocityAlpha[125], SynthPadNoteColor[125]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[126] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[126], SynthPadVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], SynthPadVelocityAlpha[126], SynthPadNoteColor[126]); synthpadgfx.display();}
//     if (SynthPadPitchIsActive[127] == true) {synthpadgfx = new SynthPadGFX (SynthPadPitchX[127], SynthPadVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], SynthPadVelocityAlpha[127], SynthPadNoteColor[127]); synthpadgfx.display();}
//   }
// }

// void SynthEffectsGFXDisplay(){//SynthEffects
//   if (ChannelIsActive[12] == true) {// SynthEffects Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
//     if (SynthEffectsPitchIsActive[0]   == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[0  ], SynthEffectsVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthEffectsVelocityAlpha[0]  , SynthEffectsNoteColor[0]  ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[1]   == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[1  ], SynthEffectsVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthEffectsVelocityAlpha[1]  , SynthEffectsNoteColor[1]  ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[2]   == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[2  ], SynthEffectsVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthEffectsVelocityAlpha[2]  , SynthEffectsNoteColor[2]  ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[3]   == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[3  ], SynthEffectsVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthEffectsVelocityAlpha[3]  , SynthEffectsNoteColor[3]  ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[4]   == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[4  ], SynthEffectsVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthEffectsVelocityAlpha[4]  , SynthEffectsNoteColor[4]  ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[5]   == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[5  ], SynthEffectsVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthEffectsVelocityAlpha[5]  , SynthEffectsNoteColor[5]  ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[6]   == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[6  ], SynthEffectsVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthEffectsVelocityAlpha[6]  , SynthEffectsNoteColor[6]  ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[7]   == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[7  ], SynthEffectsVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthEffectsVelocityAlpha[7]  , SynthEffectsNoteColor[7]  ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[8]   == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[8  ], SynthEffectsVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthEffectsVelocityAlpha[8]  , SynthEffectsNoteColor[8]  ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[9]   == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[9  ], SynthEffectsVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthEffectsVelocityAlpha[9]  , SynthEffectsNoteColor[9]  ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[10]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[10 ], SynthEffectsVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthEffectsVelocityAlpha[10] , SynthEffectsNoteColor[10] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[11]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[11 ], SynthEffectsVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  SynthEffectsVelocityAlpha[11] , SynthEffectsNoteColor[11] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[12]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[12 ], SynthEffectsVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthEffectsVelocityAlpha[12] , SynthEffectsNoteColor[12] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[13]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[13 ], SynthEffectsVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthEffectsVelocityAlpha[13] , SynthEffectsNoteColor[13] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[14]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[14 ], SynthEffectsVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthEffectsVelocityAlpha[14] , SynthEffectsNoteColor[14] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[15]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[15 ], SynthEffectsVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthEffectsVelocityAlpha[15] , SynthEffectsNoteColor[15] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[16]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[16 ], SynthEffectsVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthEffectsVelocityAlpha[16] , SynthEffectsNoteColor[16] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[17]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[17 ], SynthEffectsVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthEffectsVelocityAlpha[17] , SynthEffectsNoteColor[17] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[18]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[18 ], SynthEffectsVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthEffectsVelocityAlpha[18] , SynthEffectsNoteColor[18] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[19]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[19 ], SynthEffectsVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthEffectsVelocityAlpha[19] , SynthEffectsNoteColor[19] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[20]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[20 ], SynthEffectsVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthEffectsVelocityAlpha[20] , SynthEffectsNoteColor[20] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[21]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[21 ], SynthEffectsVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthEffectsVelocityAlpha[21] , SynthEffectsNoteColor[21] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[22]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[22 ], SynthEffectsVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthEffectsVelocityAlpha[22] , SynthEffectsNoteColor[22] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[23]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[23 ], SynthEffectsVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  SynthEffectsVelocityAlpha[23] , SynthEffectsNoteColor[23] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[24]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[24 ], SynthEffectsVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthEffectsVelocityAlpha[24] , SynthEffectsNoteColor[24] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[25]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[25 ], SynthEffectsVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthEffectsVelocityAlpha[25] , SynthEffectsNoteColor[25] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[26]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[26 ], SynthEffectsVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthEffectsVelocityAlpha[26] , SynthEffectsNoteColor[26] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[27]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[27 ], SynthEffectsVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthEffectsVelocityAlpha[27] , SynthEffectsNoteColor[27] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[28]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[28 ], SynthEffectsVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthEffectsVelocityAlpha[28] , SynthEffectsNoteColor[28] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[29]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[29 ], SynthEffectsVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthEffectsVelocityAlpha[29] , SynthEffectsNoteColor[29] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[30]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[30 ], SynthEffectsVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthEffectsVelocityAlpha[30] , SynthEffectsNoteColor[30] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[31]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[31 ], SynthEffectsVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthEffectsVelocityAlpha[31] , SynthEffectsNoteColor[31] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[32]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[32 ], SynthEffectsVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthEffectsVelocityAlpha[32] , SynthEffectsNoteColor[32] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[33]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[33 ], SynthEffectsVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthEffectsVelocityAlpha[33] , SynthEffectsNoteColor[33] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[34]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[34 ], SynthEffectsVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthEffectsVelocityAlpha[34] , SynthEffectsNoteColor[34] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[35]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[35 ], SynthEffectsVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  SynthEffectsVelocityAlpha[35] , SynthEffectsNoteColor[35] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[36]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[36 ], SynthEffectsVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthEffectsVelocityAlpha[36] , SynthEffectsNoteColor[36] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[37]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[37 ], SynthEffectsVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthEffectsVelocityAlpha[37] , SynthEffectsNoteColor[37] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[38]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[38 ], SynthEffectsVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthEffectsVelocityAlpha[38] , SynthEffectsNoteColor[38] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[39]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[39 ], SynthEffectsVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthEffectsVelocityAlpha[39] , SynthEffectsNoteColor[39] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[40]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[40 ], SynthEffectsVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthEffectsVelocityAlpha[40] , SynthEffectsNoteColor[40] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[41]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[41 ], SynthEffectsVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthEffectsVelocityAlpha[41] , SynthEffectsNoteColor[41] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[42]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[42 ], SynthEffectsVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthEffectsVelocityAlpha[42] , SynthEffectsNoteColor[42] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[43]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[43 ], SynthEffectsVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthEffectsVelocityAlpha[43] , SynthEffectsNoteColor[43] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[44]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[44 ], SynthEffectsVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthEffectsVelocityAlpha[44] , SynthEffectsNoteColor[44] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[45]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[45 ], SynthEffectsVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthEffectsVelocityAlpha[45] , SynthEffectsNoteColor[45] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[46]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[46 ], SynthEffectsVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthEffectsVelocityAlpha[46] , SynthEffectsNoteColor[46] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[47]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[47 ], SynthEffectsVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  SynthEffectsVelocityAlpha[47] , SynthEffectsNoteColor[47] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[48]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[48 ], SynthEffectsVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthEffectsVelocityAlpha[48] , SynthEffectsNoteColor[48] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[49]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[49 ], SynthEffectsVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthEffectsVelocityAlpha[49] , SynthEffectsNoteColor[49] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[50]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[50 ], SynthEffectsVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthEffectsVelocityAlpha[50] , SynthEffectsNoteColor[50] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[51]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[51 ], SynthEffectsVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthEffectsVelocityAlpha[51] , SynthEffectsNoteColor[51] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[52]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[52 ], SynthEffectsVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthEffectsVelocityAlpha[52] , SynthEffectsNoteColor[52] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[53]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[53 ], SynthEffectsVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthEffectsVelocityAlpha[53] , SynthEffectsNoteColor[53] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[54]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[54 ], SynthEffectsVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthEffectsVelocityAlpha[54] , SynthEffectsNoteColor[54] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[55]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[55 ], SynthEffectsVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthEffectsVelocityAlpha[55] , SynthEffectsNoteColor[55] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[56]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[56 ], SynthEffectsVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthEffectsVelocityAlpha[56] , SynthEffectsNoteColor[56] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[57]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[57 ], SynthEffectsVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthEffectsVelocityAlpha[57] , SynthEffectsNoteColor[57] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[58]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[58 ], SynthEffectsVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthEffectsVelocityAlpha[58] , SynthEffectsNoteColor[58] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[59]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[59 ], SynthEffectsVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  SynthEffectsVelocityAlpha[59] , SynthEffectsNoteColor[59] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[60]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[60 ], SynthEffectsVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthEffectsVelocityAlpha[60] , SynthEffectsNoteColor[60] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[61]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[61 ], SynthEffectsVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthEffectsVelocityAlpha[61] , SynthEffectsNoteColor[61] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[62]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[62 ], SynthEffectsVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthEffectsVelocityAlpha[62] , SynthEffectsNoteColor[62] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[63]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[63 ], SynthEffectsVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthEffectsVelocityAlpha[63] , SynthEffectsNoteColor[63] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[64]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[64 ], SynthEffectsVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthEffectsVelocityAlpha[64] , SynthEffectsNoteColor[64] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[65]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[65 ], SynthEffectsVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthEffectsVelocityAlpha[65] , SynthEffectsNoteColor[65] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[66]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[66 ], SynthEffectsVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthEffectsVelocityAlpha[66] , SynthEffectsNoteColor[66] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[67]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[67 ], SynthEffectsVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthEffectsVelocityAlpha[67] , SynthEffectsNoteColor[67] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[68]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[68 ], SynthEffectsVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthEffectsVelocityAlpha[68] , SynthEffectsNoteColor[68] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[69]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[69 ], SynthEffectsVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthEffectsVelocityAlpha[69] , SynthEffectsNoteColor[69] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[70]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[70 ], SynthEffectsVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthEffectsVelocityAlpha[70] , SynthEffectsNoteColor[70] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[71]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[71 ], SynthEffectsVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  SynthEffectsVelocityAlpha[71] , SynthEffectsNoteColor[71] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[72]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[72 ], SynthEffectsVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthEffectsVelocityAlpha[72] , SynthEffectsNoteColor[72] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[73]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[73 ], SynthEffectsVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthEffectsVelocityAlpha[73] , SynthEffectsNoteColor[73] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[74]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[74 ], SynthEffectsVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthEffectsVelocityAlpha[74] , SynthEffectsNoteColor[74] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[75]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[75 ], SynthEffectsVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthEffectsVelocityAlpha[75] , SynthEffectsNoteColor[75] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[76]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[76 ], SynthEffectsVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthEffectsVelocityAlpha[76] , SynthEffectsNoteColor[76] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[77]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[77 ], SynthEffectsVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthEffectsVelocityAlpha[77] , SynthEffectsNoteColor[77] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[78]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[78 ], SynthEffectsVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthEffectsVelocityAlpha[78] , SynthEffectsNoteColor[78] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[79]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[79 ], SynthEffectsVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthEffectsVelocityAlpha[79] , SynthEffectsNoteColor[79] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[80]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[80 ], SynthEffectsVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthEffectsVelocityAlpha[80] , SynthEffectsNoteColor[80] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[81]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[81 ], SynthEffectsVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthEffectsVelocityAlpha[81] , SynthEffectsNoteColor[81] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[82]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[82 ], SynthEffectsVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthEffectsVelocityAlpha[82] , SynthEffectsNoteColor[82] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[83]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[83 ], SynthEffectsVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  SynthEffectsVelocityAlpha[83] , SynthEffectsNoteColor[83] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[84]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[84 ], SynthEffectsVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthEffectsVelocityAlpha[84] , SynthEffectsNoteColor[84] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[85]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[85 ], SynthEffectsVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthEffectsVelocityAlpha[85] , SynthEffectsNoteColor[85] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[86]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[86 ], SynthEffectsVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthEffectsVelocityAlpha[86] , SynthEffectsNoteColor[86] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[87]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[87 ], SynthEffectsVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthEffectsVelocityAlpha[87] , SynthEffectsNoteColor[87] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[88]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[88 ], SynthEffectsVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthEffectsVelocityAlpha[88] , SynthEffectsNoteColor[88] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[89]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[89 ], SynthEffectsVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthEffectsVelocityAlpha[89] , SynthEffectsNoteColor[89] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[90]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[90 ], SynthEffectsVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthEffectsVelocityAlpha[90] , SynthEffectsNoteColor[90] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[91]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[91 ], SynthEffectsVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthEffectsVelocityAlpha[91] , SynthEffectsNoteColor[91] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[92]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[92 ], SynthEffectsVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthEffectsVelocityAlpha[92] , SynthEffectsNoteColor[92] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[93]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[93 ], SynthEffectsVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthEffectsVelocityAlpha[93] , SynthEffectsNoteColor[93] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[94]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[94 ], SynthEffectsVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthEffectsVelocityAlpha[94] , SynthEffectsNoteColor[94] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[95]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[95 ], SynthEffectsVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  SynthEffectsVelocityAlpha[95] , SynthEffectsNoteColor[95] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[96]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[96 ], SynthEffectsVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthEffectsVelocityAlpha[96] , SynthEffectsNoteColor[96] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[97]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[97 ], SynthEffectsVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthEffectsVelocityAlpha[97] , SynthEffectsNoteColor[97] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[98]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[98 ], SynthEffectsVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthEffectsVelocityAlpha[98] , SynthEffectsNoteColor[98] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[99]  == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[99 ], SynthEffectsVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthEffectsVelocityAlpha[99] , SynthEffectsNoteColor[99] ); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[100] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[100], SynthEffectsVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthEffectsVelocityAlpha[100], SynthEffectsNoteColor[100]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[101] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[101], SynthEffectsVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthEffectsVelocityAlpha[101], SynthEffectsNoteColor[101]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[102] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[102], SynthEffectsVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthEffectsVelocityAlpha[102], SynthEffectsNoteColor[102]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[103] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[103], SynthEffectsVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthEffectsVelocityAlpha[103], SynthEffectsNoteColor[103]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[104] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[104], SynthEffectsVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthEffectsVelocityAlpha[104], SynthEffectsNoteColor[104]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[105] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[105], SynthEffectsVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthEffectsVelocityAlpha[105], SynthEffectsNoteColor[105]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[106] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[106], SynthEffectsVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthEffectsVelocityAlpha[106], SynthEffectsNoteColor[106]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[107] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[107], SynthEffectsVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  SynthEffectsVelocityAlpha[107], SynthEffectsNoteColor[107]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[108] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[108], SynthEffectsVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthEffectsVelocityAlpha[108], SynthEffectsNoteColor[108]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[109] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[109], SynthEffectsVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthEffectsVelocityAlpha[109], SynthEffectsNoteColor[109]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[110] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[110], SynthEffectsVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthEffectsVelocityAlpha[110], SynthEffectsNoteColor[110]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[111] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[111], SynthEffectsVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthEffectsVelocityAlpha[111], SynthEffectsNoteColor[111]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[112] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[112], SynthEffectsVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthEffectsVelocityAlpha[112], SynthEffectsNoteColor[112]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[113] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[113], SynthEffectsVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthEffectsVelocityAlpha[113], SynthEffectsNoteColor[113]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[114] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[114], SynthEffectsVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthEffectsVelocityAlpha[114], SynthEffectsNoteColor[114]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[115] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[115], SynthEffectsVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthEffectsVelocityAlpha[115], SynthEffectsNoteColor[115]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[116] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[116], SynthEffectsVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthEffectsVelocityAlpha[116], SynthEffectsNoteColor[116]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[117] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[117], SynthEffectsVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthEffectsVelocityAlpha[117], SynthEffectsNoteColor[117]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[118] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[118], SynthEffectsVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthEffectsVelocityAlpha[118], SynthEffectsNoteColor[118]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[119] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[119], SynthEffectsVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  SynthEffectsVelocityAlpha[119], SynthEffectsNoteColor[119]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[120] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[120], SynthEffectsVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], SynthEffectsVelocityAlpha[120], SynthEffectsNoteColor[120]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[121] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[121], SynthEffectsVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], SynthEffectsVelocityAlpha[121], SynthEffectsNoteColor[121]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[122] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[122], SynthEffectsVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], SynthEffectsVelocityAlpha[122], SynthEffectsNoteColor[122]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[123] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[123], SynthEffectsVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], SynthEffectsVelocityAlpha[123], SynthEffectsNoteColor[123]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[124] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[124], SynthEffectsVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], SynthEffectsVelocityAlpha[124], SynthEffectsNoteColor[124]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[125] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[125], SynthEffectsVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], SynthEffectsVelocityAlpha[125], SynthEffectsNoteColor[125]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[126] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[126], SynthEffectsVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], SynthEffectsVelocityAlpha[126], SynthEffectsNoteColor[126]); syntheffectsgfx.display();}
//     if (SynthEffectsPitchIsActive[127] == true) {syntheffectsgfx = new SynthEffectsGFX (SynthEffectsPitchX[127], SynthEffectsVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], SynthEffectsVelocityAlpha[127], SynthEffectsNoteColor[127]); syntheffectsgfx.display();}
//   }
// }

// void EthnicGFXDisplay(){//Ethnic
//   if (ChannelIsActive[13] == true) {// Ethnic Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
//     if (EthnicPitchIsActive[0]   == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[0  ], EthnicVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  EthnicVelocityAlpha[0]  , EthnicNoteColor[0]  ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[1]   == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[1  ], EthnicVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  EthnicVelocityAlpha[1]  , EthnicNoteColor[1]  ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[2]   == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[2  ], EthnicVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  EthnicVelocityAlpha[2]  , EthnicNoteColor[2]  ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[3]   == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[3  ], EthnicVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  EthnicVelocityAlpha[3]  , EthnicNoteColor[3]  ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[4]   == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[4  ], EthnicVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  EthnicVelocityAlpha[4]  , EthnicNoteColor[4]  ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[5]   == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[5  ], EthnicVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  EthnicVelocityAlpha[5]  , EthnicNoteColor[5]  ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[6]   == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[6  ], EthnicVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  EthnicVelocityAlpha[6]  , EthnicNoteColor[6]  ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[7]   == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[7  ], EthnicVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  EthnicVelocityAlpha[7]  , EthnicNoteColor[7]  ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[8]   == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[8  ], EthnicVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  EthnicVelocityAlpha[8]  , EthnicNoteColor[8]  ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[9]   == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[9  ], EthnicVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  EthnicVelocityAlpha[9]  , EthnicNoteColor[9]  ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[10]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[10 ], EthnicVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  EthnicVelocityAlpha[10] , EthnicNoteColor[10] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[11]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[11 ], EthnicVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  EthnicVelocityAlpha[11] , EthnicNoteColor[11] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[12]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[12 ], EthnicVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  EthnicVelocityAlpha[12] , EthnicNoteColor[12] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[13]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[13 ], EthnicVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  EthnicVelocityAlpha[13] , EthnicNoteColor[13] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[14]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[14 ], EthnicVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  EthnicVelocityAlpha[14] , EthnicNoteColor[14] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[15]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[15 ], EthnicVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  EthnicVelocityAlpha[15] , EthnicNoteColor[15] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[16]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[16 ], EthnicVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  EthnicVelocityAlpha[16] , EthnicNoteColor[16] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[17]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[17 ], EthnicVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  EthnicVelocityAlpha[17] , EthnicNoteColor[17] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[18]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[18 ], EthnicVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  EthnicVelocityAlpha[18] , EthnicNoteColor[18] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[19]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[19 ], EthnicVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  EthnicVelocityAlpha[19] , EthnicNoteColor[19] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[20]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[20 ], EthnicVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  EthnicVelocityAlpha[20] , EthnicNoteColor[20] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[21]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[21 ], EthnicVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  EthnicVelocityAlpha[21] , EthnicNoteColor[21] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[22]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[22 ], EthnicVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  EthnicVelocityAlpha[22] , EthnicNoteColor[22] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[23]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[23 ], EthnicVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  EthnicVelocityAlpha[23] , EthnicNoteColor[23] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[24]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[24 ], EthnicVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  EthnicVelocityAlpha[24] , EthnicNoteColor[24] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[25]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[25 ], EthnicVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  EthnicVelocityAlpha[25] , EthnicNoteColor[25] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[26]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[26 ], EthnicVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  EthnicVelocityAlpha[26] , EthnicNoteColor[26] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[27]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[27 ], EthnicVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  EthnicVelocityAlpha[27] , EthnicNoteColor[27] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[28]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[28 ], EthnicVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  EthnicVelocityAlpha[28] , EthnicNoteColor[28] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[29]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[29 ], EthnicVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  EthnicVelocityAlpha[29] , EthnicNoteColor[29] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[30]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[30 ], EthnicVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  EthnicVelocityAlpha[30] , EthnicNoteColor[30] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[31]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[31 ], EthnicVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  EthnicVelocityAlpha[31] , EthnicNoteColor[31] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[32]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[32 ], EthnicVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  EthnicVelocityAlpha[32] , EthnicNoteColor[32] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[33]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[33 ], EthnicVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  EthnicVelocityAlpha[33] , EthnicNoteColor[33] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[34]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[34 ], EthnicVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  EthnicVelocityAlpha[34] , EthnicNoteColor[34] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[35]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[35 ], EthnicVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  EthnicVelocityAlpha[35] , EthnicNoteColor[35] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[36]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[36 ], EthnicVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  EthnicVelocityAlpha[36] , EthnicNoteColor[36] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[37]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[37 ], EthnicVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  EthnicVelocityAlpha[37] , EthnicNoteColor[37] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[38]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[38 ], EthnicVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  EthnicVelocityAlpha[38] , EthnicNoteColor[38] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[39]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[39 ], EthnicVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  EthnicVelocityAlpha[39] , EthnicNoteColor[39] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[40]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[40 ], EthnicVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  EthnicVelocityAlpha[40] , EthnicNoteColor[40] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[41]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[41 ], EthnicVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  EthnicVelocityAlpha[41] , EthnicNoteColor[41] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[42]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[42 ], EthnicVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  EthnicVelocityAlpha[42] , EthnicNoteColor[42] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[43]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[43 ], EthnicVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  EthnicVelocityAlpha[43] , EthnicNoteColor[43] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[44]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[44 ], EthnicVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  EthnicVelocityAlpha[44] , EthnicNoteColor[44] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[45]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[45 ], EthnicVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  EthnicVelocityAlpha[45] , EthnicNoteColor[45] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[46]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[46 ], EthnicVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  EthnicVelocityAlpha[46] , EthnicNoteColor[46] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[47]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[47 ], EthnicVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  EthnicVelocityAlpha[47] , EthnicNoteColor[47] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[48]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[48 ], EthnicVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  EthnicVelocityAlpha[48] , EthnicNoteColor[48] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[49]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[49 ], EthnicVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  EthnicVelocityAlpha[49] , EthnicNoteColor[49] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[50]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[50 ], EthnicVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  EthnicVelocityAlpha[50] , EthnicNoteColor[50] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[51]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[51 ], EthnicVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  EthnicVelocityAlpha[51] , EthnicNoteColor[51] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[52]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[52 ], EthnicVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  EthnicVelocityAlpha[52] , EthnicNoteColor[52] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[53]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[53 ], EthnicVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  EthnicVelocityAlpha[53] , EthnicNoteColor[53] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[54]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[54 ], EthnicVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  EthnicVelocityAlpha[54] , EthnicNoteColor[54] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[55]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[55 ], EthnicVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  EthnicVelocityAlpha[55] , EthnicNoteColor[55] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[56]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[56 ], EthnicVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  EthnicVelocityAlpha[56] , EthnicNoteColor[56] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[57]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[57 ], EthnicVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  EthnicVelocityAlpha[57] , EthnicNoteColor[57] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[58]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[58 ], EthnicVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  EthnicVelocityAlpha[58] , EthnicNoteColor[58] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[59]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[59 ], EthnicVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  EthnicVelocityAlpha[59] , EthnicNoteColor[59] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[60]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[60 ], EthnicVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  EthnicVelocityAlpha[60] , EthnicNoteColor[60] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[61]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[61 ], EthnicVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  EthnicVelocityAlpha[61] , EthnicNoteColor[61] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[62]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[62 ], EthnicVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  EthnicVelocityAlpha[62] , EthnicNoteColor[62] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[63]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[63 ], EthnicVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  EthnicVelocityAlpha[63] , EthnicNoteColor[63] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[64]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[64 ], EthnicVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  EthnicVelocityAlpha[64] , EthnicNoteColor[64] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[65]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[65 ], EthnicVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  EthnicVelocityAlpha[65] , EthnicNoteColor[65] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[66]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[66 ], EthnicVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  EthnicVelocityAlpha[66] , EthnicNoteColor[66] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[67]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[67 ], EthnicVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  EthnicVelocityAlpha[67] , EthnicNoteColor[67] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[68]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[68 ], EthnicVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  EthnicVelocityAlpha[68] , EthnicNoteColor[68] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[69]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[69 ], EthnicVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  EthnicVelocityAlpha[69] , EthnicNoteColor[69] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[70]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[70 ], EthnicVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  EthnicVelocityAlpha[70] , EthnicNoteColor[70] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[71]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[71 ], EthnicVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  EthnicVelocityAlpha[71] , EthnicNoteColor[71] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[72]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[72 ], EthnicVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  EthnicVelocityAlpha[72] , EthnicNoteColor[72] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[73]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[73 ], EthnicVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  EthnicVelocityAlpha[73] , EthnicNoteColor[73] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[74]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[74 ], EthnicVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  EthnicVelocityAlpha[74] , EthnicNoteColor[74] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[75]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[75 ], EthnicVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  EthnicVelocityAlpha[75] , EthnicNoteColor[75] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[76]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[76 ], EthnicVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  EthnicVelocityAlpha[76] , EthnicNoteColor[76] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[77]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[77 ], EthnicVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  EthnicVelocityAlpha[77] , EthnicNoteColor[77] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[78]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[78 ], EthnicVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  EthnicVelocityAlpha[78] , EthnicNoteColor[78] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[79]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[79 ], EthnicVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  EthnicVelocityAlpha[79] , EthnicNoteColor[79] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[80]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[80 ], EthnicVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  EthnicVelocityAlpha[80] , EthnicNoteColor[80] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[81]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[81 ], EthnicVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  EthnicVelocityAlpha[81] , EthnicNoteColor[81] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[82]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[82 ], EthnicVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  EthnicVelocityAlpha[82] , EthnicNoteColor[82] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[83]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[83 ], EthnicVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  EthnicVelocityAlpha[83] , EthnicNoteColor[83] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[84]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[84 ], EthnicVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  EthnicVelocityAlpha[84] , EthnicNoteColor[84] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[85]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[85 ], EthnicVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  EthnicVelocityAlpha[85] , EthnicNoteColor[85] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[86]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[86 ], EthnicVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  EthnicVelocityAlpha[86] , EthnicNoteColor[86] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[87]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[87 ], EthnicVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  EthnicVelocityAlpha[87] , EthnicNoteColor[87] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[88]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[88 ], EthnicVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  EthnicVelocityAlpha[88] , EthnicNoteColor[88] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[89]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[89 ], EthnicVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  EthnicVelocityAlpha[89] , EthnicNoteColor[89] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[90]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[90 ], EthnicVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  EthnicVelocityAlpha[90] , EthnicNoteColor[90] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[91]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[91 ], EthnicVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  EthnicVelocityAlpha[91] , EthnicNoteColor[91] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[92]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[92 ], EthnicVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  EthnicVelocityAlpha[92] , EthnicNoteColor[92] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[93]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[93 ], EthnicVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  EthnicVelocityAlpha[93] , EthnicNoteColor[93] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[94]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[94 ], EthnicVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  EthnicVelocityAlpha[94] , EthnicNoteColor[94] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[95]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[95 ], EthnicVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  EthnicVelocityAlpha[95] , EthnicNoteColor[95] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[96]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[96 ], EthnicVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  EthnicVelocityAlpha[96] , EthnicNoteColor[96] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[97]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[97 ], EthnicVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  EthnicVelocityAlpha[97] , EthnicNoteColor[97] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[98]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[98 ], EthnicVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  EthnicVelocityAlpha[98] , EthnicNoteColor[98] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[99]  == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[99 ], EthnicVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  EthnicVelocityAlpha[99] , EthnicNoteColor[99] ); ethnicgfx.display();}
//     if (EthnicPitchIsActive[100] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[100], EthnicVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  EthnicVelocityAlpha[100], EthnicNoteColor[100]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[101] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[101], EthnicVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  EthnicVelocityAlpha[101], EthnicNoteColor[101]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[102] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[102], EthnicVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  EthnicVelocityAlpha[102], EthnicNoteColor[102]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[103] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[103], EthnicVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  EthnicVelocityAlpha[103], EthnicNoteColor[103]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[104] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[104], EthnicVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  EthnicVelocityAlpha[104], EthnicNoteColor[104]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[105] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[105], EthnicVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  EthnicVelocityAlpha[105], EthnicNoteColor[105]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[106] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[106], EthnicVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  EthnicVelocityAlpha[106], EthnicNoteColor[106]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[107] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[107], EthnicVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  EthnicVelocityAlpha[107], EthnicNoteColor[107]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[108] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[108], EthnicVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  EthnicVelocityAlpha[108], EthnicNoteColor[108]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[109] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[109], EthnicVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  EthnicVelocityAlpha[109], EthnicNoteColor[109]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[110] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[110], EthnicVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  EthnicVelocityAlpha[110], EthnicNoteColor[110]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[111] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[111], EthnicVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  EthnicVelocityAlpha[111], EthnicNoteColor[111]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[112] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[112], EthnicVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  EthnicVelocityAlpha[112], EthnicNoteColor[112]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[113] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[113], EthnicVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  EthnicVelocityAlpha[113], EthnicNoteColor[113]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[114] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[114], EthnicVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  EthnicVelocityAlpha[114], EthnicNoteColor[114]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[115] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[115], EthnicVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  EthnicVelocityAlpha[115], EthnicNoteColor[115]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[116] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[116], EthnicVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  EthnicVelocityAlpha[116], EthnicNoteColor[116]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[117] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[117], EthnicVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  EthnicVelocityAlpha[117], EthnicNoteColor[117]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[118] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[118], EthnicVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  EthnicVelocityAlpha[118], EthnicNoteColor[118]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[119] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[119], EthnicVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  EthnicVelocityAlpha[119], EthnicNoteColor[119]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[120] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[120], EthnicVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], EthnicVelocityAlpha[120], EthnicNoteColor[120]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[121] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[121], EthnicVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], EthnicVelocityAlpha[121], EthnicNoteColor[121]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[122] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[122], EthnicVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], EthnicVelocityAlpha[122], EthnicNoteColor[122]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[123] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[123], EthnicVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], EthnicVelocityAlpha[123], EthnicNoteColor[123]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[124] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[124], EthnicVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], EthnicVelocityAlpha[124], EthnicNoteColor[124]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[125] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[125], EthnicVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], EthnicVelocityAlpha[125], EthnicNoteColor[125]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[126] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[126], EthnicVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], EthnicVelocityAlpha[126], EthnicNoteColor[126]); ethnicgfx.display();}
//     if (EthnicPitchIsActive[127] == true) {ethnicgfx = new EthnicGFX (EthnicPitchX[127], EthnicVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], EthnicVelocityAlpha[127], EthnicNoteColor[127]); ethnicgfx.display();}
//   }
// }

// void PercussiveGFXDisplay(){//Percussive
//   if (ChannelIsActive[14] == true) {// Percussive Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
//     if (PercussivePitchIsActive[0]   == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[0  ], PercussiveVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussiveVelocityAlpha[0]  , PercussiveNoteColor[0]  ); percussivegfx.display();}
//     if (PercussivePitchIsActive[1]   == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[1  ], PercussiveVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussiveVelocityAlpha[1]  , PercussiveNoteColor[1]  ); percussivegfx.display();}
//     if (PercussivePitchIsActive[2]   == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[2  ], PercussiveVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussiveVelocityAlpha[2]  , PercussiveNoteColor[2]  ); percussivegfx.display();}
//     if (PercussivePitchIsActive[3]   == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[3  ], PercussiveVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussiveVelocityAlpha[3]  , PercussiveNoteColor[3]  ); percussivegfx.display();}
//     if (PercussivePitchIsActive[4]   == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[4  ], PercussiveVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussiveVelocityAlpha[4]  , PercussiveNoteColor[4]  ); percussivegfx.display();}
//     if (PercussivePitchIsActive[5]   == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[5  ], PercussiveVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussiveVelocityAlpha[5]  , PercussiveNoteColor[5]  ); percussivegfx.display();}
//     if (PercussivePitchIsActive[6]   == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[6  ], PercussiveVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussiveVelocityAlpha[6]  , PercussiveNoteColor[6]  ); percussivegfx.display();}
//     if (PercussivePitchIsActive[7]   == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[7  ], PercussiveVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussiveVelocityAlpha[7]  , PercussiveNoteColor[7]  ); percussivegfx.display();}
//     if (PercussivePitchIsActive[8]   == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[8  ], PercussiveVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussiveVelocityAlpha[8]  , PercussiveNoteColor[8]  ); percussivegfx.display();}
//     if (PercussivePitchIsActive[9]   == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[9  ], PercussiveVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussiveVelocityAlpha[9]  , PercussiveNoteColor[9]  ); percussivegfx.display();}
//     if (PercussivePitchIsActive[10]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[10 ], PercussiveVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussiveVelocityAlpha[10] , PercussiveNoteColor[10] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[11]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[11 ], PercussiveVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussiveVelocityAlpha[11] , PercussiveNoteColor[11] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[12]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[12 ], PercussiveVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussiveVelocityAlpha[12] , PercussiveNoteColor[12] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[13]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[13 ], PercussiveVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussiveVelocityAlpha[13] , PercussiveNoteColor[13] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[14]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[14 ], PercussiveVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussiveVelocityAlpha[14] , PercussiveNoteColor[14] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[15]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[15 ], PercussiveVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussiveVelocityAlpha[15] , PercussiveNoteColor[15] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[16]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[16 ], PercussiveVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussiveVelocityAlpha[16] , PercussiveNoteColor[16] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[17]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[17 ], PercussiveVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussiveVelocityAlpha[17] , PercussiveNoteColor[17] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[18]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[18 ], PercussiveVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussiveVelocityAlpha[18] , PercussiveNoteColor[18] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[19]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[19 ], PercussiveVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussiveVelocityAlpha[19] , PercussiveNoteColor[19] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[20]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[20 ], PercussiveVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussiveVelocityAlpha[20] , PercussiveNoteColor[20] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[21]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[21 ], PercussiveVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussiveVelocityAlpha[21] , PercussiveNoteColor[21] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[22]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[22 ], PercussiveVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussiveVelocityAlpha[22] , PercussiveNoteColor[22] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[23]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[23 ], PercussiveVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussiveVelocityAlpha[23] , PercussiveNoteColor[23] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[24]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[24 ], PercussiveVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussiveVelocityAlpha[24] , PercussiveNoteColor[24] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[25]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[25 ], PercussiveVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussiveVelocityAlpha[25] , PercussiveNoteColor[25] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[26]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[26 ], PercussiveVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussiveVelocityAlpha[26] , PercussiveNoteColor[26] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[27]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[27 ], PercussiveVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussiveVelocityAlpha[27] , PercussiveNoteColor[27] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[28]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[28 ], PercussiveVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussiveVelocityAlpha[28] , PercussiveNoteColor[28] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[29]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[29 ], PercussiveVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussiveVelocityAlpha[29] , PercussiveNoteColor[29] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[30]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[30 ], PercussiveVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussiveVelocityAlpha[30] , PercussiveNoteColor[30] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[31]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[31 ], PercussiveVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussiveVelocityAlpha[31] , PercussiveNoteColor[31] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[32]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[32 ], PercussiveVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussiveVelocityAlpha[32] , PercussiveNoteColor[32] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[33]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[33 ], PercussiveVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussiveVelocityAlpha[33] , PercussiveNoteColor[33] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[34]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[34 ], PercussiveVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussiveVelocityAlpha[34] , PercussiveNoteColor[34] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[35]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[35 ], PercussiveVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussiveVelocityAlpha[35] , PercussiveNoteColor[35] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[36]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[36 ], PercussiveVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussiveVelocityAlpha[36] , PercussiveNoteColor[36] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[37]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[37 ], PercussiveVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussiveVelocityAlpha[37] , PercussiveNoteColor[37] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[38]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[38 ], PercussiveVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussiveVelocityAlpha[38] , PercussiveNoteColor[38] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[39]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[39 ], PercussiveVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussiveVelocityAlpha[39] , PercussiveNoteColor[39] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[40]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[40 ], PercussiveVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussiveVelocityAlpha[40] , PercussiveNoteColor[40] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[41]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[41 ], PercussiveVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussiveVelocityAlpha[41] , PercussiveNoteColor[41] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[42]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[42 ], PercussiveVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussiveVelocityAlpha[42] , PercussiveNoteColor[42] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[43]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[43 ], PercussiveVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussiveVelocityAlpha[43] , PercussiveNoteColor[43] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[44]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[44 ], PercussiveVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussiveVelocityAlpha[44] , PercussiveNoteColor[44] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[45]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[45 ], PercussiveVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussiveVelocityAlpha[45] , PercussiveNoteColor[45] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[46]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[46 ], PercussiveVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussiveVelocityAlpha[46] , PercussiveNoteColor[46] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[47]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[47 ], PercussiveVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussiveVelocityAlpha[47] , PercussiveNoteColor[47] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[48]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[48 ], PercussiveVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussiveVelocityAlpha[48] , PercussiveNoteColor[48] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[49]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[49 ], PercussiveVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussiveVelocityAlpha[49] , PercussiveNoteColor[49] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[50]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[50 ], PercussiveVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussiveVelocityAlpha[50] , PercussiveNoteColor[50] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[51]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[51 ], PercussiveVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussiveVelocityAlpha[51] , PercussiveNoteColor[51] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[52]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[52 ], PercussiveVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussiveVelocityAlpha[52] , PercussiveNoteColor[52] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[53]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[53 ], PercussiveVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussiveVelocityAlpha[53] , PercussiveNoteColor[53] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[54]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[54 ], PercussiveVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussiveVelocityAlpha[54] , PercussiveNoteColor[54] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[55]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[55 ], PercussiveVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussiveVelocityAlpha[55] , PercussiveNoteColor[55] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[56]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[56 ], PercussiveVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussiveVelocityAlpha[56] , PercussiveNoteColor[56] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[57]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[57 ], PercussiveVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussiveVelocityAlpha[57] , PercussiveNoteColor[57] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[58]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[58 ], PercussiveVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussiveVelocityAlpha[58] , PercussiveNoteColor[58] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[59]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[59 ], PercussiveVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussiveVelocityAlpha[59] , PercussiveNoteColor[59] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[60]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[60 ], PercussiveVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussiveVelocityAlpha[60] , PercussiveNoteColor[60] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[61]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[61 ], PercussiveVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussiveVelocityAlpha[61] , PercussiveNoteColor[61] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[62]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[62 ], PercussiveVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussiveVelocityAlpha[62] , PercussiveNoteColor[62] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[63]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[63 ], PercussiveVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussiveVelocityAlpha[63] , PercussiveNoteColor[63] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[64]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[64 ], PercussiveVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussiveVelocityAlpha[64] , PercussiveNoteColor[64] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[65]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[65 ], PercussiveVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussiveVelocityAlpha[65] , PercussiveNoteColor[65] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[66]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[66 ], PercussiveVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussiveVelocityAlpha[66] , PercussiveNoteColor[66] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[67]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[67 ], PercussiveVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussiveVelocityAlpha[67] , PercussiveNoteColor[67] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[68]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[68 ], PercussiveVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussiveVelocityAlpha[68] , PercussiveNoteColor[68] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[69]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[69 ], PercussiveVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussiveVelocityAlpha[69] , PercussiveNoteColor[69] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[70]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[70 ], PercussiveVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussiveVelocityAlpha[70] , PercussiveNoteColor[70] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[71]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[71 ], PercussiveVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussiveVelocityAlpha[71] , PercussiveNoteColor[71] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[72]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[72 ], PercussiveVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussiveVelocityAlpha[72] , PercussiveNoteColor[72] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[73]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[73 ], PercussiveVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussiveVelocityAlpha[73] , PercussiveNoteColor[73] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[74]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[74 ], PercussiveVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussiveVelocityAlpha[74] , PercussiveNoteColor[74] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[75]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[75 ], PercussiveVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussiveVelocityAlpha[75] , PercussiveNoteColor[75] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[76]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[76 ], PercussiveVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussiveVelocityAlpha[76] , PercussiveNoteColor[76] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[77]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[77 ], PercussiveVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussiveVelocityAlpha[77] , PercussiveNoteColor[77] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[78]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[78 ], PercussiveVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussiveVelocityAlpha[78] , PercussiveNoteColor[78] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[79]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[79 ], PercussiveVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussiveVelocityAlpha[79] , PercussiveNoteColor[79] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[80]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[80 ], PercussiveVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussiveVelocityAlpha[80] , PercussiveNoteColor[80] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[81]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[81 ], PercussiveVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussiveVelocityAlpha[81] , PercussiveNoteColor[81] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[82]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[82 ], PercussiveVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussiveVelocityAlpha[82] , PercussiveNoteColor[82] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[83]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[83 ], PercussiveVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussiveVelocityAlpha[83] , PercussiveNoteColor[83] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[84]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[84 ], PercussiveVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussiveVelocityAlpha[84] , PercussiveNoteColor[84] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[85]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[85 ], PercussiveVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussiveVelocityAlpha[85] , PercussiveNoteColor[85] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[86]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[86 ], PercussiveVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussiveVelocityAlpha[86] , PercussiveNoteColor[86] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[87]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[87 ], PercussiveVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussiveVelocityAlpha[87] , PercussiveNoteColor[87] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[88]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[88 ], PercussiveVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussiveVelocityAlpha[88] , PercussiveNoteColor[88] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[89]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[89 ], PercussiveVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussiveVelocityAlpha[89] , PercussiveNoteColor[89] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[90]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[90 ], PercussiveVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussiveVelocityAlpha[90] , PercussiveNoteColor[90] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[91]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[91 ], PercussiveVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussiveVelocityAlpha[91] , PercussiveNoteColor[91] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[92]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[92 ], PercussiveVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussiveVelocityAlpha[92] , PercussiveNoteColor[92] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[93]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[93 ], PercussiveVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussiveVelocityAlpha[93] , PercussiveNoteColor[93] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[94]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[94 ], PercussiveVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussiveVelocityAlpha[94] , PercussiveNoteColor[94] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[95]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[95 ], PercussiveVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussiveVelocityAlpha[95] , PercussiveNoteColor[95] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[96]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[96 ], PercussiveVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussiveVelocityAlpha[96] , PercussiveNoteColor[96] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[97]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[97 ], PercussiveVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussiveVelocityAlpha[97] , PercussiveNoteColor[97] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[98]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[98 ], PercussiveVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussiveVelocityAlpha[98] , PercussiveNoteColor[98] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[99]  == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[99 ], PercussiveVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussiveVelocityAlpha[99] , PercussiveNoteColor[99] ); percussivegfx.display();}
//     if (PercussivePitchIsActive[100] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[100], PercussiveVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussiveVelocityAlpha[100], PercussiveNoteColor[100]); percussivegfx.display();}
//     if (PercussivePitchIsActive[101] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[101], PercussiveVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussiveVelocityAlpha[101], PercussiveNoteColor[101]); percussivegfx.display();}
//     if (PercussivePitchIsActive[102] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[102], PercussiveVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussiveVelocityAlpha[102], PercussiveNoteColor[102]); percussivegfx.display();}
//     if (PercussivePitchIsActive[103] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[103], PercussiveVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussiveVelocityAlpha[103], PercussiveNoteColor[103]); percussivegfx.display();}
//     if (PercussivePitchIsActive[104] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[104], PercussiveVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussiveVelocityAlpha[104], PercussiveNoteColor[104]); percussivegfx.display();}
//     if (PercussivePitchIsActive[105] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[105], PercussiveVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussiveVelocityAlpha[105], PercussiveNoteColor[105]); percussivegfx.display();}
//     if (PercussivePitchIsActive[106] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[106], PercussiveVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussiveVelocityAlpha[106], PercussiveNoteColor[106]); percussivegfx.display();}
//     if (PercussivePitchIsActive[107] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[107], PercussiveVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussiveVelocityAlpha[107], PercussiveNoteColor[107]); percussivegfx.display();}
//     if (PercussivePitchIsActive[108] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[108], PercussiveVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussiveVelocityAlpha[108], PercussiveNoteColor[108]); percussivegfx.display();}
//     if (PercussivePitchIsActive[109] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[109], PercussiveVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussiveVelocityAlpha[109], PercussiveNoteColor[109]); percussivegfx.display();}
//     if (PercussivePitchIsActive[110] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[110], PercussiveVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussiveVelocityAlpha[110], PercussiveNoteColor[110]); percussivegfx.display();}
//     if (PercussivePitchIsActive[111] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[111], PercussiveVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussiveVelocityAlpha[111], PercussiveNoteColor[111]); percussivegfx.display();}
//     if (PercussivePitchIsActive[112] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[112], PercussiveVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussiveVelocityAlpha[112], PercussiveNoteColor[112]); percussivegfx.display();}
//     if (PercussivePitchIsActive[113] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[113], PercussiveVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussiveVelocityAlpha[113], PercussiveNoteColor[113]); percussivegfx.display();}
//     if (PercussivePitchIsActive[114] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[114], PercussiveVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussiveVelocityAlpha[114], PercussiveNoteColor[114]); percussivegfx.display();}
//     if (PercussivePitchIsActive[115] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[115], PercussiveVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussiveVelocityAlpha[115], PercussiveNoteColor[115]); percussivegfx.display();}
//     if (PercussivePitchIsActive[116] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[116], PercussiveVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussiveVelocityAlpha[116], PercussiveNoteColor[116]); percussivegfx.display();}
//     if (PercussivePitchIsActive[117] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[117], PercussiveVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussiveVelocityAlpha[117], PercussiveNoteColor[117]); percussivegfx.display();}
//     if (PercussivePitchIsActive[118] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[118], PercussiveVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussiveVelocityAlpha[118], PercussiveNoteColor[118]); percussivegfx.display();}
//     if (PercussivePitchIsActive[119] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[119], PercussiveVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussiveVelocityAlpha[119], PercussiveNoteColor[119]); percussivegfx.display();}
//     if (PercussivePitchIsActive[120] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[120], PercussiveVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], PercussiveVelocityAlpha[120], PercussiveNoteColor[120]); percussivegfx.display();}
//     if (PercussivePitchIsActive[121] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[121], PercussiveVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], PercussiveVelocityAlpha[121], PercussiveNoteColor[121]); percussivegfx.display();}
//     if (PercussivePitchIsActive[122] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[122], PercussiveVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], PercussiveVelocityAlpha[122], PercussiveNoteColor[122]); percussivegfx.display();}
//     if (PercussivePitchIsActive[123] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[123], PercussiveVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], PercussiveVelocityAlpha[123], PercussiveNoteColor[123]); percussivegfx.display();}
//     if (PercussivePitchIsActive[124] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[124], PercussiveVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], PercussiveVelocityAlpha[124], PercussiveNoteColor[124]); percussivegfx.display();}
//     if (PercussivePitchIsActive[125] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[125], PercussiveVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], PercussiveVelocityAlpha[125], PercussiveNoteColor[125]); percussivegfx.display();}
//     if (PercussivePitchIsActive[126] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[126], PercussiveVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], PercussiveVelocityAlpha[126], PercussiveNoteColor[126]); percussivegfx.display();}
//     if (PercussivePitchIsActive[127] == true) {percussivegfx = new PercussiveGFX (PercussivePitchX[127], PercussiveVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], PercussiveVelocityAlpha[127], PercussiveNoteColor[127]); percussivegfx.display();}
//   }
// }

// void SoundEffectsGFXDisplay(){//SoundEffects
//   if (ChannelIsActive[15] == true) {// SoundEffects Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
//     if (SoundEffectsPitchIsActive[0]   == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[0  ], SoundEffectsVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  SoundEffectsVelocityAlpha[0]  , SoundEffectsNoteColor[0]  ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[1]   == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[1  ], SoundEffectsVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  SoundEffectsVelocityAlpha[1]  , SoundEffectsNoteColor[1]  ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[2]   == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[2  ], SoundEffectsVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  SoundEffectsVelocityAlpha[2]  , SoundEffectsNoteColor[2]  ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[3]   == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[3  ], SoundEffectsVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  SoundEffectsVelocityAlpha[3]  , SoundEffectsNoteColor[3]  ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[4]   == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[4  ], SoundEffectsVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  SoundEffectsVelocityAlpha[4]  , SoundEffectsNoteColor[4]  ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[5]   == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[5  ], SoundEffectsVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  SoundEffectsVelocityAlpha[5]  , SoundEffectsNoteColor[5]  ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[6]   == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[6  ], SoundEffectsVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  SoundEffectsVelocityAlpha[6]  , SoundEffectsNoteColor[6]  ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[7]   == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[7  ], SoundEffectsVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  SoundEffectsVelocityAlpha[7]  , SoundEffectsNoteColor[7]  ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[8]   == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[8  ], SoundEffectsVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  SoundEffectsVelocityAlpha[8]  , SoundEffectsNoteColor[8]  ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[9]   == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[9  ], SoundEffectsVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  SoundEffectsVelocityAlpha[9]  , SoundEffectsNoteColor[9]  ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[10]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[10 ], SoundEffectsVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  SoundEffectsVelocityAlpha[10] , SoundEffectsNoteColor[10] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[11]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[11 ], SoundEffectsVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  SoundEffectsVelocityAlpha[11] , SoundEffectsNoteColor[11] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[12]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[12 ], SoundEffectsVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  SoundEffectsVelocityAlpha[12] , SoundEffectsNoteColor[12] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[13]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[13 ], SoundEffectsVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  SoundEffectsVelocityAlpha[13] , SoundEffectsNoteColor[13] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[14]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[14 ], SoundEffectsVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  SoundEffectsVelocityAlpha[14] , SoundEffectsNoteColor[14] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[15]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[15 ], SoundEffectsVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  SoundEffectsVelocityAlpha[15] , SoundEffectsNoteColor[15] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[16]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[16 ], SoundEffectsVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  SoundEffectsVelocityAlpha[16] , SoundEffectsNoteColor[16] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[17]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[17 ], SoundEffectsVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  SoundEffectsVelocityAlpha[17] , SoundEffectsNoteColor[17] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[18]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[18 ], SoundEffectsVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  SoundEffectsVelocityAlpha[18] , SoundEffectsNoteColor[18] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[19]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[19 ], SoundEffectsVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  SoundEffectsVelocityAlpha[19] , SoundEffectsNoteColor[19] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[20]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[20 ], SoundEffectsVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  SoundEffectsVelocityAlpha[20] , SoundEffectsNoteColor[20] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[21]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[21 ], SoundEffectsVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  SoundEffectsVelocityAlpha[21] , SoundEffectsNoteColor[21] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[22]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[22 ], SoundEffectsVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  SoundEffectsVelocityAlpha[22] , SoundEffectsNoteColor[22] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[23]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[23 ], SoundEffectsVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  SoundEffectsVelocityAlpha[23] , SoundEffectsNoteColor[23] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[24]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[24 ], SoundEffectsVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  SoundEffectsVelocityAlpha[24] , SoundEffectsNoteColor[24] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[25]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[25 ], SoundEffectsVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  SoundEffectsVelocityAlpha[25] , SoundEffectsNoteColor[25] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[26]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[26 ], SoundEffectsVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  SoundEffectsVelocityAlpha[26] , SoundEffectsNoteColor[26] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[27]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[27 ], SoundEffectsVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  SoundEffectsVelocityAlpha[27] , SoundEffectsNoteColor[27] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[28]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[28 ], SoundEffectsVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  SoundEffectsVelocityAlpha[28] , SoundEffectsNoteColor[28] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[29]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[29 ], SoundEffectsVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  SoundEffectsVelocityAlpha[29] , SoundEffectsNoteColor[29] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[30]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[30 ], SoundEffectsVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  SoundEffectsVelocityAlpha[30] , SoundEffectsNoteColor[30] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[31]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[31 ], SoundEffectsVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  SoundEffectsVelocityAlpha[31] , SoundEffectsNoteColor[31] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[32]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[32 ], SoundEffectsVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  SoundEffectsVelocityAlpha[32] , SoundEffectsNoteColor[32] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[33]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[33 ], SoundEffectsVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  SoundEffectsVelocityAlpha[33] , SoundEffectsNoteColor[33] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[34]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[34 ], SoundEffectsVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  SoundEffectsVelocityAlpha[34] , SoundEffectsNoteColor[34] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[35]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[35 ], SoundEffectsVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  SoundEffectsVelocityAlpha[35] , SoundEffectsNoteColor[35] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[36]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[36 ], SoundEffectsVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  SoundEffectsVelocityAlpha[36] , SoundEffectsNoteColor[36] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[37]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[37 ], SoundEffectsVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  SoundEffectsVelocityAlpha[37] , SoundEffectsNoteColor[37] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[38]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[38 ], SoundEffectsVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  SoundEffectsVelocityAlpha[38] , SoundEffectsNoteColor[38] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[39]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[39 ], SoundEffectsVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  SoundEffectsVelocityAlpha[39] , SoundEffectsNoteColor[39] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[40]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[40 ], SoundEffectsVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  SoundEffectsVelocityAlpha[40] , SoundEffectsNoteColor[40] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[41]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[41 ], SoundEffectsVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  SoundEffectsVelocityAlpha[41] , SoundEffectsNoteColor[41] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[42]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[42 ], SoundEffectsVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  SoundEffectsVelocityAlpha[42] , SoundEffectsNoteColor[42] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[43]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[43 ], SoundEffectsVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  SoundEffectsVelocityAlpha[43] , SoundEffectsNoteColor[43] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[44]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[44 ], SoundEffectsVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  SoundEffectsVelocityAlpha[44] , SoundEffectsNoteColor[44] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[45]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[45 ], SoundEffectsVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  SoundEffectsVelocityAlpha[45] , SoundEffectsNoteColor[45] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[46]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[46 ], SoundEffectsVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  SoundEffectsVelocityAlpha[46] , SoundEffectsNoteColor[46] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[47]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[47 ], SoundEffectsVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  SoundEffectsVelocityAlpha[47] , SoundEffectsNoteColor[47] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[48]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[48 ], SoundEffectsVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  SoundEffectsVelocityAlpha[48] , SoundEffectsNoteColor[48] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[49]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[49 ], SoundEffectsVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  SoundEffectsVelocityAlpha[49] , SoundEffectsNoteColor[49] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[50]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[50 ], SoundEffectsVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  SoundEffectsVelocityAlpha[50] , SoundEffectsNoteColor[50] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[51]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[51 ], SoundEffectsVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  SoundEffectsVelocityAlpha[51] , SoundEffectsNoteColor[51] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[52]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[52 ], SoundEffectsVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  SoundEffectsVelocityAlpha[52] , SoundEffectsNoteColor[52] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[53]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[53 ], SoundEffectsVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  SoundEffectsVelocityAlpha[53] , SoundEffectsNoteColor[53] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[54]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[54 ], SoundEffectsVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  SoundEffectsVelocityAlpha[54] , SoundEffectsNoteColor[54] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[55]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[55 ], SoundEffectsVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  SoundEffectsVelocityAlpha[55] , SoundEffectsNoteColor[55] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[56]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[56 ], SoundEffectsVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  SoundEffectsVelocityAlpha[56] , SoundEffectsNoteColor[56] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[57]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[57 ], SoundEffectsVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  SoundEffectsVelocityAlpha[57] , SoundEffectsNoteColor[57] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[58]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[58 ], SoundEffectsVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  SoundEffectsVelocityAlpha[58] , SoundEffectsNoteColor[58] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[59]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[59 ], SoundEffectsVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  SoundEffectsVelocityAlpha[59] , SoundEffectsNoteColor[59] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[60]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[60 ], SoundEffectsVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  SoundEffectsVelocityAlpha[60] , SoundEffectsNoteColor[60] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[61]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[61 ], SoundEffectsVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  SoundEffectsVelocityAlpha[61] , SoundEffectsNoteColor[61] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[62]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[62 ], SoundEffectsVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  SoundEffectsVelocityAlpha[62] , SoundEffectsNoteColor[62] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[63]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[63 ], SoundEffectsVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  SoundEffectsVelocityAlpha[63] , SoundEffectsNoteColor[63] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[64]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[64 ], SoundEffectsVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  SoundEffectsVelocityAlpha[64] , SoundEffectsNoteColor[64] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[65]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[65 ], SoundEffectsVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  SoundEffectsVelocityAlpha[65] , SoundEffectsNoteColor[65] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[66]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[66 ], SoundEffectsVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  SoundEffectsVelocityAlpha[66] , SoundEffectsNoteColor[66] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[67]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[67 ], SoundEffectsVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  SoundEffectsVelocityAlpha[67] , SoundEffectsNoteColor[67] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[68]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[68 ], SoundEffectsVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  SoundEffectsVelocityAlpha[68] , SoundEffectsNoteColor[68] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[69]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[69 ], SoundEffectsVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  SoundEffectsVelocityAlpha[69] , SoundEffectsNoteColor[69] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[70]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[70 ], SoundEffectsVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  SoundEffectsVelocityAlpha[70] , SoundEffectsNoteColor[70] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[71]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[71 ], SoundEffectsVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  SoundEffectsVelocityAlpha[71] , SoundEffectsNoteColor[71] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[72]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[72 ], SoundEffectsVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  SoundEffectsVelocityAlpha[72] , SoundEffectsNoteColor[72] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[73]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[73 ], SoundEffectsVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  SoundEffectsVelocityAlpha[73] , SoundEffectsNoteColor[73] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[74]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[74 ], SoundEffectsVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  SoundEffectsVelocityAlpha[74] , SoundEffectsNoteColor[74] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[75]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[75 ], SoundEffectsVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  SoundEffectsVelocityAlpha[75] , SoundEffectsNoteColor[75] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[76]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[76 ], SoundEffectsVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  SoundEffectsVelocityAlpha[76] , SoundEffectsNoteColor[76] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[77]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[77 ], SoundEffectsVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  SoundEffectsVelocityAlpha[77] , SoundEffectsNoteColor[77] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[78]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[78 ], SoundEffectsVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  SoundEffectsVelocityAlpha[78] , SoundEffectsNoteColor[78] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[79]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[79 ], SoundEffectsVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  SoundEffectsVelocityAlpha[79] , SoundEffectsNoteColor[79] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[80]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[80 ], SoundEffectsVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  SoundEffectsVelocityAlpha[80] , SoundEffectsNoteColor[80] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[81]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[81 ], SoundEffectsVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  SoundEffectsVelocityAlpha[81] , SoundEffectsNoteColor[81] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[82]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[82 ], SoundEffectsVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  SoundEffectsVelocityAlpha[82] , SoundEffectsNoteColor[82] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[83]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[83 ], SoundEffectsVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  SoundEffectsVelocityAlpha[83] , SoundEffectsNoteColor[83] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[84]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[84 ], SoundEffectsVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  SoundEffectsVelocityAlpha[84] , SoundEffectsNoteColor[84] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[85]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[85 ], SoundEffectsVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  SoundEffectsVelocityAlpha[85] , SoundEffectsNoteColor[85] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[86]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[86 ], SoundEffectsVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  SoundEffectsVelocityAlpha[86] , SoundEffectsNoteColor[86] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[87]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[87 ], SoundEffectsVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  SoundEffectsVelocityAlpha[87] , SoundEffectsNoteColor[87] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[88]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[88 ], SoundEffectsVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  SoundEffectsVelocityAlpha[88] , SoundEffectsNoteColor[88] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[89]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[89 ], SoundEffectsVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  SoundEffectsVelocityAlpha[89] , SoundEffectsNoteColor[89] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[90]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[90 ], SoundEffectsVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  SoundEffectsVelocityAlpha[90] , SoundEffectsNoteColor[90] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[91]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[91 ], SoundEffectsVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  SoundEffectsVelocityAlpha[91] , SoundEffectsNoteColor[91] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[92]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[92 ], SoundEffectsVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  SoundEffectsVelocityAlpha[92] , SoundEffectsNoteColor[92] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[93]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[93 ], SoundEffectsVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  SoundEffectsVelocityAlpha[93] , SoundEffectsNoteColor[93] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[94]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[94 ], SoundEffectsVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  SoundEffectsVelocityAlpha[94] , SoundEffectsNoteColor[94] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[95]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[95 ], SoundEffectsVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  SoundEffectsVelocityAlpha[95] , SoundEffectsNoteColor[95] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[96]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[96 ], SoundEffectsVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  SoundEffectsVelocityAlpha[96] , SoundEffectsNoteColor[96] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[97]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[97 ], SoundEffectsVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  SoundEffectsVelocityAlpha[97] , SoundEffectsNoteColor[97] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[98]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[98 ], SoundEffectsVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  SoundEffectsVelocityAlpha[98] , SoundEffectsNoteColor[98] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[99]  == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[99 ], SoundEffectsVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  SoundEffectsVelocityAlpha[99] , SoundEffectsNoteColor[99] ); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[100] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[100], SoundEffectsVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  SoundEffectsVelocityAlpha[100], SoundEffectsNoteColor[100]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[101] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[101], SoundEffectsVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  SoundEffectsVelocityAlpha[101], SoundEffectsNoteColor[101]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[102] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[102], SoundEffectsVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  SoundEffectsVelocityAlpha[102], SoundEffectsNoteColor[102]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[103] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[103], SoundEffectsVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  SoundEffectsVelocityAlpha[103], SoundEffectsNoteColor[103]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[104] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[104], SoundEffectsVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  SoundEffectsVelocityAlpha[104], SoundEffectsNoteColor[104]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[105] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[105], SoundEffectsVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  SoundEffectsVelocityAlpha[105], SoundEffectsNoteColor[105]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[106] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[106], SoundEffectsVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  SoundEffectsVelocityAlpha[106], SoundEffectsNoteColor[106]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[107] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[107], SoundEffectsVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  SoundEffectsVelocityAlpha[107], SoundEffectsNoteColor[107]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[108] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[108], SoundEffectsVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  SoundEffectsVelocityAlpha[108], SoundEffectsNoteColor[108]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[109] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[109], SoundEffectsVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  SoundEffectsVelocityAlpha[109], SoundEffectsNoteColor[109]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[110] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[110], SoundEffectsVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  SoundEffectsVelocityAlpha[110], SoundEffectsNoteColor[110]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[111] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[111], SoundEffectsVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  SoundEffectsVelocityAlpha[111], SoundEffectsNoteColor[111]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[112] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[112], SoundEffectsVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  SoundEffectsVelocityAlpha[112], SoundEffectsNoteColor[112]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[113] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[113], SoundEffectsVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  SoundEffectsVelocityAlpha[113], SoundEffectsNoteColor[113]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[114] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[114], SoundEffectsVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  SoundEffectsVelocityAlpha[114], SoundEffectsNoteColor[114]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[115] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[115], SoundEffectsVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  SoundEffectsVelocityAlpha[115], SoundEffectsNoteColor[115]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[116] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[116], SoundEffectsVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  SoundEffectsVelocityAlpha[116], SoundEffectsNoteColor[116]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[117] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[117], SoundEffectsVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  SoundEffectsVelocityAlpha[117], SoundEffectsNoteColor[117]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[118] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[118], SoundEffectsVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  SoundEffectsVelocityAlpha[118], SoundEffectsNoteColor[118]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[119] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[119], SoundEffectsVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  SoundEffectsVelocityAlpha[119], SoundEffectsNoteColor[119]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[120] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[120], SoundEffectsVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], SoundEffectsVelocityAlpha[120], SoundEffectsNoteColor[120]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[121] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[121], SoundEffectsVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], SoundEffectsVelocityAlpha[121], SoundEffectsNoteColor[121]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[122] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[122], SoundEffectsVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], SoundEffectsVelocityAlpha[122], SoundEffectsNoteColor[122]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[123] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[123], SoundEffectsVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], SoundEffectsVelocityAlpha[123], SoundEffectsNoteColor[123]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[124] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[124], SoundEffectsVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], SoundEffectsVelocityAlpha[124], SoundEffectsNoteColor[124]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[125] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[125], SoundEffectsVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], SoundEffectsVelocityAlpha[125], SoundEffectsNoteColor[125]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[126] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[126], SoundEffectsVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], SoundEffectsVelocityAlpha[126], SoundEffectsNoteColor[126]); soundeffectsgfx.display();}
//     if (SoundEffectsPitchIsActive[127] == true) {soundeffectsgfx = new SoundEffectsGFX (SoundEffectsPitchX[127], SoundEffectsVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], SoundEffectsVelocityAlpha[127], SoundEffectsNoteColor[127]); soundeffectsgfx.display();}
//   }
// }

// void PercussionGFXDisplay(){//Percussion
//   if (ChannelIsActive[16] == true) {// Percussion Channel graphics             X                  Y                     Z               Width          Height           Depth            Hue           Saturation             Brightness                 Alpha                 Texture           Display graphics
//     if (PercussionPitchIsActive[0]   == true) {percussiongfx = new PercussionGFX (PercussionPitchX[0  ], PercussionVelocityY[0]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussionVelocityAlpha[0]  , PercussionNoteColor[0]  ); percussiongfx.display();}
//     if (PercussionPitchIsActive[1]   == true) {percussiongfx = new PercussionGFX (PercussionPitchX[1  ], PercussionVelocityY[1]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussionVelocityAlpha[1]  , PercussionNoteColor[1]  ); percussiongfx.display();}
//     if (PercussionPitchIsActive[2]   == true) {percussiongfx = new PercussionGFX (PercussionPitchX[2  ], PercussionVelocityY[2]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussionVelocityAlpha[2]  , PercussionNoteColor[2]  ); percussiongfx.display();}
//     if (PercussionPitchIsActive[3]   == true) {percussiongfx = new PercussionGFX (PercussionPitchX[3  ], PercussionVelocityY[3]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussionVelocityAlpha[3]  , PercussionNoteColor[3]  ); percussiongfx.display();}
//     if (PercussionPitchIsActive[4]   == true) {percussiongfx = new PercussionGFX (PercussionPitchX[4  ], PercussionVelocityY[4]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussionVelocityAlpha[4]  , PercussionNoteColor[4]  ); percussiongfx.display();}
//     if (PercussionPitchIsActive[5]   == true) {percussiongfx = new PercussionGFX (PercussionPitchX[5  ], PercussionVelocityY[5]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussionVelocityAlpha[5]  , PercussionNoteColor[5]  ); percussiongfx.display();}
//     if (PercussionPitchIsActive[6]   == true) {percussiongfx = new PercussionGFX (PercussionPitchX[6  ], PercussionVelocityY[6]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussionVelocityAlpha[6]  , PercussionNoteColor[6]  ); percussiongfx.display();}
//     if (PercussionPitchIsActive[7]   == true) {percussiongfx = new PercussionGFX (PercussionPitchX[7  ], PercussionVelocityY[7]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussionVelocityAlpha[7]  , PercussionNoteColor[7]  ); percussiongfx.display();}
//     if (PercussionPitchIsActive[8]   == true) {percussiongfx = new PercussionGFX (PercussionPitchX[8  ], PercussionVelocityY[8]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussionVelocityAlpha[8]  , PercussionNoteColor[8]  ); percussiongfx.display();}
//     if (PercussionPitchIsActive[9]   == true) {percussiongfx = new PercussionGFX (PercussionPitchX[9  ], PercussionVelocityY[9]  , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussionVelocityAlpha[9]  , PercussionNoteColor[9]  ); percussiongfx.display();}
//     if (PercussionPitchIsActive[10]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[10 ], PercussionVelocityY[10] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussionVelocityAlpha[10] , PercussionNoteColor[10] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[11]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[11 ], PercussionVelocityY[11] , Depth+SineDepthm1, VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[0],  OctaveBrightnesses[0],  PercussionVelocityAlpha[11] , PercussionNoteColor[11] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[12]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[12 ], PercussionVelocityY[12] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussionVelocityAlpha[12] , PercussionNoteColor[12] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[13]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[13 ], PercussionVelocityY[13] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussionVelocityAlpha[13] , PercussionNoteColor[13] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[14]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[14 ], PercussionVelocityY[14] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussionVelocityAlpha[14] , PercussionNoteColor[14] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[15]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[15 ], PercussionVelocityY[15] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussionVelocityAlpha[15] , PercussionNoteColor[15] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[16]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[16 ], PercussionVelocityY[16] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussionVelocityAlpha[16] , PercussionNoteColor[16] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[17]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[17 ], PercussionVelocityY[17] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussionVelocityAlpha[17] , PercussionNoteColor[17] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[18]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[18 ], PercussionVelocityY[18] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussionVelocityAlpha[18] , PercussionNoteColor[18] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[19]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[19 ], PercussionVelocityY[19] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussionVelocityAlpha[19] , PercussionNoteColor[19] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[20]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[20 ], PercussionVelocityY[20] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussionVelocityAlpha[20] , PercussionNoteColor[20] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[21]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[21 ], PercussionVelocityY[21] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussionVelocityAlpha[21] , PercussionNoteColor[21] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[22]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[22 ], PercussionVelocityY[22] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussionVelocityAlpha[22] , PercussionNoteColor[22] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[23]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[23 ], PercussionVelocityY[23] , Depth+SineDepth0 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[1],  OctaveBrightnesses[1],  PercussionVelocityAlpha[23] , PercussionNoteColor[23] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[24]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[24 ], PercussionVelocityY[24] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussionVelocityAlpha[24] , PercussionNoteColor[24] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[25]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[25 ], PercussionVelocityY[25] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussionVelocityAlpha[25] , PercussionNoteColor[25] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[26]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[26 ], PercussionVelocityY[26] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussionVelocityAlpha[26] , PercussionNoteColor[26] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[27]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[27 ], PercussionVelocityY[27] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussionVelocityAlpha[27] , PercussionNoteColor[27] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[28]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[28 ], PercussionVelocityY[28] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussionVelocityAlpha[28] , PercussionNoteColor[28] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[29]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[29 ], PercussionVelocityY[29] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussionVelocityAlpha[29] , PercussionNoteColor[29] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[30]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[30 ], PercussionVelocityY[30] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussionVelocityAlpha[30] , PercussionNoteColor[30] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[31]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[31 ], PercussionVelocityY[31] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussionVelocityAlpha[31] , PercussionNoteColor[31] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[32]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[32 ], PercussionVelocityY[32] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussionVelocityAlpha[32] , PercussionNoteColor[32] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[33]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[33 ], PercussionVelocityY[33] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussionVelocityAlpha[33] , PercussionNoteColor[33] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[34]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[34 ], PercussionVelocityY[34] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussionVelocityAlpha[34] , PercussionNoteColor[34] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[35]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[35 ], PercussionVelocityY[35] , Depth+SineDepth1 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[2],  OctaveBrightnesses[2],  PercussionVelocityAlpha[35] , PercussionNoteColor[35] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[36]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[36 ], PercussionVelocityY[36] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussionVelocityAlpha[36] , PercussionNoteColor[36] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[37]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[37 ], PercussionVelocityY[37] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussionVelocityAlpha[37] , PercussionNoteColor[37] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[38]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[38 ], PercussionVelocityY[38] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussionVelocityAlpha[38] , PercussionNoteColor[38] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[39]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[39 ], PercussionVelocityY[39] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussionVelocityAlpha[39] , PercussionNoteColor[39] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[40]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[40 ], PercussionVelocityY[40] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussionVelocityAlpha[40] , PercussionNoteColor[40] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[41]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[41 ], PercussionVelocityY[41] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussionVelocityAlpha[41] , PercussionNoteColor[41] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[42]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[42 ], PercussionVelocityY[42] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussionVelocityAlpha[42] , PercussionNoteColor[42] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[43]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[43 ], PercussionVelocityY[43] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussionVelocityAlpha[43] , PercussionNoteColor[43] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[44]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[44 ], PercussionVelocityY[44] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussionVelocityAlpha[44] , PercussionNoteColor[44] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[45]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[45 ], PercussionVelocityY[45] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussionVelocityAlpha[45] , PercussionNoteColor[45] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[46]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[46 ], PercussionVelocityY[46] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussionVelocityAlpha[46] , PercussionNoteColor[46] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[47]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[47 ], PercussionVelocityY[47] , Depth+SineDepth2 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[3],  OctaveBrightnesses[3],  PercussionVelocityAlpha[47] , PercussionNoteColor[47] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[48]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[48 ], PercussionVelocityY[48] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussionVelocityAlpha[48] , PercussionNoteColor[48] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[49]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[49 ], PercussionVelocityY[49] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussionVelocityAlpha[49] , PercussionNoteColor[49] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[50]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[50 ], PercussionVelocityY[50] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussionVelocityAlpha[50] , PercussionNoteColor[50] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[51]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[51 ], PercussionVelocityY[51] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussionVelocityAlpha[51] , PercussionNoteColor[51] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[52]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[52 ], PercussionVelocityY[52] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussionVelocityAlpha[52] , PercussionNoteColor[52] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[53]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[53 ], PercussionVelocityY[53] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussionVelocityAlpha[53] , PercussionNoteColor[53] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[54]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[54 ], PercussionVelocityY[54] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussionVelocityAlpha[54] , PercussionNoteColor[54] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[55]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[55 ], PercussionVelocityY[55] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussionVelocityAlpha[55] , PercussionNoteColor[55] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[56]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[56 ], PercussionVelocityY[56] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussionVelocityAlpha[56] , PercussionNoteColor[56] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[57]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[57 ], PercussionVelocityY[57] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussionVelocityAlpha[57] , PercussionNoteColor[57] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[58]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[58 ], PercussionVelocityY[58] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussionVelocityAlpha[58] , PercussionNoteColor[58] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[59]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[59 ], PercussionVelocityY[59] , Depth+SineDepth3 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[4],  OctaveBrightnesses[4],  PercussionVelocityAlpha[59] , PercussionNoteColor[59] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[60]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[60 ], PercussionVelocityY[60] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussionVelocityAlpha[60] , PercussionNoteColor[60] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[61]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[61 ], PercussionVelocityY[61] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussionVelocityAlpha[61] , PercussionNoteColor[61] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[62]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[62 ], PercussionVelocityY[62] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussionVelocityAlpha[62] , PercussionNoteColor[62] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[63]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[63 ], PercussionVelocityY[63] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussionVelocityAlpha[63] , PercussionNoteColor[63] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[64]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[64 ], PercussionVelocityY[64] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussionVelocityAlpha[64] , PercussionNoteColor[64] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[65]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[65 ], PercussionVelocityY[65] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussionVelocityAlpha[65] , PercussionNoteColor[65] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[66]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[66 ], PercussionVelocityY[66] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussionVelocityAlpha[66] , PercussionNoteColor[66] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[67]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[67 ], PercussionVelocityY[67] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussionVelocityAlpha[67] , PercussionNoteColor[67] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[68]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[68 ], PercussionVelocityY[68] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussionVelocityAlpha[68] , PercussionNoteColor[68] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[69]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[69 ], PercussionVelocityY[69] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussionVelocityAlpha[69] , PercussionNoteColor[69] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[70]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[70 ], PercussionVelocityY[70] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussionVelocityAlpha[70] , PercussionNoteColor[70] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[71]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[71 ], PercussionVelocityY[71] , Depth+SineDepth4 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[5],  OctaveBrightnesses[5],  PercussionVelocityAlpha[71] , PercussionNoteColor[71] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[72]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[72 ], PercussionVelocityY[72] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussionVelocityAlpha[72] , PercussionNoteColor[72] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[73]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[73 ], PercussionVelocityY[73] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussionVelocityAlpha[73] , PercussionNoteColor[73] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[74]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[74 ], PercussionVelocityY[74] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussionVelocityAlpha[74] , PercussionNoteColor[74] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[75]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[75 ], PercussionVelocityY[75] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussionVelocityAlpha[75] , PercussionNoteColor[75] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[76]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[76 ], PercussionVelocityY[76] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussionVelocityAlpha[76] , PercussionNoteColor[76] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[77]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[77 ], PercussionVelocityY[77] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussionVelocityAlpha[77] , PercussionNoteColor[77] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[78]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[78 ], PercussionVelocityY[78] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussionVelocityAlpha[78] , PercussionNoteColor[78] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[79]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[79 ], PercussionVelocityY[79] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussionVelocityAlpha[79] , PercussionNoteColor[79] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[80]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[80 ], PercussionVelocityY[80] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussionVelocityAlpha[80] , PercussionNoteColor[80] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[81]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[81 ], PercussionVelocityY[81] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussionVelocityAlpha[81] , PercussionNoteColor[81] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[82]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[82 ], PercussionVelocityY[82] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussionVelocityAlpha[82] , PercussionNoteColor[82] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[83]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[83 ], PercussionVelocityY[83] , Depth+SineDepth5 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[6],  OctaveBrightnesses[6],  PercussionVelocityAlpha[83] , PercussionNoteColor[83] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[84]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[84 ], PercussionVelocityY[84] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussionVelocityAlpha[84] , PercussionNoteColor[84] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[85]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[85 ], PercussionVelocityY[85] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussionVelocityAlpha[85] , PercussionNoteColor[85] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[86]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[86 ], PercussionVelocityY[86] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussionVelocityAlpha[86] , PercussionNoteColor[86] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[87]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[87 ], PercussionVelocityY[87] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussionVelocityAlpha[87] , PercussionNoteColor[87] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[88]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[88 ], PercussionVelocityY[88] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussionVelocityAlpha[88] , PercussionNoteColor[88] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[89]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[89 ], PercussionVelocityY[89] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussionVelocityAlpha[89] , PercussionNoteColor[89] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[90]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[90 ], PercussionVelocityY[90] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussionVelocityAlpha[90] , PercussionNoteColor[90] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[91]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[91 ], PercussionVelocityY[91] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussionVelocityAlpha[91] , PercussionNoteColor[91] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[92]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[92 ], PercussionVelocityY[92] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussionVelocityAlpha[92] , PercussionNoteColor[92] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[93]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[93 ], PercussionVelocityY[93] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussionVelocityAlpha[93] , PercussionNoteColor[93] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[94]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[94 ], PercussionVelocityY[94] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussionVelocityAlpha[94] , PercussionNoteColor[94] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[95]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[95 ], PercussionVelocityY[95] , Depth+SineDepth6 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[7],  OctaveBrightnesses[7],  PercussionVelocityAlpha[95] , PercussionNoteColor[95] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[96]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[96 ], PercussionVelocityY[96] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussionVelocityAlpha[96] , PercussionNoteColor[96] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[97]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[97 ], PercussionVelocityY[97] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussionVelocityAlpha[97] , PercussionNoteColor[97] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[98]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[98 ], PercussionVelocityY[98] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussionVelocityAlpha[98] , PercussionNoteColor[98] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[99]  == true) {percussiongfx = new PercussionGFX (PercussionPitchX[99 ], PercussionVelocityY[99] , Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussionVelocityAlpha[99] , PercussionNoteColor[99] ); percussiongfx.display();}
//     if (PercussionPitchIsActive[100] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[100], PercussionVelocityY[100], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussionVelocityAlpha[100], PercussionNoteColor[100]); percussiongfx.display();}
//     if (PercussionPitchIsActive[101] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[101], PercussionVelocityY[101], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussionVelocityAlpha[101], PercussionNoteColor[101]); percussiongfx.display();}
//     if (PercussionPitchIsActive[102] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[102], PercussionVelocityY[102], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussionVelocityAlpha[102], PercussionNoteColor[102]); percussiongfx.display();}
//     if (PercussionPitchIsActive[103] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[103], PercussionVelocityY[103], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussionVelocityAlpha[103], PercussionNoteColor[103]); percussiongfx.display();}
//     if (PercussionPitchIsActive[104] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[104], PercussionVelocityY[104], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussionVelocityAlpha[104], PercussionNoteColor[104]); percussiongfx.display();}
//     if (PercussionPitchIsActive[105] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[105], PercussionVelocityY[105], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussionVelocityAlpha[105], PercussionNoteColor[105]); percussiongfx.display();}
//     if (PercussionPitchIsActive[106] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[106], PercussionVelocityY[106], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussionVelocityAlpha[106], PercussionNoteColor[106]); percussiongfx.display();}
//     if (PercussionPitchIsActive[107] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[107], PercussionVelocityY[107], Depth+SineDepth7 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[8],  OctaveBrightnesses[8],  PercussionVelocityAlpha[107], PercussionNoteColor[107]); percussiongfx.display();}
//     if (PercussionPitchIsActive[108] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[108], PercussionVelocityY[108], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussionVelocityAlpha[108], PercussionNoteColor[108]); percussiongfx.display();}
//     if (PercussionPitchIsActive[109] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[109], PercussionVelocityY[109], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussionVelocityAlpha[109], PercussionNoteColor[109]); percussiongfx.display();}
//     if (PercussionPitchIsActive[110] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[110], PercussionVelocityY[110], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussionVelocityAlpha[110], PercussionNoteColor[110]); percussiongfx.display();}
//     if (PercussionPitchIsActive[111] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[111], PercussionVelocityY[111], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussionVelocityAlpha[111], PercussionNoteColor[111]); percussiongfx.display();}
//     if (PercussionPitchIsActive[112] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[112], PercussionVelocityY[112], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussionVelocityAlpha[112], PercussionNoteColor[112]); percussiongfx.display();}
//     if (PercussionPitchIsActive[113] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[113], PercussionVelocityY[113], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussionVelocityAlpha[113], PercussionNoteColor[113]); percussiongfx.display();}
//     if (PercussionPitchIsActive[114] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[114], PercussionVelocityY[114], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussionVelocityAlpha[114], PercussionNoteColor[114]); percussiongfx.display();}
//     if (PercussionPitchIsActive[115] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[115], PercussionVelocityY[115], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussionVelocityAlpha[115], PercussionNoteColor[115]); percussiongfx.display();}
//     if (PercussionPitchIsActive[116] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[116], PercussionVelocityY[116], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[8], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussionVelocityAlpha[116], PercussionNoteColor[116]); percussiongfx.display();}
//     if (PercussionPitchIsActive[117] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[117], PercussionVelocityY[117], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[9], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussionVelocityAlpha[117], PercussionNoteColor[117]); percussiongfx.display();}
//     if (PercussionPitchIsActive[118] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[118], PercussionVelocityY[118], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[10], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussionVelocityAlpha[118], PercussionNoteColor[118]); percussiongfx.display();}
//     if (PercussionPitchIsActive[119] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[119], PercussionVelocityY[119], Depth+SineDepth8 , VelocityScaleY, VelocityScaleY, VelocityScaleY, PitchHues[11], OctaveSaturations[9],  OctaveBrightnesses[9],  PercussionVelocityAlpha[119], PercussionNoteColor[119]); percussiongfx.display();}
//     if (PercussionPitchIsActive[120] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[120], PercussionVelocityY[120], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[0], OctaveSaturations[10], OctaveBrightnesses[10], PercussionVelocityAlpha[120], PercussionNoteColor[120]); percussiongfx.display();}
//     if (PercussionPitchIsActive[121] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[121], PercussionVelocityY[121], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[1], OctaveSaturations[10], OctaveBrightnesses[10], PercussionVelocityAlpha[121], PercussionNoteColor[121]); percussiongfx.display();}
//     if (PercussionPitchIsActive[122] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[122], PercussionVelocityY[122], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[2], OctaveSaturations[10], OctaveBrightnesses[10], PercussionVelocityAlpha[122], PercussionNoteColor[122]); percussiongfx.display();}
//     if (PercussionPitchIsActive[123] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[123], PercussionVelocityY[123], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[3], OctaveSaturations[10], OctaveBrightnesses[10], PercussionVelocityAlpha[123], PercussionNoteColor[123]); percussiongfx.display();}
//     if (PercussionPitchIsActive[124] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[124], PercussionVelocityY[124], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[4], OctaveSaturations[10], OctaveBrightnesses[10], PercussionVelocityAlpha[124], PercussionNoteColor[124]); percussiongfx.display();}
//     if (PercussionPitchIsActive[125] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[125], PercussionVelocityY[125], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[5], OctaveSaturations[10], OctaveBrightnesses[10], PercussionVelocityAlpha[125], PercussionNoteColor[125]); percussiongfx.display();}
//     if (PercussionPitchIsActive[126] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[126], PercussionVelocityY[126], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[6], OctaveSaturations[10], OctaveBrightnesses[10], PercussionVelocityAlpha[126], PercussionNoteColor[126]); percussiongfx.display();}
//     if (PercussionPitchIsActive[127] == true) {percussiongfx = new PercussionGFX (PercussionPitchX[127], PercussionVelocityY[127], Depth+SineDepth9 , VelocityScaleY, VelocityScaleY, VelocityScaleY,  PitchHues[7], OctaveSaturations[10], OctaveBrightnesses[10], PercussionVelocityAlpha[127], PercussionNoteColor[127]); percussiongfx.display();}
//   }
// }

void PianoChannelNoteOn(){//Piano channel
  if (Channel ==   0) {
    ChannelIsActive[0] = true;
    if (Pitch == 0  ) {PianoPitchIsActive[0]   = true; PianoPitchX[0]   = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[0]   = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[0]   = Velocity*2;}
    if (Pitch == 1  ) {PianoPitchIsActive[1]   = true; PianoPitchX[1]   = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[1]   = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[1]   = Velocity*2;}
    if (Pitch == 2  ) {PianoPitchIsActive[2]   = true; PianoPitchX[2]   = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[2]   = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[2]   = Velocity*2;}
    if (Pitch == 3  ) {PianoPitchIsActive[3]   = true; PianoPitchX[3]   = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[3]   = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[3]   = Velocity*2;}
    if (Pitch == 4  ) {PianoPitchIsActive[4]   = true; PianoPitchX[4]   = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[4]   = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[4]   = Velocity*2;}
    if (Pitch == 5  ) {PianoPitchIsActive[5]   = true; PianoPitchX[5]   = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[5]   = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[5]   = Velocity*2;}
    if (Pitch == 6  ) {PianoPitchIsActive[6]   = true; PianoPitchX[6]   = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[6]   = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[6]   = Velocity*2;}
    if (Pitch == 7  ) {PianoPitchIsActive[7]   = true; PianoPitchX[7]   = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[7]   = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[7]   = Velocity*2;}
    if (Pitch == 8  ) {PianoPitchIsActive[8]   = true; PianoPitchX[8]   = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[8]   = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[8]   = Velocity*2;}
    if (Pitch == 9  ) {PianoPitchIsActive[9]   = true; PianoPitchX[9]   = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[9]   = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[9]   = Velocity*2;}
    if (Pitch == 10 ) {PianoPitchIsActive[10]  = true; PianoPitchX[10]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[10]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[10]  = Velocity*2;}
    if (Pitch == 11 ) {PianoPitchIsActive[11]  = true; PianoPitchX[11]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[11]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[11]  = Velocity*2;}
    if (Pitch == 12 ) {PianoPitchIsActive[12]  = true; PianoPitchX[12]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[12]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[12]  = Velocity*2;}
    if (Pitch == 13 ) {PianoPitchIsActive[13]  = true; PianoPitchX[13]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[13]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[13]  = Velocity*2;}
    if (Pitch == 14 ) {PianoPitchIsActive[14]  = true; PianoPitchX[14]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[14]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[14]  = Velocity*2;}
    if (Pitch == 15 ) {PianoPitchIsActive[15]  = true; PianoPitchX[15]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[15]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[15]  = Velocity*2;}
    if (Pitch == 16 ) {PianoPitchIsActive[16]  = true; PianoPitchX[16]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[16]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[16]  = Velocity*2;}
    if (Pitch == 17 ) {PianoPitchIsActive[17]  = true; PianoPitchX[17]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[17]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[17]  = Velocity*2;}
    if (Pitch == 18 ) {PianoPitchIsActive[18]  = true; PianoPitchX[18]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[18]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[18]  = Velocity*2;}
    if (Pitch == 19 ) {PianoPitchIsActive[19]  = true; PianoPitchX[19]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[19]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[19]  = Velocity*2;}
    if (Pitch == 20 ) {PianoPitchIsActive[20]  = true; PianoPitchX[20]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[20]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[20]  = Velocity*2;}
    if (Pitch == 21 ) {PianoPitchIsActive[21]  = true; PianoPitchX[21]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[21]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[21]  = Velocity*2;}
    if (Pitch == 22 ) {PianoPitchIsActive[22]  = true; PianoPitchX[22]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[22]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[22]  = Velocity*2;}
    if (Pitch == 23 ) {PianoPitchIsActive[23]  = true; PianoPitchX[23]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[23]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[23]  = Velocity*2;}
    if (Pitch == 24 ) {PianoPitchIsActive[24]  = true; PianoPitchX[24]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[24]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[24]  = Velocity*2;}
    if (Pitch == 25 ) {PianoPitchIsActive[25]  = true; PianoPitchX[25]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[25]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[25]  = Velocity*2;}
    if (Pitch == 26 ) {PianoPitchIsActive[26]  = true; PianoPitchX[26]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[26]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[26]  = Velocity*2;}
    if (Pitch == 27 ) {PianoPitchIsActive[27]  = true; PianoPitchX[27]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[27]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[27]  = Velocity*2;}
    if (Pitch == 28 ) {PianoPitchIsActive[28]  = true; PianoPitchX[28]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[28]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[28]  = Velocity*2;}
    if (Pitch == 29 ) {PianoPitchIsActive[29]  = true; PianoPitchX[29]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[29]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[29]  = Velocity*2;}
    if (Pitch == 30 ) {PianoPitchIsActive[30]  = true; PianoPitchX[30]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[30]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[30]  = Velocity*2;}
    if (Pitch == 31 ) {PianoPitchIsActive[31]  = true; PianoPitchX[31]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[31]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[31]  = Velocity*2;}
    if (Pitch == 32 ) {PianoPitchIsActive[32]  = true; PianoPitchX[32]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[32]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[32]  = Velocity*2;}
    if (Pitch == 33 ) {PianoPitchIsActive[33]  = true; PianoPitchX[33]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[33]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[33]  = Velocity*2;}
    if (Pitch == 34 ) {PianoPitchIsActive[34]  = true; PianoPitchX[34]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[34]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[34]  = Velocity*2;}
    if (Pitch == 35 ) {PianoPitchIsActive[35]  = true; PianoPitchX[35]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[35]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[35]  = Velocity*2;}
    if (Pitch == 36 ) {PianoPitchIsActive[36]  = true; PianoPitchX[36]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[36]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[36]  = Velocity*2;}
    if (Pitch == 37 ) {PianoPitchIsActive[37]  = true; PianoPitchX[37]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[37]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[37]  = Velocity*2;}
    if (Pitch == 38 ) {PianoPitchIsActive[38]  = true; PianoPitchX[38]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[38]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[38]  = Velocity*2;}
    if (Pitch == 39 ) {PianoPitchIsActive[39]  = true; PianoPitchX[39]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[39]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[39]  = Velocity*2;}
    if (Pitch == 40 ) {PianoPitchIsActive[40]  = true; PianoPitchX[40]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[40]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[40]  = Velocity*2;}
    if (Pitch == 41 ) {PianoPitchIsActive[41]  = true; PianoPitchX[41]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[41]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[41]  = Velocity*2;}
    if (Pitch == 42 ) {PianoPitchIsActive[42]  = true; PianoPitchX[42]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[42]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[42]  = Velocity*2;}
    if (Pitch == 43 ) {PianoPitchIsActive[43]  = true; PianoPitchX[43]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[43]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[43]  = Velocity*2;}
    if (Pitch == 44 ) {PianoPitchIsActive[44]  = true; PianoPitchX[44]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[44]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[44]  = Velocity*2;}
    if (Pitch == 45 ) {PianoPitchIsActive[45]  = true; PianoPitchX[45]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[45]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[45]  = Velocity*2;}
    if (Pitch == 46 ) {PianoPitchIsActive[46]  = true; PianoPitchX[46]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[46]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[46]  = Velocity*2;}
    if (Pitch == 47 ) {PianoPitchIsActive[47]  = true; PianoPitchX[47]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[47]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[47]  = Velocity*2;}
    if (Pitch == 48 ) {PianoPitchIsActive[48]  = true; PianoPitchX[48]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[48]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[48]  = Velocity*2;}
    if (Pitch == 49 ) {PianoPitchIsActive[49]  = true; PianoPitchX[49]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[49]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[49]  = Velocity*2;}
    if (Pitch == 50 ) {PianoPitchIsActive[50]  = true; PianoPitchX[50]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[50]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[50]  = Velocity*2;}
    if (Pitch == 51 ) {PianoPitchIsActive[51]  = true; PianoPitchX[51]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[51]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[51]  = Velocity*2;}
    if (Pitch == 52 ) {PianoPitchIsActive[52]  = true; PianoPitchX[52]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[52]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[52]  = Velocity*2;}
    if (Pitch == 53 ) {PianoPitchIsActive[53]  = true; PianoPitchX[53]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[53]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[53]  = Velocity*2;}
    if (Pitch == 54 ) {PianoPitchIsActive[54]  = true; PianoPitchX[54]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[54]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[54]  = Velocity*2;}
    if (Pitch == 55 ) {PianoPitchIsActive[55]  = true; PianoPitchX[55]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[55]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[55]  = Velocity*2;}
    if (Pitch == 56 ) {PianoPitchIsActive[56]  = true; PianoPitchX[56]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[56]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[56]  = Velocity*2;}
    if (Pitch == 57 ) {PianoPitchIsActive[57]  = true; PianoPitchX[57]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[57]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[57]  = Velocity*2;}
    if (Pitch == 58 ) {PianoPitchIsActive[58]  = true; PianoPitchX[58]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[58]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[58]  = Velocity*2;}
    if (Pitch == 59 ) {PianoPitchIsActive[59]  = true; PianoPitchX[59]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[59]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[59]  = Velocity*2;}
    if (Pitch == 60 ) {PianoPitchIsActive[60]  = true; PianoPitchX[60]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[60]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[60]  = Velocity*2;}
    if (Pitch == 61 ) {PianoPitchIsActive[61]  = true; PianoPitchX[61]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[61]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[61]  = Velocity*2;}
    if (Pitch == 62 ) {PianoPitchIsActive[62]  = true; PianoPitchX[62]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[62]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[62]  = Velocity*2;}
    if (Pitch == 63 ) {PianoPitchIsActive[63]  = true; PianoPitchX[63]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[63]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[63]  = Velocity*2;}
    if (Pitch == 64 ) {PianoPitchIsActive[64]  = true; PianoPitchX[64]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[64]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[64]  = Velocity*2;}
    if (Pitch == 65 ) {PianoPitchIsActive[65]  = true; PianoPitchX[65]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[65]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[65]  = Velocity*2;}
    if (Pitch == 66 ) {PianoPitchIsActive[66]  = true; PianoPitchX[66]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[66]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[66]  = Velocity*2;}
    if (Pitch == 67 ) {PianoPitchIsActive[67]  = true; PianoPitchX[67]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[67]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[67]  = Velocity*2;}
    if (Pitch == 68 ) {PianoPitchIsActive[68]  = true; PianoPitchX[68]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[68]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[68]  = Velocity*2;}
    if (Pitch == 69 ) {PianoPitchIsActive[69]  = true; PianoPitchX[69]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[69]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[69]  = Velocity*2;}
    if (Pitch == 70 ) {PianoPitchIsActive[70]  = true; PianoPitchX[70]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[70]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[70]  = Velocity*2;}
    if (Pitch == 71 ) {PianoPitchIsActive[71]  = true; PianoPitchX[71]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[71]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[71]  = Velocity*2;}
    if (Pitch == 72 ) {PianoPitchIsActive[72]  = true; PianoPitchX[72]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[72]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[72]  = Velocity*2;}
    if (Pitch == 73 ) {PianoPitchIsActive[73]  = true; PianoPitchX[73]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[73]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[73]  = Velocity*2;}
    if (Pitch == 74 ) {PianoPitchIsActive[74]  = true; PianoPitchX[74]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[74]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[74]  = Velocity*2;}
    if (Pitch == 75 ) {PianoPitchIsActive[75]  = true; PianoPitchX[75]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[75]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[75]  = Velocity*2;}
    if (Pitch == 76 ) {PianoPitchIsActive[76]  = true; PianoPitchX[76]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[76]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[76]  = Velocity*2;}
    if (Pitch == 77 ) {PianoPitchIsActive[77]  = true; PianoPitchX[77]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[77]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[77]  = Velocity*2;}
    if (Pitch == 78 ) {PianoPitchIsActive[78]  = true; PianoPitchX[78]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[78]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[78]  = Velocity*2;}
    if (Pitch == 79 ) {PianoPitchIsActive[79]  = true; PianoPitchX[79]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[79]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[79]  = Velocity*2;}
    if (Pitch == 80 ) {PianoPitchIsActive[80]  = true; PianoPitchX[80]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[80]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[80]  = Velocity*2;}
    if (Pitch == 81 ) {PianoPitchIsActive[81]  = true; PianoPitchX[81]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[81]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[81]  = Velocity*2;}
    if (Pitch == 82 ) {PianoPitchIsActive[82]  = true; PianoPitchX[82]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[82]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[82]  = Velocity*2;}
    if (Pitch == 83 ) {PianoPitchIsActive[83]  = true; PianoPitchX[83]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[83]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[83]  = Velocity*2;}
    if (Pitch == 84 ) {PianoPitchIsActive[84]  = true; PianoPitchX[84]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[84]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[84]  = Velocity*2;}
    if (Pitch == 85 ) {PianoPitchIsActive[85]  = true; PianoPitchX[85]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[85]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[85]  = Velocity*2;}
    if (Pitch == 86 ) {PianoPitchIsActive[86]  = true; PianoPitchX[86]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[86]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[86]  = Velocity*2;}
    if (Pitch == 87 ) {PianoPitchIsActive[87]  = true; PianoPitchX[87]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[87]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[87]  = Velocity*2;}
    if (Pitch == 88 ) {PianoPitchIsActive[88]  = true; PianoPitchX[88]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[88]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[88]  = Velocity*2;}
    if (Pitch == 89 ) {PianoPitchIsActive[89]  = true; PianoPitchX[89]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[89]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[89]  = Velocity*2;}
    if (Pitch == 90 ) {PianoPitchIsActive[90]  = true; PianoPitchX[90]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[90]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[90]  = Velocity*2;}
    if (Pitch == 91 ) {PianoPitchIsActive[91]  = true; PianoPitchX[91]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[91]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[91]  = Velocity*2;}
    if (Pitch == 92 ) {PianoPitchIsActive[92]  = true; PianoPitchX[92]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[92]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[92]  = Velocity*2;}
    if (Pitch == 93 ) {PianoPitchIsActive[93]  = true; PianoPitchX[93]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[93]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[93]  = Velocity*2;}
    if (Pitch == 94 ) {PianoPitchIsActive[94]  = true; PianoPitchX[94]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[94]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[94]  = Velocity*2;}
    if (Pitch == 95 ) {PianoPitchIsActive[95]  = true; PianoPitchX[95]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[95]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[95]  = Velocity*2;}
    if (Pitch == 96 ) {PianoPitchIsActive[96]  = true; PianoPitchX[96]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[96]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[96]  = Velocity*2;}
    if (Pitch == 97 ) {PianoPitchIsActive[97]  = true; PianoPitchX[97]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[97]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[97]  = Velocity*2;}
    if (Pitch == 98 ) {PianoPitchIsActive[98]  = true; PianoPitchX[98]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[98]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[98]  = Velocity*2;}
    if (Pitch == 99 ) {PianoPitchIsActive[99]  = true; PianoPitchX[99]  = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[99]  = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[99]  = Velocity*2;}
    if (Pitch == 100) {PianoPitchIsActive[100] = true; PianoPitchX[100] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[100] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[100] = Velocity*2;}
    if (Pitch == 101) {PianoPitchIsActive[101] = true; PianoPitchX[101] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[101] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[101] = Velocity*2;}
    if (Pitch == 102) {PianoPitchIsActive[102] = true; PianoPitchX[102] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[102] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[102] = Velocity*2;}
    if (Pitch == 103) {PianoPitchIsActive[103] = true; PianoPitchX[103] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[103] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[103] = Velocity*2;}
    if (Pitch == 104) {PianoPitchIsActive[104] = true; PianoPitchX[104] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[104] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[104] = Velocity*2;}
    if (Pitch == 105) {PianoPitchIsActive[105] = true; PianoPitchX[105] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[105] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[105] = Velocity*2;}
    if (Pitch == 106) {PianoPitchIsActive[106] = true; PianoPitchX[106] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[106] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[106] = Velocity*2;}
    if (Pitch == 107) {PianoPitchIsActive[107] = true; PianoPitchX[107] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[107] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[107] = Velocity*2;}
    if (Pitch == 108) {PianoPitchIsActive[108] = true; PianoPitchX[108] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[108] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[108] = Velocity*2;}
    if (Pitch == 109) {PianoPitchIsActive[109] = true; PianoPitchX[109] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[109] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[109] = Velocity*2;}
    if (Pitch == 110) {PianoPitchIsActive[110] = true; PianoPitchX[110] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[110] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[110] = Velocity*2;}
    if (Pitch == 111) {PianoPitchIsActive[111] = true; PianoPitchX[111] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[111] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[111] = Velocity*2;}
    if (Pitch == 112) {PianoPitchIsActive[112] = true; PianoPitchX[112] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[112] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[112] = Velocity*2;}
    if (Pitch == 113) {PianoPitchIsActive[113] = true; PianoPitchX[113] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[113] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[113] = Velocity*2;}
    if (Pitch == 114) {PianoPitchIsActive[114] = true; PianoPitchX[114] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[114] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[114] = Velocity*2;}
    if (Pitch == 115) {PianoPitchIsActive[115] = true; PianoPitchX[115] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[115] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[115] = Velocity*2;}
    if (Pitch == 116) {PianoPitchIsActive[116] = true; PianoPitchX[116] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[116] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[116] = Velocity*2;}
    if (Pitch == 117) {PianoPitchIsActive[117] = true; PianoPitchX[117] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[117] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[117] = Velocity*2;}
    if (Pitch == 118) {PianoPitchIsActive[118] = true; PianoPitchX[118] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[118] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[118] = Velocity*2;}
    if (Pitch == 119) {PianoPitchIsActive[119] = true; PianoPitchX[119] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[119] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[119] = Velocity*2;}
    if (Pitch == 120) {PianoPitchIsActive[120] = true; PianoPitchX[120] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[120] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[120] = Velocity*2;}
    if (Pitch == 121) {PianoPitchIsActive[121] = true; PianoPitchX[121] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[121] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[121] = Velocity*2;}
    if (Pitch == 122) {PianoPitchIsActive[122] = true; PianoPitchX[122] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[122] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[122] = Velocity*2;}
    if (Pitch == 123) {PianoPitchIsActive[123] = true; PianoPitchX[123] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[123] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[123] = Velocity*2;}
    if (Pitch == 124) {PianoPitchIsActive[124] = true; PianoPitchX[124] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[124] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[124] = Velocity*2;}
    if (Pitch == 125) {PianoPitchIsActive[125] = true; PianoPitchX[125] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[125] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[125] = Velocity*2;}
    if (Pitch == 126) {PianoPitchIsActive[126] = true; PianoPitchX[126] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[126] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[126] = Velocity*2;}
    if (Pitch == 127) {PianoPitchIsActive[127] = true; PianoPitchX[127] = map(Pitch, 0, 127, -width, width*2); PianoVelocityY[127] = map(Velocity, 0, 127, height, 0);  PianoVelocityAlpha[127] = Velocity*2;}
  }
}

  void ChromaticPercussionChannelNoteOn(){//Chromatic Percussion channel
  if (Channel ==   1) {
    ChannelIsActive[1] = true;
    if (Pitch == 0  ) {ChromaticPercussionPitchIsActive[0]   = true; ChromaticPercussionPitchX[0]   = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[0]   = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[0]   = Velocity*2;}
    if (Pitch == 1  ) {ChromaticPercussionPitchIsActive[1]   = true; ChromaticPercussionPitchX[1]   = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[1]   = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[1]   = Velocity*2;}
    if (Pitch == 2  ) {ChromaticPercussionPitchIsActive[2]   = true; ChromaticPercussionPitchX[2]   = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[2]   = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[2]   = Velocity*2;}
    if (Pitch == 3  ) {ChromaticPercussionPitchIsActive[3]   = true; ChromaticPercussionPitchX[3]   = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[3]   = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[3]   = Velocity*2;}
    if (Pitch == 4  ) {ChromaticPercussionPitchIsActive[4]   = true; ChromaticPercussionPitchX[4]   = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[4]   = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[4]   = Velocity*2;}
    if (Pitch == 5  ) {ChromaticPercussionPitchIsActive[5]   = true; ChromaticPercussionPitchX[5]   = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[5]   = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[5]   = Velocity*2;}
    if (Pitch == 6  ) {ChromaticPercussionPitchIsActive[6]   = true; ChromaticPercussionPitchX[6]   = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[6]   = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[6]   = Velocity*2;}
    if (Pitch == 7  ) {ChromaticPercussionPitchIsActive[7]   = true; ChromaticPercussionPitchX[7]   = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[7]   = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[7]   = Velocity*2;}
    if (Pitch == 8  ) {ChromaticPercussionPitchIsActive[8]   = true; ChromaticPercussionPitchX[8]   = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[8]   = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[8]   = Velocity*2;}
    if (Pitch == 9  ) {ChromaticPercussionPitchIsActive[9]   = true; ChromaticPercussionPitchX[9]   = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[9]   = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[9]   = Velocity*2;}
    if (Pitch == 10 ) {ChromaticPercussionPitchIsActive[10]  = true; ChromaticPercussionPitchX[10]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[10]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[10]  = Velocity*2;}
    if (Pitch == 11 ) {ChromaticPercussionPitchIsActive[11]  = true; ChromaticPercussionPitchX[11]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[11]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[11]  = Velocity*2;}
    if (Pitch == 12 ) {ChromaticPercussionPitchIsActive[12]  = true; ChromaticPercussionPitchX[12]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[12]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[12]  = Velocity*2;}
    if (Pitch == 13 ) {ChromaticPercussionPitchIsActive[13]  = true; ChromaticPercussionPitchX[13]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[13]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[13]  = Velocity*2;}
    if (Pitch == 14 ) {ChromaticPercussionPitchIsActive[14]  = true; ChromaticPercussionPitchX[14]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[14]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[14]  = Velocity*2;}
    if (Pitch == 15 ) {ChromaticPercussionPitchIsActive[15]  = true; ChromaticPercussionPitchX[15]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[15]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[15]  = Velocity*2;}
    if (Pitch == 16 ) {ChromaticPercussionPitchIsActive[16]  = true; ChromaticPercussionPitchX[16]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[16]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[16]  = Velocity*2;}
    if (Pitch == 17 ) {ChromaticPercussionPitchIsActive[17]  = true; ChromaticPercussionPitchX[17]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[17]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[17]  = Velocity*2;}
    if (Pitch == 18 ) {ChromaticPercussionPitchIsActive[18]  = true; ChromaticPercussionPitchX[18]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[18]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[18]  = Velocity*2;}
    if (Pitch == 19 ) {ChromaticPercussionPitchIsActive[19]  = true; ChromaticPercussionPitchX[19]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[19]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[19]  = Velocity*2;}
    if (Pitch == 20 ) {ChromaticPercussionPitchIsActive[20]  = true; ChromaticPercussionPitchX[20]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[20]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[20]  = Velocity*2;}
    if (Pitch == 21 ) {ChromaticPercussionPitchIsActive[21]  = true; ChromaticPercussionPitchX[21]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[21]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[21]  = Velocity*2;}
    if (Pitch == 22 ) {ChromaticPercussionPitchIsActive[22]  = true; ChromaticPercussionPitchX[22]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[22]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[22]  = Velocity*2;}
    if (Pitch == 23 ) {ChromaticPercussionPitchIsActive[23]  = true; ChromaticPercussionPitchX[23]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[23]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[23]  = Velocity*2;}
    if (Pitch == 24 ) {ChromaticPercussionPitchIsActive[24]  = true; ChromaticPercussionPitchX[24]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[24]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[24]  = Velocity*2;}
    if (Pitch == 25 ) {ChromaticPercussionPitchIsActive[25]  = true; ChromaticPercussionPitchX[25]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[25]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[25]  = Velocity*2;}
    if (Pitch == 26 ) {ChromaticPercussionPitchIsActive[26]  = true; ChromaticPercussionPitchX[26]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[26]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[26]  = Velocity*2;}
    if (Pitch == 27 ) {ChromaticPercussionPitchIsActive[27]  = true; ChromaticPercussionPitchX[27]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[27]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[27]  = Velocity*2;}
    if (Pitch == 28 ) {ChromaticPercussionPitchIsActive[28]  = true; ChromaticPercussionPitchX[28]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[28]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[28]  = Velocity*2;}
    if (Pitch == 29 ) {ChromaticPercussionPitchIsActive[29]  = true; ChromaticPercussionPitchX[29]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[29]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[29]  = Velocity*2;}
    if (Pitch == 30 ) {ChromaticPercussionPitchIsActive[30]  = true; ChromaticPercussionPitchX[30]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[30]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[30]  = Velocity*2;}
    if (Pitch == 31 ) {ChromaticPercussionPitchIsActive[31]  = true; ChromaticPercussionPitchX[31]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[31]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[31]  = Velocity*2;}
    if (Pitch == 32 ) {ChromaticPercussionPitchIsActive[32]  = true; ChromaticPercussionPitchX[32]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[32]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[32]  = Velocity*2;}
    if (Pitch == 33 ) {ChromaticPercussionPitchIsActive[33]  = true; ChromaticPercussionPitchX[33]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[33]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[33]  = Velocity*2;}
    if (Pitch == 34 ) {ChromaticPercussionPitchIsActive[34]  = true; ChromaticPercussionPitchX[34]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[34]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[34]  = Velocity*2;}
    if (Pitch == 35 ) {ChromaticPercussionPitchIsActive[35]  = true; ChromaticPercussionPitchX[35]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[35]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[35]  = Velocity*2;}
    if (Pitch == 36 ) {ChromaticPercussionPitchIsActive[36]  = true; ChromaticPercussionPitchX[36]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[36]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[36]  = Velocity*2;}
    if (Pitch == 37 ) {ChromaticPercussionPitchIsActive[37]  = true; ChromaticPercussionPitchX[37]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[37]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[37]  = Velocity*2;}
    if (Pitch == 38 ) {ChromaticPercussionPitchIsActive[38]  = true; ChromaticPercussionPitchX[38]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[38]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[38]  = Velocity*2;}
    if (Pitch == 39 ) {ChromaticPercussionPitchIsActive[39]  = true; ChromaticPercussionPitchX[39]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[39]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[39]  = Velocity*2;}
    if (Pitch == 40 ) {ChromaticPercussionPitchIsActive[40]  = true; ChromaticPercussionPitchX[40]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[40]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[40]  = Velocity*2;}
    if (Pitch == 41 ) {ChromaticPercussionPitchIsActive[41]  = true; ChromaticPercussionPitchX[41]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[41]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[41]  = Velocity*2;}
    if (Pitch == 42 ) {ChromaticPercussionPitchIsActive[42]  = true; ChromaticPercussionPitchX[42]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[42]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[42]  = Velocity*2;}
    if (Pitch == 43 ) {ChromaticPercussionPitchIsActive[43]  = true; ChromaticPercussionPitchX[43]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[43]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[43]  = Velocity*2;}
    if (Pitch == 44 ) {ChromaticPercussionPitchIsActive[44]  = true; ChromaticPercussionPitchX[44]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[44]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[44]  = Velocity*2;}
    if (Pitch == 45 ) {ChromaticPercussionPitchIsActive[45]  = true; ChromaticPercussionPitchX[45]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[45]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[45]  = Velocity*2;}
    if (Pitch == 46 ) {ChromaticPercussionPitchIsActive[46]  = true; ChromaticPercussionPitchX[46]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[46]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[46]  = Velocity*2;}
    if (Pitch == 47 ) {ChromaticPercussionPitchIsActive[47]  = true; ChromaticPercussionPitchX[47]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[47]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[47]  = Velocity*2;}
    if (Pitch == 48 ) {ChromaticPercussionPitchIsActive[48]  = true; ChromaticPercussionPitchX[48]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[48]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[48]  = Velocity*2;}
    if (Pitch == 49 ) {ChromaticPercussionPitchIsActive[49]  = true; ChromaticPercussionPitchX[49]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[49]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[49]  = Velocity*2;}
    if (Pitch == 50 ) {ChromaticPercussionPitchIsActive[50]  = true; ChromaticPercussionPitchX[50]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[50]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[50]  = Velocity*2;}
    if (Pitch == 51 ) {ChromaticPercussionPitchIsActive[51]  = true; ChromaticPercussionPitchX[51]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[51]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[51]  = Velocity*2;}
    if (Pitch == 52 ) {ChromaticPercussionPitchIsActive[52]  = true; ChromaticPercussionPitchX[52]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[52]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[52]  = Velocity*2;}
    if (Pitch == 53 ) {ChromaticPercussionPitchIsActive[53]  = true; ChromaticPercussionPitchX[53]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[53]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[53]  = Velocity*2;}
    if (Pitch == 54 ) {ChromaticPercussionPitchIsActive[54]  = true; ChromaticPercussionPitchX[54]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[54]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[54]  = Velocity*2;}
    if (Pitch == 55 ) {ChromaticPercussionPitchIsActive[55]  = true; ChromaticPercussionPitchX[55]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[55]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[55]  = Velocity*2;}
    if (Pitch == 56 ) {ChromaticPercussionPitchIsActive[56]  = true; ChromaticPercussionPitchX[56]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[56]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[56]  = Velocity*2;}
    if (Pitch == 57 ) {ChromaticPercussionPitchIsActive[57]  = true; ChromaticPercussionPitchX[57]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[57]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[57]  = Velocity*2;}
    if (Pitch == 58 ) {ChromaticPercussionPitchIsActive[58]  = true; ChromaticPercussionPitchX[58]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[58]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[58]  = Velocity*2;}
    if (Pitch == 59 ) {ChromaticPercussionPitchIsActive[59]  = true; ChromaticPercussionPitchX[59]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[59]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[59]  = Velocity*2;}
    if (Pitch == 60 ) {ChromaticPercussionPitchIsActive[60]  = true; ChromaticPercussionPitchX[60]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[60]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[60]  = Velocity*2;}
    if (Pitch == 61 ) {ChromaticPercussionPitchIsActive[61]  = true; ChromaticPercussionPitchX[61]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[61]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[61]  = Velocity*2;}
    if (Pitch == 62 ) {ChromaticPercussionPitchIsActive[62]  = true; ChromaticPercussionPitchX[62]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[62]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[62]  = Velocity*2;}
    if (Pitch == 63 ) {ChromaticPercussionPitchIsActive[63]  = true; ChromaticPercussionPitchX[63]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[63]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[63]  = Velocity*2;}
    if (Pitch == 64 ) {ChromaticPercussionPitchIsActive[64]  = true; ChromaticPercussionPitchX[64]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[64]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[64]  = Velocity*2;}
    if (Pitch == 65 ) {ChromaticPercussionPitchIsActive[65]  = true; ChromaticPercussionPitchX[65]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[65]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[65]  = Velocity*2;}
    if (Pitch == 66 ) {ChromaticPercussionPitchIsActive[66]  = true; ChromaticPercussionPitchX[66]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[66]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[66]  = Velocity*2;}
    if (Pitch == 67 ) {ChromaticPercussionPitchIsActive[67]  = true; ChromaticPercussionPitchX[67]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[67]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[67]  = Velocity*2;}
    if (Pitch == 68 ) {ChromaticPercussionPitchIsActive[68]  = true; ChromaticPercussionPitchX[68]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[68]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[68]  = Velocity*2;}
    if (Pitch == 69 ) {ChromaticPercussionPitchIsActive[69]  = true; ChromaticPercussionPitchX[69]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[69]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[69]  = Velocity*2;}
    if (Pitch == 70 ) {ChromaticPercussionPitchIsActive[70]  = true; ChromaticPercussionPitchX[70]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[70]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[70]  = Velocity*2;}
    if (Pitch == 71 ) {ChromaticPercussionPitchIsActive[71]  = true; ChromaticPercussionPitchX[71]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[71]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[71]  = Velocity*2;}
    if (Pitch == 72 ) {ChromaticPercussionPitchIsActive[72]  = true; ChromaticPercussionPitchX[72]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[72]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[72]  = Velocity*2;}
    if (Pitch == 73 ) {ChromaticPercussionPitchIsActive[73]  = true; ChromaticPercussionPitchX[73]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[73]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[73]  = Velocity*2;}
    if (Pitch == 74 ) {ChromaticPercussionPitchIsActive[74]  = true; ChromaticPercussionPitchX[74]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[74]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[74]  = Velocity*2;}
    if (Pitch == 75 ) {ChromaticPercussionPitchIsActive[75]  = true; ChromaticPercussionPitchX[75]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[75]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[75]  = Velocity*2;}
    if (Pitch == 76 ) {ChromaticPercussionPitchIsActive[76]  = true; ChromaticPercussionPitchX[76]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[76]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[76]  = Velocity*2;}
    if (Pitch == 77 ) {ChromaticPercussionPitchIsActive[77]  = true; ChromaticPercussionPitchX[77]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[77]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[77]  = Velocity*2;}
    if (Pitch == 78 ) {ChromaticPercussionPitchIsActive[78]  = true; ChromaticPercussionPitchX[78]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[78]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[78]  = Velocity*2;}
    if (Pitch == 79 ) {ChromaticPercussionPitchIsActive[79]  = true; ChromaticPercussionPitchX[79]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[79]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[79]  = Velocity*2;}
    if (Pitch == 80 ) {ChromaticPercussionPitchIsActive[80]  = true; ChromaticPercussionPitchX[80]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[80]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[80]  = Velocity*2;}
    if (Pitch == 81 ) {ChromaticPercussionPitchIsActive[81]  = true; ChromaticPercussionPitchX[81]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[81]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[81]  = Velocity*2;}
    if (Pitch == 82 ) {ChromaticPercussionPitchIsActive[82]  = true; ChromaticPercussionPitchX[82]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[82]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[82]  = Velocity*2;}
    if (Pitch == 83 ) {ChromaticPercussionPitchIsActive[83]  = true; ChromaticPercussionPitchX[83]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[83]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[83]  = Velocity*2;}
    if (Pitch == 84 ) {ChromaticPercussionPitchIsActive[84]  = true; ChromaticPercussionPitchX[84]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[84]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[84]  = Velocity*2;}
    if (Pitch == 85 ) {ChromaticPercussionPitchIsActive[85]  = true; ChromaticPercussionPitchX[85]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[85]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[85]  = Velocity*2;}
    if (Pitch == 86 ) {ChromaticPercussionPitchIsActive[86]  = true; ChromaticPercussionPitchX[86]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[86]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[86]  = Velocity*2;}
    if (Pitch == 87 ) {ChromaticPercussionPitchIsActive[87]  = true; ChromaticPercussionPitchX[87]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[87]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[87]  = Velocity*2;}
    if (Pitch == 88 ) {ChromaticPercussionPitchIsActive[88]  = true; ChromaticPercussionPitchX[88]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[88]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[88]  = Velocity*2;}
    if (Pitch == 89 ) {ChromaticPercussionPitchIsActive[89]  = true; ChromaticPercussionPitchX[89]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[89]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[89]  = Velocity*2;}
    if (Pitch == 90 ) {ChromaticPercussionPitchIsActive[90]  = true; ChromaticPercussionPitchX[90]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[90]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[90]  = Velocity*2;}
    if (Pitch == 91 ) {ChromaticPercussionPitchIsActive[91]  = true; ChromaticPercussionPitchX[91]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[91]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[91]  = Velocity*2;}
    if (Pitch == 92 ) {ChromaticPercussionPitchIsActive[92]  = true; ChromaticPercussionPitchX[92]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[92]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[92]  = Velocity*2;}
    if (Pitch == 93 ) {ChromaticPercussionPitchIsActive[93]  = true; ChromaticPercussionPitchX[93]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[93]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[93]  = Velocity*2;}
    if (Pitch == 94 ) {ChromaticPercussionPitchIsActive[94]  = true; ChromaticPercussionPitchX[94]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[94]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[94]  = Velocity*2;}
    if (Pitch == 95 ) {ChromaticPercussionPitchIsActive[95]  = true; ChromaticPercussionPitchX[95]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[95]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[95]  = Velocity*2;}
    if (Pitch == 96 ) {ChromaticPercussionPitchIsActive[96]  = true; ChromaticPercussionPitchX[96]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[96]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[96]  = Velocity*2;}
    if (Pitch == 97 ) {ChromaticPercussionPitchIsActive[97]  = true; ChromaticPercussionPitchX[97]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[97]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[97]  = Velocity*2;}
    if (Pitch == 98 ) {ChromaticPercussionPitchIsActive[98]  = true; ChromaticPercussionPitchX[98]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[98]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[98]  = Velocity*2;}
    if (Pitch == 99 ) {ChromaticPercussionPitchIsActive[99]  = true; ChromaticPercussionPitchX[99]  = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[99]  = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[99]  = Velocity*2;}
    if (Pitch == 100) {ChromaticPercussionPitchIsActive[100] = true; ChromaticPercussionPitchX[100] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[100] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[100] = Velocity*2;}
    if (Pitch == 101) {ChromaticPercussionPitchIsActive[101] = true; ChromaticPercussionPitchX[101] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[101] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[101] = Velocity*2;}
    if (Pitch == 102) {ChromaticPercussionPitchIsActive[102] = true; ChromaticPercussionPitchX[102] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[102] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[102] = Velocity*2;}
    if (Pitch == 103) {ChromaticPercussionPitchIsActive[103] = true; ChromaticPercussionPitchX[103] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[103] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[103] = Velocity*2;}
    if (Pitch == 104) {ChromaticPercussionPitchIsActive[104] = true; ChromaticPercussionPitchX[104] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[104] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[104] = Velocity*2;}
    if (Pitch == 105) {ChromaticPercussionPitchIsActive[105] = true; ChromaticPercussionPitchX[105] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[105] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[105] = Velocity*2;}
    if (Pitch == 106) {ChromaticPercussionPitchIsActive[106] = true; ChromaticPercussionPitchX[106] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[106] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[106] = Velocity*2;}
    if (Pitch == 107) {ChromaticPercussionPitchIsActive[107] = true; ChromaticPercussionPitchX[107] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[107] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[107] = Velocity*2;}
    if (Pitch == 108) {ChromaticPercussionPitchIsActive[108] = true; ChromaticPercussionPitchX[108] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[108] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[108] = Velocity*2;}
    if (Pitch == 109) {ChromaticPercussionPitchIsActive[109] = true; ChromaticPercussionPitchX[109] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[109] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[109] = Velocity*2;}
    if (Pitch == 110) {ChromaticPercussionPitchIsActive[110] = true; ChromaticPercussionPitchX[110] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[110] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[110] = Velocity*2;}
    if (Pitch == 111) {ChromaticPercussionPitchIsActive[111] = true; ChromaticPercussionPitchX[111] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[111] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[111] = Velocity*2;}
    if (Pitch == 112) {ChromaticPercussionPitchIsActive[112] = true; ChromaticPercussionPitchX[112] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[112] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[112] = Velocity*2;}
    if (Pitch == 113) {ChromaticPercussionPitchIsActive[113] = true; ChromaticPercussionPitchX[113] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[113] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[113] = Velocity*2;}
    if (Pitch == 114) {ChromaticPercussionPitchIsActive[114] = true; ChromaticPercussionPitchX[114] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[114] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[114] = Velocity*2;}
    if (Pitch == 115) {ChromaticPercussionPitchIsActive[115] = true; ChromaticPercussionPitchX[115] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[115] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[115] = Velocity*2;}
    if (Pitch == 116) {ChromaticPercussionPitchIsActive[116] = true; ChromaticPercussionPitchX[116] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[116] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[116] = Velocity*2;}
    if (Pitch == 117) {ChromaticPercussionPitchIsActive[117] = true; ChromaticPercussionPitchX[117] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[117] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[117] = Velocity*2;}
    if (Pitch == 118) {ChromaticPercussionPitchIsActive[118] = true; ChromaticPercussionPitchX[118] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[118] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[118] = Velocity*2;}
    if (Pitch == 119) {ChromaticPercussionPitchIsActive[119] = true; ChromaticPercussionPitchX[119] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[119] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[119] = Velocity*2;}
    if (Pitch == 120) {ChromaticPercussionPitchIsActive[120] = true; ChromaticPercussionPitchX[120] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[120] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[120] = Velocity*2;}
    if (Pitch == 121) {ChromaticPercussionPitchIsActive[121] = true; ChromaticPercussionPitchX[121] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[121] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[121] = Velocity*2;}
    if (Pitch == 122) {ChromaticPercussionPitchIsActive[122] = true; ChromaticPercussionPitchX[122] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[122] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[122] = Velocity*2;}
    if (Pitch == 123) {ChromaticPercussionPitchIsActive[123] = true; ChromaticPercussionPitchX[123] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[123] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[123] = Velocity*2;}
    if (Pitch == 124) {ChromaticPercussionPitchIsActive[124] = true; ChromaticPercussionPitchX[124] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[124] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[124] = Velocity*2;}
    if (Pitch == 125) {ChromaticPercussionPitchIsActive[125] = true; ChromaticPercussionPitchX[125] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[125] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[125] = Velocity*2;}
    if (Pitch == 126) {ChromaticPercussionPitchIsActive[126] = true; ChromaticPercussionPitchX[126] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[126] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[126] = Velocity*2;}
    if (Pitch == 127) {ChromaticPercussionPitchIsActive[127] = true; ChromaticPercussionPitchX[127] = map(Pitch, 0, 127, -width, width*2); ChromaticPercussionVelocityY[127] = map(Velocity, 0, 127, height, 0);  ChromaticPercussionVelocityAlpha[127] = Velocity*2;}
  }
}

  void OrganChannelNoteOn(){//Organ channel
  if (Channel ==   2) {
    ChannelIsActive[2] = true;
    if (Pitch == 0  ) {OrganPitchIsActive[0]   = true; OrganPitchX[0]   = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[0]   = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[0]   = Velocity*2;}
    if (Pitch == 1  ) {OrganPitchIsActive[1]   = true; OrganPitchX[1]   = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[1]   = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[1]   = Velocity*2;}
    if (Pitch == 2  ) {OrganPitchIsActive[2]   = true; OrganPitchX[2]   = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[2]   = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[2]   = Velocity*2;}
    if (Pitch == 3  ) {OrganPitchIsActive[3]   = true; OrganPitchX[3]   = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[3]   = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[3]   = Velocity*2;}
    if (Pitch == 4  ) {OrganPitchIsActive[4]   = true; OrganPitchX[4]   = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[4]   = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[4]   = Velocity*2;}
    if (Pitch == 5  ) {OrganPitchIsActive[5]   = true; OrganPitchX[5]   = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[5]   = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[5]   = Velocity*2;}
    if (Pitch == 6  ) {OrganPitchIsActive[6]   = true; OrganPitchX[6]   = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[6]   = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[6]   = Velocity*2;}
    if (Pitch == 7  ) {OrganPitchIsActive[7]   = true; OrganPitchX[7]   = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[7]   = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[7]   = Velocity*2;}
    if (Pitch == 8  ) {OrganPitchIsActive[8]   = true; OrganPitchX[8]   = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[8]   = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[8]   = Velocity*2;}
    if (Pitch == 9  ) {OrganPitchIsActive[9]   = true; OrganPitchX[9]   = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[9]   = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[9]   = Velocity*2;}
    if (Pitch == 10 ) {OrganPitchIsActive[10]  = true; OrganPitchX[10]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[10]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[10]  = Velocity*2;}
    if (Pitch == 11 ) {OrganPitchIsActive[11]  = true; OrganPitchX[11]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[11]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[11]  = Velocity*2;}
    if (Pitch == 12 ) {OrganPitchIsActive[12]  = true; OrganPitchX[12]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[12]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[12]  = Velocity*2;}
    if (Pitch == 13 ) {OrganPitchIsActive[13]  = true; OrganPitchX[13]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[13]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[13]  = Velocity*2;}
    if (Pitch == 14 ) {OrganPitchIsActive[14]  = true; OrganPitchX[14]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[14]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[14]  = Velocity*2;}
    if (Pitch == 15 ) {OrganPitchIsActive[15]  = true; OrganPitchX[15]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[15]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[15]  = Velocity*2;}
    if (Pitch == 16 ) {OrganPitchIsActive[16]  = true; OrganPitchX[16]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[16]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[16]  = Velocity*2;}
    if (Pitch == 17 ) {OrganPitchIsActive[17]  = true; OrganPitchX[17]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[17]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[17]  = Velocity*2;}
    if (Pitch == 18 ) {OrganPitchIsActive[18]  = true; OrganPitchX[18]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[18]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[18]  = Velocity*2;}
    if (Pitch == 19 ) {OrganPitchIsActive[19]  = true; OrganPitchX[19]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[19]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[19]  = Velocity*2;}
    if (Pitch == 20 ) {OrganPitchIsActive[20]  = true; OrganPitchX[20]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[20]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[20]  = Velocity*2;}
    if (Pitch == 21 ) {OrganPitchIsActive[21]  = true; OrganPitchX[21]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[21]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[21]  = Velocity*2;}
    if (Pitch == 22 ) {OrganPitchIsActive[22]  = true; OrganPitchX[22]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[22]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[22]  = Velocity*2;}
    if (Pitch == 23 ) {OrganPitchIsActive[23]  = true; OrganPitchX[23]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[23]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[23]  = Velocity*2;}
    if (Pitch == 24 ) {OrganPitchIsActive[24]  = true; OrganPitchX[24]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[24]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[24]  = Velocity*2;}
    if (Pitch == 25 ) {OrganPitchIsActive[25]  = true; OrganPitchX[25]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[25]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[25]  = Velocity*2;}
    if (Pitch == 26 ) {OrganPitchIsActive[26]  = true; OrganPitchX[26]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[26]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[26]  = Velocity*2;}
    if (Pitch == 27 ) {OrganPitchIsActive[27]  = true; OrganPitchX[27]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[27]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[27]  = Velocity*2;}
    if (Pitch == 28 ) {OrganPitchIsActive[28]  = true; OrganPitchX[28]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[28]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[28]  = Velocity*2;}
    if (Pitch == 29 ) {OrganPitchIsActive[29]  = true; OrganPitchX[29]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[29]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[29]  = Velocity*2;}
    if (Pitch == 30 ) {OrganPitchIsActive[30]  = true; OrganPitchX[30]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[30]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[30]  = Velocity*2;}
    if (Pitch == 31 ) {OrganPitchIsActive[31]  = true; OrganPitchX[31]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[31]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[31]  = Velocity*2;}
    if (Pitch == 32 ) {OrganPitchIsActive[32]  = true; OrganPitchX[32]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[32]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[32]  = Velocity*2;}
    if (Pitch == 33 ) {OrganPitchIsActive[33]  = true; OrganPitchX[33]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[33]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[33]  = Velocity*2;}
    if (Pitch == 34 ) {OrganPitchIsActive[34]  = true; OrganPitchX[34]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[34]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[34]  = Velocity*2;}
    if (Pitch == 35 ) {OrganPitchIsActive[35]  = true; OrganPitchX[35]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[35]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[35]  = Velocity*2;}
    if (Pitch == 36 ) {OrganPitchIsActive[36]  = true; OrganPitchX[36]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[36]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[36]  = Velocity*2;}
    if (Pitch == 37 ) {OrganPitchIsActive[37]  = true; OrganPitchX[37]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[37]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[37]  = Velocity*2;}
    if (Pitch == 38 ) {OrganPitchIsActive[38]  = true; OrganPitchX[38]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[38]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[38]  = Velocity*2;}
    if (Pitch == 39 ) {OrganPitchIsActive[39]  = true; OrganPitchX[39]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[39]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[39]  = Velocity*2;}
    if (Pitch == 40 ) {OrganPitchIsActive[40]  = true; OrganPitchX[40]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[40]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[40]  = Velocity*2;}
    if (Pitch == 41 ) {OrganPitchIsActive[41]  = true; OrganPitchX[41]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[41]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[41]  = Velocity*2;}
    if (Pitch == 42 ) {OrganPitchIsActive[42]  = true; OrganPitchX[42]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[42]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[42]  = Velocity*2;}
    if (Pitch == 43 ) {OrganPitchIsActive[43]  = true; OrganPitchX[43]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[43]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[43]  = Velocity*2;}
    if (Pitch == 44 ) {OrganPitchIsActive[44]  = true; OrganPitchX[44]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[44]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[44]  = Velocity*2;}
    if (Pitch == 45 ) {OrganPitchIsActive[45]  = true; OrganPitchX[45]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[45]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[45]  = Velocity*2;}
    if (Pitch == 46 ) {OrganPitchIsActive[46]  = true; OrganPitchX[46]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[46]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[46]  = Velocity*2;}
    if (Pitch == 47 ) {OrganPitchIsActive[47]  = true; OrganPitchX[47]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[47]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[47]  = Velocity*2;}
    if (Pitch == 48 ) {OrganPitchIsActive[48]  = true; OrganPitchX[48]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[48]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[48]  = Velocity*2;}
    if (Pitch == 49 ) {OrganPitchIsActive[49]  = true; OrganPitchX[49]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[49]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[49]  = Velocity*2;}
    if (Pitch == 50 ) {OrganPitchIsActive[50]  = true; OrganPitchX[50]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[50]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[50]  = Velocity*2;}
    if (Pitch == 51 ) {OrganPitchIsActive[51]  = true; OrganPitchX[51]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[51]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[51]  = Velocity*2;}
    if (Pitch == 52 ) {OrganPitchIsActive[52]  = true; OrganPitchX[52]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[52]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[52]  = Velocity*2;}
    if (Pitch == 53 ) {OrganPitchIsActive[53]  = true; OrganPitchX[53]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[53]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[53]  = Velocity*2;}
    if (Pitch == 54 ) {OrganPitchIsActive[54]  = true; OrganPitchX[54]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[54]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[54]  = Velocity*2;}
    if (Pitch == 55 ) {OrganPitchIsActive[55]  = true; OrganPitchX[55]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[55]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[55]  = Velocity*2;}
    if (Pitch == 56 ) {OrganPitchIsActive[56]  = true; OrganPitchX[56]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[56]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[56]  = Velocity*2;}
    if (Pitch == 57 ) {OrganPitchIsActive[57]  = true; OrganPitchX[57]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[57]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[57]  = Velocity*2;}
    if (Pitch == 58 ) {OrganPitchIsActive[58]  = true; OrganPitchX[58]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[58]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[58]  = Velocity*2;}
    if (Pitch == 59 ) {OrganPitchIsActive[59]  = true; OrganPitchX[59]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[59]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[59]  = Velocity*2;}
    if (Pitch == 60 ) {OrganPitchIsActive[60]  = true; OrganPitchX[60]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[60]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[60]  = Velocity*2;}
    if (Pitch == 61 ) {OrganPitchIsActive[61]  = true; OrganPitchX[61]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[61]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[61]  = Velocity*2;}
    if (Pitch == 62 ) {OrganPitchIsActive[62]  = true; OrganPitchX[62]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[62]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[62]  = Velocity*2;}
    if (Pitch == 63 ) {OrganPitchIsActive[63]  = true; OrganPitchX[63]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[63]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[63]  = Velocity*2;}
    if (Pitch == 64 ) {OrganPitchIsActive[64]  = true; OrganPitchX[64]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[64]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[64]  = Velocity*2;}
    if (Pitch == 65 ) {OrganPitchIsActive[65]  = true; OrganPitchX[65]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[65]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[65]  = Velocity*2;}
    if (Pitch == 66 ) {OrganPitchIsActive[66]  = true; OrganPitchX[66]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[66]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[66]  = Velocity*2;}
    if (Pitch == 67 ) {OrganPitchIsActive[67]  = true; OrganPitchX[67]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[67]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[67]  = Velocity*2;}
    if (Pitch == 68 ) {OrganPitchIsActive[68]  = true; OrganPitchX[68]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[68]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[68]  = Velocity*2;}
    if (Pitch == 69 ) {OrganPitchIsActive[69]  = true; OrganPitchX[69]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[69]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[69]  = Velocity*2;}
    if (Pitch == 70 ) {OrganPitchIsActive[70]  = true; OrganPitchX[70]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[70]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[70]  = Velocity*2;}
    if (Pitch == 71 ) {OrganPitchIsActive[71]  = true; OrganPitchX[71]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[71]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[71]  = Velocity*2;}
    if (Pitch == 72 ) {OrganPitchIsActive[72]  = true; OrganPitchX[72]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[72]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[72]  = Velocity*2;}
    if (Pitch == 73 ) {OrganPitchIsActive[73]  = true; OrganPitchX[73]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[73]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[73]  = Velocity*2;}
    if (Pitch == 74 ) {OrganPitchIsActive[74]  = true; OrganPitchX[74]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[74]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[74]  = Velocity*2;}
    if (Pitch == 75 ) {OrganPitchIsActive[75]  = true; OrganPitchX[75]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[75]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[75]  = Velocity*2;}
    if (Pitch == 76 ) {OrganPitchIsActive[76]  = true; OrganPitchX[76]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[76]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[76]  = Velocity*2;}
    if (Pitch == 77 ) {OrganPitchIsActive[77]  = true; OrganPitchX[77]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[77]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[77]  = Velocity*2;}
    if (Pitch == 78 ) {OrganPitchIsActive[78]  = true; OrganPitchX[78]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[78]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[78]  = Velocity*2;}
    if (Pitch == 79 ) {OrganPitchIsActive[79]  = true; OrganPitchX[79]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[79]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[79]  = Velocity*2;}
    if (Pitch == 80 ) {OrganPitchIsActive[80]  = true; OrganPitchX[80]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[80]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[80]  = Velocity*2;}
    if (Pitch == 81 ) {OrganPitchIsActive[81]  = true; OrganPitchX[81]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[81]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[81]  = Velocity*2;}
    if (Pitch == 82 ) {OrganPitchIsActive[82]  = true; OrganPitchX[82]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[82]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[82]  = Velocity*2;}
    if (Pitch == 83 ) {OrganPitchIsActive[83]  = true; OrganPitchX[83]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[83]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[83]  = Velocity*2;}
    if (Pitch == 84 ) {OrganPitchIsActive[84]  = true; OrganPitchX[84]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[84]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[84]  = Velocity*2;}
    if (Pitch == 85 ) {OrganPitchIsActive[85]  = true; OrganPitchX[85]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[85]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[85]  = Velocity*2;}
    if (Pitch == 86 ) {OrganPitchIsActive[86]  = true; OrganPitchX[86]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[86]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[86]  = Velocity*2;}
    if (Pitch == 87 ) {OrganPitchIsActive[87]  = true; OrganPitchX[87]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[87]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[87]  = Velocity*2;}
    if (Pitch == 88 ) {OrganPitchIsActive[88]  = true; OrganPitchX[88]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[88]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[88]  = Velocity*2;}
    if (Pitch == 89 ) {OrganPitchIsActive[89]  = true; OrganPitchX[89]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[89]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[89]  = Velocity*2;}
    if (Pitch == 90 ) {OrganPitchIsActive[90]  = true; OrganPitchX[90]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[90]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[90]  = Velocity*2;}
    if (Pitch == 91 ) {OrganPitchIsActive[91]  = true; OrganPitchX[91]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[91]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[91]  = Velocity*2;}
    if (Pitch == 92 ) {OrganPitchIsActive[92]  = true; OrganPitchX[92]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[92]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[92]  = Velocity*2;}
    if (Pitch == 93 ) {OrganPitchIsActive[93]  = true; OrganPitchX[93]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[93]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[93]  = Velocity*2;}
    if (Pitch == 94 ) {OrganPitchIsActive[94]  = true; OrganPitchX[94]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[94]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[94]  = Velocity*2;}
    if (Pitch == 95 ) {OrganPitchIsActive[95]  = true; OrganPitchX[95]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[95]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[95]  = Velocity*2;}
    if (Pitch == 96 ) {OrganPitchIsActive[96]  = true; OrganPitchX[96]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[96]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[96]  = Velocity*2;}
    if (Pitch == 97 ) {OrganPitchIsActive[97]  = true; OrganPitchX[97]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[97]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[97]  = Velocity*2;}
    if (Pitch == 98 ) {OrganPitchIsActive[98]  = true; OrganPitchX[98]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[98]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[98]  = Velocity*2;}
    if (Pitch == 99 ) {OrganPitchIsActive[99]  = true; OrganPitchX[99]  = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[99]  = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[99]  = Velocity*2;}
    if (Pitch == 100) {OrganPitchIsActive[100] = true; OrganPitchX[100] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[100] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[100] = Velocity*2;}
    if (Pitch == 101) {OrganPitchIsActive[101] = true; OrganPitchX[101] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[101] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[101] = Velocity*2;}
    if (Pitch == 102) {OrganPitchIsActive[102] = true; OrganPitchX[102] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[102] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[102] = Velocity*2;}
    if (Pitch == 103) {OrganPitchIsActive[103] = true; OrganPitchX[103] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[103] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[103] = Velocity*2;}
    if (Pitch == 104) {OrganPitchIsActive[104] = true; OrganPitchX[104] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[104] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[104] = Velocity*2;}
    if (Pitch == 105) {OrganPitchIsActive[105] = true; OrganPitchX[105] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[105] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[105] = Velocity*2;}
    if (Pitch == 106) {OrganPitchIsActive[106] = true; OrganPitchX[106] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[106] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[106] = Velocity*2;}
    if (Pitch == 107) {OrganPitchIsActive[107] = true; OrganPitchX[107] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[107] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[107] = Velocity*2;}
    if (Pitch == 108) {OrganPitchIsActive[108] = true; OrganPitchX[108] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[108] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[108] = Velocity*2;}
    if (Pitch == 109) {OrganPitchIsActive[109] = true; OrganPitchX[109] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[109] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[109] = Velocity*2;}
    if (Pitch == 110) {OrganPitchIsActive[110] = true; OrganPitchX[110] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[110] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[110] = Velocity*2;}
    if (Pitch == 111) {OrganPitchIsActive[111] = true; OrganPitchX[111] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[111] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[111] = Velocity*2;}
    if (Pitch == 112) {OrganPitchIsActive[112] = true; OrganPitchX[112] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[112] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[112] = Velocity*2;}
    if (Pitch == 113) {OrganPitchIsActive[113] = true; OrganPitchX[113] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[113] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[113] = Velocity*2;}
    if (Pitch == 114) {OrganPitchIsActive[114] = true; OrganPitchX[114] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[114] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[114] = Velocity*2;}
    if (Pitch == 115) {OrganPitchIsActive[115] = true; OrganPitchX[115] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[115] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[115] = Velocity*2;}
    if (Pitch == 116) {OrganPitchIsActive[116] = true; OrganPitchX[116] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[116] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[116] = Velocity*2;}
    if (Pitch == 117) {OrganPitchIsActive[117] = true; OrganPitchX[117] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[117] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[117] = Velocity*2;}
    if (Pitch == 118) {OrganPitchIsActive[118] = true; OrganPitchX[118] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[118] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[118] = Velocity*2;}
    if (Pitch == 119) {OrganPitchIsActive[119] = true; OrganPitchX[119] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[119] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[119] = Velocity*2;}
    if (Pitch == 120) {OrganPitchIsActive[120] = true; OrganPitchX[120] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[120] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[120] = Velocity*2;}
    if (Pitch == 121) {OrganPitchIsActive[121] = true; OrganPitchX[121] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[121] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[121] = Velocity*2;}
    if (Pitch == 122) {OrganPitchIsActive[122] = true; OrganPitchX[122] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[122] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[122] = Velocity*2;}
    if (Pitch == 123) {OrganPitchIsActive[123] = true; OrganPitchX[123] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[123] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[123] = Velocity*2;}
    if (Pitch == 124) {OrganPitchIsActive[124] = true; OrganPitchX[124] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[124] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[124] = Velocity*2;}
    if (Pitch == 125) {OrganPitchIsActive[125] = true; OrganPitchX[125] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[125] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[125] = Velocity*2;}
    if (Pitch == 126) {OrganPitchIsActive[126] = true; OrganPitchX[126] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[126] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[126] = Velocity*2;}
    if (Pitch == 127) {OrganPitchIsActive[127] = true; OrganPitchX[127] = map(Pitch, 0, 127, -width, width*2); OrganVelocityY[127] = map(Velocity, 0, 127, height, 0);  OrganVelocityAlpha[127] = Velocity*2;}
  }
}

//   void GuitarChannelNoteOn(){//Guitar channel
//   if (Channel ==   3) {
//     ChannelIsActive[3] = true;
//     if (Pitch == 0  ) {GuitarPitchIsActive[0]   = true; GuitarPitchX[0]   = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[0]   = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {GuitarPitchIsActive[1]   = true; GuitarPitchX[1]   = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[1]   = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {GuitarPitchIsActive[2]   = true; GuitarPitchX[2]   = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[2]   = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {GuitarPitchIsActive[3]   = true; GuitarPitchX[3]   = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[3]   = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {GuitarPitchIsActive[4]   = true; GuitarPitchX[4]   = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[4]   = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {GuitarPitchIsActive[5]   = true; GuitarPitchX[5]   = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[5]   = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {GuitarPitchIsActive[6]   = true; GuitarPitchX[6]   = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[6]   = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {GuitarPitchIsActive[7]   = true; GuitarPitchX[7]   = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[7]   = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {GuitarPitchIsActive[8]   = true; GuitarPitchX[8]   = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[8]   = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {GuitarPitchIsActive[9]   = true; GuitarPitchX[9]   = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[9]   = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {GuitarPitchIsActive[10]  = true; GuitarPitchX[10]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[10]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {GuitarPitchIsActive[11]  = true; GuitarPitchX[11]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[11]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {GuitarPitchIsActive[12]  = true; GuitarPitchX[12]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[12]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {GuitarPitchIsActive[13]  = true; GuitarPitchX[13]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[13]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {GuitarPitchIsActive[14]  = true; GuitarPitchX[14]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[14]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {GuitarPitchIsActive[15]  = true; GuitarPitchX[15]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[15]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {GuitarPitchIsActive[16]  = true; GuitarPitchX[16]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[16]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {GuitarPitchIsActive[17]  = true; GuitarPitchX[17]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[17]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {GuitarPitchIsActive[18]  = true; GuitarPitchX[18]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[18]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {GuitarPitchIsActive[19]  = true; GuitarPitchX[19]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[19]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {GuitarPitchIsActive[20]  = true; GuitarPitchX[20]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[20]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {GuitarPitchIsActive[21]  = true; GuitarPitchX[21]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[21]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {GuitarPitchIsActive[22]  = true; GuitarPitchX[22]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[22]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {GuitarPitchIsActive[23]  = true; GuitarPitchX[23]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[23]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {GuitarPitchIsActive[24]  = true; GuitarPitchX[24]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[24]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {GuitarPitchIsActive[25]  = true; GuitarPitchX[25]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[25]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {GuitarPitchIsActive[26]  = true; GuitarPitchX[26]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[26]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {GuitarPitchIsActive[27]  = true; GuitarPitchX[27]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[27]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {GuitarPitchIsActive[28]  = true; GuitarPitchX[28]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[28]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {GuitarPitchIsActive[29]  = true; GuitarPitchX[29]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[29]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {GuitarPitchIsActive[30]  = true; GuitarPitchX[30]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[30]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {GuitarPitchIsActive[31]  = true; GuitarPitchX[31]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[31]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {GuitarPitchIsActive[32]  = true; GuitarPitchX[32]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[32]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {GuitarPitchIsActive[33]  = true; GuitarPitchX[33]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[33]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {GuitarPitchIsActive[34]  = true; GuitarPitchX[34]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[34]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {GuitarPitchIsActive[35]  = true; GuitarPitchX[35]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[35]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {GuitarPitchIsActive[36]  = true; GuitarPitchX[36]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[36]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {GuitarPitchIsActive[37]  = true; GuitarPitchX[37]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[37]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {GuitarPitchIsActive[38]  = true; GuitarPitchX[38]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[38]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {GuitarPitchIsActive[39]  = true; GuitarPitchX[39]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[39]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {GuitarPitchIsActive[40]  = true; GuitarPitchX[40]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[40]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {GuitarPitchIsActive[41]  = true; GuitarPitchX[41]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[41]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {GuitarPitchIsActive[42]  = true; GuitarPitchX[42]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[42]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {GuitarPitchIsActive[43]  = true; GuitarPitchX[43]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[43]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {GuitarPitchIsActive[44]  = true; GuitarPitchX[44]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[44]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {GuitarPitchIsActive[45]  = true; GuitarPitchX[45]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[45]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {GuitarPitchIsActive[46]  = true; GuitarPitchX[46]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[46]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {GuitarPitchIsActive[47]  = true; GuitarPitchX[47]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[47]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {GuitarPitchIsActive[48]  = true; GuitarPitchX[48]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[48]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {GuitarPitchIsActive[49]  = true; GuitarPitchX[49]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[49]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {GuitarPitchIsActive[50]  = true; GuitarPitchX[50]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[50]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {GuitarPitchIsActive[51]  = true; GuitarPitchX[51]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[51]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {GuitarPitchIsActive[52]  = true; GuitarPitchX[52]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[52]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {GuitarPitchIsActive[53]  = true; GuitarPitchX[53]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[53]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {GuitarPitchIsActive[54]  = true; GuitarPitchX[54]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[54]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {GuitarPitchIsActive[55]  = true; GuitarPitchX[55]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[55]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {GuitarPitchIsActive[56]  = true; GuitarPitchX[56]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[56]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {GuitarPitchIsActive[57]  = true; GuitarPitchX[57]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[57]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {GuitarPitchIsActive[58]  = true; GuitarPitchX[58]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[58]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {GuitarPitchIsActive[59]  = true; GuitarPitchX[59]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[59]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {GuitarPitchIsActive[60]  = true; GuitarPitchX[60]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[60]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {GuitarPitchIsActive[61]  = true; GuitarPitchX[61]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[61]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {GuitarPitchIsActive[62]  = true; GuitarPitchX[62]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[62]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {GuitarPitchIsActive[63]  = true; GuitarPitchX[63]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[63]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {GuitarPitchIsActive[64]  = true; GuitarPitchX[64]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[64]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {GuitarPitchIsActive[65]  = true; GuitarPitchX[65]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[65]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {GuitarPitchIsActive[66]  = true; GuitarPitchX[66]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[66]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {GuitarPitchIsActive[67]  = true; GuitarPitchX[67]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[67]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {GuitarPitchIsActive[68]  = true; GuitarPitchX[68]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[68]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {GuitarPitchIsActive[69]  = true; GuitarPitchX[69]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[69]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {GuitarPitchIsActive[70]  = true; GuitarPitchX[70]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[70]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {GuitarPitchIsActive[71]  = true; GuitarPitchX[71]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[71]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {GuitarPitchIsActive[72]  = true; GuitarPitchX[72]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[72]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {GuitarPitchIsActive[73]  = true; GuitarPitchX[73]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[73]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {GuitarPitchIsActive[74]  = true; GuitarPitchX[74]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[74]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {GuitarPitchIsActive[75]  = true; GuitarPitchX[75]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[75]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {GuitarPitchIsActive[76]  = true; GuitarPitchX[76]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[76]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {GuitarPitchIsActive[77]  = true; GuitarPitchX[77]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[77]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {GuitarPitchIsActive[78]  = true; GuitarPitchX[78]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[78]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {GuitarPitchIsActive[79]  = true; GuitarPitchX[79]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[79]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {GuitarPitchIsActive[80]  = true; GuitarPitchX[80]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[80]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {GuitarPitchIsActive[81]  = true; GuitarPitchX[81]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[81]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {GuitarPitchIsActive[82]  = true; GuitarPitchX[82]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[82]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {GuitarPitchIsActive[83]  = true; GuitarPitchX[83]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[83]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {GuitarPitchIsActive[84]  = true; GuitarPitchX[84]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[84]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {GuitarPitchIsActive[85]  = true; GuitarPitchX[85]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[85]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {GuitarPitchIsActive[86]  = true; GuitarPitchX[86]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[86]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {GuitarPitchIsActive[87]  = true; GuitarPitchX[87]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[87]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {GuitarPitchIsActive[88]  = true; GuitarPitchX[88]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[88]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {GuitarPitchIsActive[89]  = true; GuitarPitchX[89]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[89]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {GuitarPitchIsActive[90]  = true; GuitarPitchX[90]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[90]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {GuitarPitchIsActive[91]  = true; GuitarPitchX[91]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[91]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {GuitarPitchIsActive[92]  = true; GuitarPitchX[92]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[92]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {GuitarPitchIsActive[93]  = true; GuitarPitchX[93]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[93]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {GuitarPitchIsActive[94]  = true; GuitarPitchX[94]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[94]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {GuitarPitchIsActive[95]  = true; GuitarPitchX[95]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[95]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {GuitarPitchIsActive[96]  = true; GuitarPitchX[96]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[96]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {GuitarPitchIsActive[97]  = true; GuitarPitchX[97]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[97]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {GuitarPitchIsActive[98]  = true; GuitarPitchX[98]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[98]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {GuitarPitchIsActive[99]  = true; GuitarPitchX[99]  = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[99]  = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {GuitarPitchIsActive[100] = true; GuitarPitchX[100] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[100] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {GuitarPitchIsActive[101] = true; GuitarPitchX[101] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[101] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {GuitarPitchIsActive[102] = true; GuitarPitchX[102] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[102] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {GuitarPitchIsActive[103] = true; GuitarPitchX[103] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[103] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {GuitarPitchIsActive[104] = true; GuitarPitchX[104] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[104] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {GuitarPitchIsActive[105] = true; GuitarPitchX[105] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[105] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {GuitarPitchIsActive[106] = true; GuitarPitchX[106] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[106] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {GuitarPitchIsActive[107] = true; GuitarPitchX[107] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[107] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {GuitarPitchIsActive[108] = true; GuitarPitchX[108] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[108] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {GuitarPitchIsActive[109] = true; GuitarPitchX[109] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[109] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {GuitarPitchIsActive[110] = true; GuitarPitchX[110] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[110] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {GuitarPitchIsActive[111] = true; GuitarPitchX[111] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[111] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {GuitarPitchIsActive[112] = true; GuitarPitchX[112] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[112] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {GuitarPitchIsActive[113] = true; GuitarPitchX[113] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[113] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {GuitarPitchIsActive[114] = true; GuitarPitchX[114] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[114] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {GuitarPitchIsActive[115] = true; GuitarPitchX[115] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[115] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {GuitarPitchIsActive[116] = true; GuitarPitchX[116] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[116] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {GuitarPitchIsActive[117] = true; GuitarPitchX[117] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[117] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {GuitarPitchIsActive[118] = true; GuitarPitchX[118] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[118] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {GuitarPitchIsActive[119] = true; GuitarPitchX[119] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[119] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {GuitarPitchIsActive[120] = true; GuitarPitchX[120] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[120] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {GuitarPitchIsActive[121] = true; GuitarPitchX[121] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[121] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {GuitarPitchIsActive[122] = true; GuitarPitchX[122] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[122] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {GuitarPitchIsActive[123] = true; GuitarPitchX[123] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[123] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {GuitarPitchIsActive[124] = true; GuitarPitchX[124] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[124] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {GuitarPitchIsActive[125] = true; GuitarPitchX[125] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[125] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {GuitarPitchIsActive[126] = true; GuitarPitchX[126] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[126] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {GuitarPitchIsActive[127] = true; GuitarPitchX[127] = map(Pitch, 0, 127, -width, width*2); GuitarVelocityY[127] = map(Velocity, 0, 127, height, 0);  GuitarVelocityAlpha[127] = Velocity*2;}
//   }
// }

//   void BassChannelNoteOn(){//Bass channel
//   if (Channel ==   4) {
//     ChannelIsActive[4] = true;
//     if (Pitch == 0  ) {BassPitchIsActive[0]   = true; BassPitchX[0]   = map(Pitch, 0, 127, -width, width*2); BassVelocityY[0]   = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {BassPitchIsActive[1]   = true; BassPitchX[1]   = map(Pitch, 0, 127, -width, width*2); BassVelocityY[1]   = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {BassPitchIsActive[2]   = true; BassPitchX[2]   = map(Pitch, 0, 127, -width, width*2); BassVelocityY[2]   = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {BassPitchIsActive[3]   = true; BassPitchX[3]   = map(Pitch, 0, 127, -width, width*2); BassVelocityY[3]   = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {BassPitchIsActive[4]   = true; BassPitchX[4]   = map(Pitch, 0, 127, -width, width*2); BassVelocityY[4]   = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {BassPitchIsActive[5]   = true; BassPitchX[5]   = map(Pitch, 0, 127, -width, width*2); BassVelocityY[5]   = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {BassPitchIsActive[6]   = true; BassPitchX[6]   = map(Pitch, 0, 127, -width, width*2); BassVelocityY[6]   = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {BassPitchIsActive[7]   = true; BassPitchX[7]   = map(Pitch, 0, 127, -width, width*2); BassVelocityY[7]   = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {BassPitchIsActive[8]   = true; BassPitchX[8]   = map(Pitch, 0, 127, -width, width*2); BassVelocityY[8]   = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {BassPitchIsActive[9]   = true; BassPitchX[9]   = map(Pitch, 0, 127, -width, width*2); BassVelocityY[9]   = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {BassPitchIsActive[10]  = true; BassPitchX[10]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[10]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {BassPitchIsActive[11]  = true; BassPitchX[11]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[11]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {BassPitchIsActive[12]  = true; BassPitchX[12]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[12]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {BassPitchIsActive[13]  = true; BassPitchX[13]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[13]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {BassPitchIsActive[14]  = true; BassPitchX[14]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[14]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {BassPitchIsActive[15]  = true; BassPitchX[15]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[15]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {BassPitchIsActive[16]  = true; BassPitchX[16]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[16]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {BassPitchIsActive[17]  = true; BassPitchX[17]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[17]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {BassPitchIsActive[18]  = true; BassPitchX[18]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[18]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {BassPitchIsActive[19]  = true; BassPitchX[19]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[19]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {BassPitchIsActive[20]  = true; BassPitchX[20]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[20]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {BassPitchIsActive[21]  = true; BassPitchX[21]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[21]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {BassPitchIsActive[22]  = true; BassPitchX[22]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[22]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {BassPitchIsActive[23]  = true; BassPitchX[23]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[23]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {BassPitchIsActive[24]  = true; BassPitchX[24]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[24]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {BassPitchIsActive[25]  = true; BassPitchX[25]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[25]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {BassPitchIsActive[26]  = true; BassPitchX[26]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[26]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {BassPitchIsActive[27]  = true; BassPitchX[27]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[27]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {BassPitchIsActive[28]  = true; BassPitchX[28]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[28]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {BassPitchIsActive[29]  = true; BassPitchX[29]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[29]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {BassPitchIsActive[30]  = true; BassPitchX[30]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[30]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {BassPitchIsActive[31]  = true; BassPitchX[31]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[31]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {BassPitchIsActive[32]  = true; BassPitchX[32]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[32]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {BassPitchIsActive[33]  = true; BassPitchX[33]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[33]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {BassPitchIsActive[34]  = true; BassPitchX[34]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[34]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {BassPitchIsActive[35]  = true; BassPitchX[35]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[35]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {BassPitchIsActive[36]  = true; BassPitchX[36]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[36]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {BassPitchIsActive[37]  = true; BassPitchX[37]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[37]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {BassPitchIsActive[38]  = true; BassPitchX[38]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[38]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {BassPitchIsActive[39]  = true; BassPitchX[39]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[39]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {BassPitchIsActive[40]  = true; BassPitchX[40]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[40]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {BassPitchIsActive[41]  = true; BassPitchX[41]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[41]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {BassPitchIsActive[42]  = true; BassPitchX[42]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[42]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {BassPitchIsActive[43]  = true; BassPitchX[43]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[43]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {BassPitchIsActive[44]  = true; BassPitchX[44]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[44]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {BassPitchIsActive[45]  = true; BassPitchX[45]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[45]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {BassPitchIsActive[46]  = true; BassPitchX[46]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[46]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {BassPitchIsActive[47]  = true; BassPitchX[47]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[47]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {BassPitchIsActive[48]  = true; BassPitchX[48]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[48]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {BassPitchIsActive[49]  = true; BassPitchX[49]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[49]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {BassPitchIsActive[50]  = true; BassPitchX[50]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[50]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {BassPitchIsActive[51]  = true; BassPitchX[51]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[51]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {BassPitchIsActive[52]  = true; BassPitchX[52]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[52]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {BassPitchIsActive[53]  = true; BassPitchX[53]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[53]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {BassPitchIsActive[54]  = true; BassPitchX[54]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[54]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {BassPitchIsActive[55]  = true; BassPitchX[55]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[55]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {BassPitchIsActive[56]  = true; BassPitchX[56]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[56]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {BassPitchIsActive[57]  = true; BassPitchX[57]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[57]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {BassPitchIsActive[58]  = true; BassPitchX[58]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[58]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {BassPitchIsActive[59]  = true; BassPitchX[59]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[59]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {BassPitchIsActive[60]  = true; BassPitchX[60]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[60]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {BassPitchIsActive[61]  = true; BassPitchX[61]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[61]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {BassPitchIsActive[62]  = true; BassPitchX[62]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[62]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {BassPitchIsActive[63]  = true; BassPitchX[63]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[63]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {BassPitchIsActive[64]  = true; BassPitchX[64]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[64]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {BassPitchIsActive[65]  = true; BassPitchX[65]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[65]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {BassPitchIsActive[66]  = true; BassPitchX[66]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[66]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {BassPitchIsActive[67]  = true; BassPitchX[67]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[67]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {BassPitchIsActive[68]  = true; BassPitchX[68]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[68]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {BassPitchIsActive[69]  = true; BassPitchX[69]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[69]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {BassPitchIsActive[70]  = true; BassPitchX[70]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[70]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {BassPitchIsActive[71]  = true; BassPitchX[71]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[71]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {BassPitchIsActive[72]  = true; BassPitchX[72]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[72]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {BassPitchIsActive[73]  = true; BassPitchX[73]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[73]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {BassPitchIsActive[74]  = true; BassPitchX[74]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[74]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {BassPitchIsActive[75]  = true; BassPitchX[75]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[75]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {BassPitchIsActive[76]  = true; BassPitchX[76]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[76]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {BassPitchIsActive[77]  = true; BassPitchX[77]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[77]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {BassPitchIsActive[78]  = true; BassPitchX[78]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[78]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {BassPitchIsActive[79]  = true; BassPitchX[79]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[79]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {BassPitchIsActive[80]  = true; BassPitchX[80]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[80]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {BassPitchIsActive[81]  = true; BassPitchX[81]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[81]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {BassPitchIsActive[82]  = true; BassPitchX[82]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[82]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {BassPitchIsActive[83]  = true; BassPitchX[83]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[83]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {BassPitchIsActive[84]  = true; BassPitchX[84]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[84]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {BassPitchIsActive[85]  = true; BassPitchX[85]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[85]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {BassPitchIsActive[86]  = true; BassPitchX[86]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[86]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {BassPitchIsActive[87]  = true; BassPitchX[87]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[87]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {BassPitchIsActive[88]  = true; BassPitchX[88]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[88]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {BassPitchIsActive[89]  = true; BassPitchX[89]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[89]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {BassPitchIsActive[90]  = true; BassPitchX[90]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[90]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {BassPitchIsActive[91]  = true; BassPitchX[91]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[91]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {BassPitchIsActive[92]  = true; BassPitchX[92]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[92]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {BassPitchIsActive[93]  = true; BassPitchX[93]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[93]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {BassPitchIsActive[94]  = true; BassPitchX[94]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[94]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {BassPitchIsActive[95]  = true; BassPitchX[95]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[95]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {BassPitchIsActive[96]  = true; BassPitchX[96]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[96]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {BassPitchIsActive[97]  = true; BassPitchX[97]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[97]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {BassPitchIsActive[98]  = true; BassPitchX[98]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[98]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {BassPitchIsActive[99]  = true; BassPitchX[99]  = map(Pitch, 0, 127, -width, width*2); BassVelocityY[99]  = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {BassPitchIsActive[100] = true; BassPitchX[100] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[100] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {BassPitchIsActive[101] = true; BassPitchX[101] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[101] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {BassPitchIsActive[102] = true; BassPitchX[102] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[102] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {BassPitchIsActive[103] = true; BassPitchX[103] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[103] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {BassPitchIsActive[104] = true; BassPitchX[104] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[104] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {BassPitchIsActive[105] = true; BassPitchX[105] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[105] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {BassPitchIsActive[106] = true; BassPitchX[106] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[106] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {BassPitchIsActive[107] = true; BassPitchX[107] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[107] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {BassPitchIsActive[108] = true; BassPitchX[108] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[108] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {BassPitchIsActive[109] = true; BassPitchX[109] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[109] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {BassPitchIsActive[110] = true; BassPitchX[110] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[110] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {BassPitchIsActive[111] = true; BassPitchX[111] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[111] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {BassPitchIsActive[112] = true; BassPitchX[112] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[112] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {BassPitchIsActive[113] = true; BassPitchX[113] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[113] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {BassPitchIsActive[114] = true; BassPitchX[114] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[114] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {BassPitchIsActive[115] = true; BassPitchX[115] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[115] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {BassPitchIsActive[116] = true; BassPitchX[116] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[116] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {BassPitchIsActive[117] = true; BassPitchX[117] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[117] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {BassPitchIsActive[118] = true; BassPitchX[118] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[118] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {BassPitchIsActive[119] = true; BassPitchX[119] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[119] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {BassPitchIsActive[120] = true; BassPitchX[120] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[120] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {BassPitchIsActive[121] = true; BassPitchX[121] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[121] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {BassPitchIsActive[122] = true; BassPitchX[122] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[122] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {BassPitchIsActive[123] = true; BassPitchX[123] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[123] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {BassPitchIsActive[124] = true; BassPitchX[124] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[124] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {BassPitchIsActive[125] = true; BassPitchX[125] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[125] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {BassPitchIsActive[126] = true; BassPitchX[126] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[126] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {BassPitchIsActive[127] = true; BassPitchX[127] = map(Pitch, 0, 127, -width, width*2); BassVelocityY[127] = map(Velocity, 0, 127, height, 0);  BassVelocityAlpha[127] = Velocity*2;}
//   }
// }

//  void StringsChannelNoteOn(){//Strings channel
//   if (Channel ==   5) {
//     ChannelIsActive[5] = true;
//     if (Pitch == 0  ) {StringsPitchIsActive[0]   = true; StringsPitchX[0]   = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[0]   = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {StringsPitchIsActive[1]   = true; StringsPitchX[1]   = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[1]   = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {StringsPitchIsActive[2]   = true; StringsPitchX[2]   = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[2]   = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {StringsPitchIsActive[3]   = true; StringsPitchX[3]   = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[3]   = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {StringsPitchIsActive[4]   = true; StringsPitchX[4]   = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[4]   = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {StringsPitchIsActive[5]   = true; StringsPitchX[5]   = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[5]   = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {StringsPitchIsActive[6]   = true; StringsPitchX[6]   = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[6]   = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {StringsPitchIsActive[7]   = true; StringsPitchX[7]   = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[7]   = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {StringsPitchIsActive[8]   = true; StringsPitchX[8]   = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[8]   = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {StringsPitchIsActive[9]   = true; StringsPitchX[9]   = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[9]   = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {StringsPitchIsActive[10]  = true; StringsPitchX[10]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[10]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {StringsPitchIsActive[11]  = true; StringsPitchX[11]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[11]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {StringsPitchIsActive[12]  = true; StringsPitchX[12]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[12]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {StringsPitchIsActive[13]  = true; StringsPitchX[13]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[13]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {StringsPitchIsActive[14]  = true; StringsPitchX[14]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[14]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {StringsPitchIsActive[15]  = true; StringsPitchX[15]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[15]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {StringsPitchIsActive[16]  = true; StringsPitchX[16]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[16]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {StringsPitchIsActive[17]  = true; StringsPitchX[17]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[17]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {StringsPitchIsActive[18]  = true; StringsPitchX[18]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[18]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {StringsPitchIsActive[19]  = true; StringsPitchX[19]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[19]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {StringsPitchIsActive[20]  = true; StringsPitchX[20]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[20]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {StringsPitchIsActive[21]  = true; StringsPitchX[21]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[21]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {StringsPitchIsActive[22]  = true; StringsPitchX[22]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[22]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {StringsPitchIsActive[23]  = true; StringsPitchX[23]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[23]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {StringsPitchIsActive[24]  = true; StringsPitchX[24]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[24]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {StringsPitchIsActive[25]  = true; StringsPitchX[25]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[25]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {StringsPitchIsActive[26]  = true; StringsPitchX[26]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[26]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {StringsPitchIsActive[27]  = true; StringsPitchX[27]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[27]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {StringsPitchIsActive[28]  = true; StringsPitchX[28]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[28]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {StringsPitchIsActive[29]  = true; StringsPitchX[29]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[29]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {StringsPitchIsActive[30]  = true; StringsPitchX[30]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[30]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {StringsPitchIsActive[31]  = true; StringsPitchX[31]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[31]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {StringsPitchIsActive[32]  = true; StringsPitchX[32]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[32]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {StringsPitchIsActive[33]  = true; StringsPitchX[33]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[33]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {StringsPitchIsActive[34]  = true; StringsPitchX[34]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[34]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {StringsPitchIsActive[35]  = true; StringsPitchX[35]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[35]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {StringsPitchIsActive[36]  = true; StringsPitchX[36]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[36]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {StringsPitchIsActive[37]  = true; StringsPitchX[37]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[37]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {StringsPitchIsActive[38]  = true; StringsPitchX[38]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[38]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {StringsPitchIsActive[39]  = true; StringsPitchX[39]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[39]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {StringsPitchIsActive[40]  = true; StringsPitchX[40]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[40]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {StringsPitchIsActive[41]  = true; StringsPitchX[41]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[41]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {StringsPitchIsActive[42]  = true; StringsPitchX[42]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[42]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {StringsPitchIsActive[43]  = true; StringsPitchX[43]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[43]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {StringsPitchIsActive[44]  = true; StringsPitchX[44]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[44]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {StringsPitchIsActive[45]  = true; StringsPitchX[45]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[45]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {StringsPitchIsActive[46]  = true; StringsPitchX[46]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[46]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {StringsPitchIsActive[47]  = true; StringsPitchX[47]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[47]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {StringsPitchIsActive[48]  = true; StringsPitchX[48]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[48]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {StringsPitchIsActive[49]  = true; StringsPitchX[49]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[49]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {StringsPitchIsActive[50]  = true; StringsPitchX[50]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[50]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {StringsPitchIsActive[51]  = true; StringsPitchX[51]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[51]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {StringsPitchIsActive[52]  = true; StringsPitchX[52]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[52]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {StringsPitchIsActive[53]  = true; StringsPitchX[53]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[53]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {StringsPitchIsActive[54]  = true; StringsPitchX[54]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[54]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {StringsPitchIsActive[55]  = true; StringsPitchX[55]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[55]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {StringsPitchIsActive[56]  = true; StringsPitchX[56]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[56]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {StringsPitchIsActive[57]  = true; StringsPitchX[57]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[57]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {StringsPitchIsActive[58]  = true; StringsPitchX[58]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[58]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {StringsPitchIsActive[59]  = true; StringsPitchX[59]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[59]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {StringsPitchIsActive[60]  = true; StringsPitchX[60]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[60]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {StringsPitchIsActive[61]  = true; StringsPitchX[61]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[61]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {StringsPitchIsActive[62]  = true; StringsPitchX[62]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[62]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {StringsPitchIsActive[63]  = true; StringsPitchX[63]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[63]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {StringsPitchIsActive[64]  = true; StringsPitchX[64]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[64]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {StringsPitchIsActive[65]  = true; StringsPitchX[65]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[65]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {StringsPitchIsActive[66]  = true; StringsPitchX[66]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[66]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {StringsPitchIsActive[67]  = true; StringsPitchX[67]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[67]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {StringsPitchIsActive[68]  = true; StringsPitchX[68]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[68]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {StringsPitchIsActive[69]  = true; StringsPitchX[69]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[69]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {StringsPitchIsActive[70]  = true; StringsPitchX[70]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[70]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {StringsPitchIsActive[71]  = true; StringsPitchX[71]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[71]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {StringsPitchIsActive[72]  = true; StringsPitchX[72]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[72]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {StringsPitchIsActive[73]  = true; StringsPitchX[73]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[73]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {StringsPitchIsActive[74]  = true; StringsPitchX[74]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[74]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {StringsPitchIsActive[75]  = true; StringsPitchX[75]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[75]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {StringsPitchIsActive[76]  = true; StringsPitchX[76]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[76]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {StringsPitchIsActive[77]  = true; StringsPitchX[77]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[77]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {StringsPitchIsActive[78]  = true; StringsPitchX[78]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[78]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {StringsPitchIsActive[79]  = true; StringsPitchX[79]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[79]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {StringsPitchIsActive[80]  = true; StringsPitchX[80]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[80]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {StringsPitchIsActive[81]  = true; StringsPitchX[81]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[81]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {StringsPitchIsActive[82]  = true; StringsPitchX[82]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[82]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {StringsPitchIsActive[83]  = true; StringsPitchX[83]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[83]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {StringsPitchIsActive[84]  = true; StringsPitchX[84]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[84]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {StringsPitchIsActive[85]  = true; StringsPitchX[85]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[85]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {StringsPitchIsActive[86]  = true; StringsPitchX[86]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[86]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {StringsPitchIsActive[87]  = true; StringsPitchX[87]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[87]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {StringsPitchIsActive[88]  = true; StringsPitchX[88]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[88]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {StringsPitchIsActive[89]  = true; StringsPitchX[89]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[89]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {StringsPitchIsActive[90]  = true; StringsPitchX[90]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[90]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {StringsPitchIsActive[91]  = true; StringsPitchX[91]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[91]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {StringsPitchIsActive[92]  = true; StringsPitchX[92]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[92]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {StringsPitchIsActive[93]  = true; StringsPitchX[93]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[93]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {StringsPitchIsActive[94]  = true; StringsPitchX[94]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[94]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {StringsPitchIsActive[95]  = true; StringsPitchX[95]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[95]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {StringsPitchIsActive[96]  = true; StringsPitchX[96]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[96]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {StringsPitchIsActive[97]  = true; StringsPitchX[97]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[97]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {StringsPitchIsActive[98]  = true; StringsPitchX[98]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[98]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {StringsPitchIsActive[99]  = true; StringsPitchX[99]  = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[99]  = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {StringsPitchIsActive[100] = true; StringsPitchX[100] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[100] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {StringsPitchIsActive[101] = true; StringsPitchX[101] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[101] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {StringsPitchIsActive[102] = true; StringsPitchX[102] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[102] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {StringsPitchIsActive[103] = true; StringsPitchX[103] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[103] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {StringsPitchIsActive[104] = true; StringsPitchX[104] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[104] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {StringsPitchIsActive[105] = true; StringsPitchX[105] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[105] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {StringsPitchIsActive[106] = true; StringsPitchX[106] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[106] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {StringsPitchIsActive[107] = true; StringsPitchX[107] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[107] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {StringsPitchIsActive[108] = true; StringsPitchX[108] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[108] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {StringsPitchIsActive[109] = true; StringsPitchX[109] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[109] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {StringsPitchIsActive[110] = true; StringsPitchX[110] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[110] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {StringsPitchIsActive[111] = true; StringsPitchX[111] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[111] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {StringsPitchIsActive[112] = true; StringsPitchX[112] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[112] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {StringsPitchIsActive[113] = true; StringsPitchX[113] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[113] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {StringsPitchIsActive[114] = true; StringsPitchX[114] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[114] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {StringsPitchIsActive[115] = true; StringsPitchX[115] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[115] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {StringsPitchIsActive[116] = true; StringsPitchX[116] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[116] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {StringsPitchIsActive[117] = true; StringsPitchX[117] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[117] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {StringsPitchIsActive[118] = true; StringsPitchX[118] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[118] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {StringsPitchIsActive[119] = true; StringsPitchX[119] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[119] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {StringsPitchIsActive[120] = true; StringsPitchX[120] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[120] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {StringsPitchIsActive[121] = true; StringsPitchX[121] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[121] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {StringsPitchIsActive[122] = true; StringsPitchX[122] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[122] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {StringsPitchIsActive[123] = true; StringsPitchX[123] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[123] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {StringsPitchIsActive[124] = true; StringsPitchX[124] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[124] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {StringsPitchIsActive[125] = true; StringsPitchX[125] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[125] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {StringsPitchIsActive[126] = true; StringsPitchX[126] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[126] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {StringsPitchIsActive[127] = true; StringsPitchX[127] = map(Pitch, 0, 127, -width, width*2); StringsVelocityY[127] = map(Velocity, 0, 127, height, 0);  StringsVelocityAlpha[127] = Velocity*2;}
//   }
// }

//  void EnsembleChannelNoteOn(){//Ensemble channel
//   if (Channel ==   6) {
//     ChannelIsActive[6] = true;
//     if (Pitch == 0  ) {EnsemblePitchIsActive[0]   = true; EnsemblePitchX[0]   = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[0]   = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {EnsemblePitchIsActive[1]   = true; EnsemblePitchX[1]   = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[1]   = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {EnsemblePitchIsActive[2]   = true; EnsemblePitchX[2]   = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[2]   = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {EnsemblePitchIsActive[3]   = true; EnsemblePitchX[3]   = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[3]   = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {EnsemblePitchIsActive[4]   = true; EnsemblePitchX[4]   = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[4]   = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {EnsemblePitchIsActive[5]   = true; EnsemblePitchX[5]   = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[5]   = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {EnsemblePitchIsActive[6]   = true; EnsemblePitchX[6]   = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[6]   = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {EnsemblePitchIsActive[7]   = true; EnsemblePitchX[7]   = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[7]   = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {EnsemblePitchIsActive[8]   = true; EnsemblePitchX[8]   = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[8]   = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {EnsemblePitchIsActive[9]   = true; EnsemblePitchX[9]   = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[9]   = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {EnsemblePitchIsActive[10]  = true; EnsemblePitchX[10]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[10]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {EnsemblePitchIsActive[11]  = true; EnsemblePitchX[11]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[11]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {EnsemblePitchIsActive[12]  = true; EnsemblePitchX[12]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[12]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {EnsemblePitchIsActive[13]  = true; EnsemblePitchX[13]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[13]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {EnsemblePitchIsActive[14]  = true; EnsemblePitchX[14]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[14]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {EnsemblePitchIsActive[15]  = true; EnsemblePitchX[15]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[15]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {EnsemblePitchIsActive[16]  = true; EnsemblePitchX[16]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[16]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {EnsemblePitchIsActive[17]  = true; EnsemblePitchX[17]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[17]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {EnsemblePitchIsActive[18]  = true; EnsemblePitchX[18]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[18]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {EnsemblePitchIsActive[19]  = true; EnsemblePitchX[19]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[19]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {EnsemblePitchIsActive[20]  = true; EnsemblePitchX[20]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[20]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {EnsemblePitchIsActive[21]  = true; EnsemblePitchX[21]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[21]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {EnsemblePitchIsActive[22]  = true; EnsemblePitchX[22]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[22]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {EnsemblePitchIsActive[23]  = true; EnsemblePitchX[23]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[23]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {EnsemblePitchIsActive[24]  = true; EnsemblePitchX[24]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[24]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {EnsemblePitchIsActive[25]  = true; EnsemblePitchX[25]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[25]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {EnsemblePitchIsActive[26]  = true; EnsemblePitchX[26]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[26]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {EnsemblePitchIsActive[27]  = true; EnsemblePitchX[27]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[27]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {EnsemblePitchIsActive[28]  = true; EnsemblePitchX[28]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[28]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {EnsemblePitchIsActive[29]  = true; EnsemblePitchX[29]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[29]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {EnsemblePitchIsActive[30]  = true; EnsemblePitchX[30]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[30]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {EnsemblePitchIsActive[31]  = true; EnsemblePitchX[31]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[31]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {EnsemblePitchIsActive[32]  = true; EnsemblePitchX[32]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[32]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {EnsemblePitchIsActive[33]  = true; EnsemblePitchX[33]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[33]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {EnsemblePitchIsActive[34]  = true; EnsemblePitchX[34]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[34]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {EnsemblePitchIsActive[35]  = true; EnsemblePitchX[35]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[35]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {EnsemblePitchIsActive[36]  = true; EnsemblePitchX[36]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[36]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {EnsemblePitchIsActive[37]  = true; EnsemblePitchX[37]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[37]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {EnsemblePitchIsActive[38]  = true; EnsemblePitchX[38]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[38]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {EnsemblePitchIsActive[39]  = true; EnsemblePitchX[39]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[39]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {EnsemblePitchIsActive[40]  = true; EnsemblePitchX[40]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[40]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {EnsemblePitchIsActive[41]  = true; EnsemblePitchX[41]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[41]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {EnsemblePitchIsActive[42]  = true; EnsemblePitchX[42]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[42]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {EnsemblePitchIsActive[43]  = true; EnsemblePitchX[43]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[43]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {EnsemblePitchIsActive[44]  = true; EnsemblePitchX[44]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[44]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {EnsemblePitchIsActive[45]  = true; EnsemblePitchX[45]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[45]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {EnsemblePitchIsActive[46]  = true; EnsemblePitchX[46]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[46]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {EnsemblePitchIsActive[47]  = true; EnsemblePitchX[47]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[47]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {EnsemblePitchIsActive[48]  = true; EnsemblePitchX[48]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[48]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {EnsemblePitchIsActive[49]  = true; EnsemblePitchX[49]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[49]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {EnsemblePitchIsActive[50]  = true; EnsemblePitchX[50]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[50]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {EnsemblePitchIsActive[51]  = true; EnsemblePitchX[51]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[51]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {EnsemblePitchIsActive[52]  = true; EnsemblePitchX[52]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[52]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {EnsemblePitchIsActive[53]  = true; EnsemblePitchX[53]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[53]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {EnsemblePitchIsActive[54]  = true; EnsemblePitchX[54]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[54]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {EnsemblePitchIsActive[55]  = true; EnsemblePitchX[55]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[55]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {EnsemblePitchIsActive[56]  = true; EnsemblePitchX[56]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[56]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {EnsemblePitchIsActive[57]  = true; EnsemblePitchX[57]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[57]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {EnsemblePitchIsActive[58]  = true; EnsemblePitchX[58]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[58]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {EnsemblePitchIsActive[59]  = true; EnsemblePitchX[59]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[59]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {EnsemblePitchIsActive[60]  = true; EnsemblePitchX[60]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[60]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {EnsemblePitchIsActive[61]  = true; EnsemblePitchX[61]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[61]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {EnsemblePitchIsActive[62]  = true; EnsemblePitchX[62]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[62]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {EnsemblePitchIsActive[63]  = true; EnsemblePitchX[63]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[63]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {EnsemblePitchIsActive[64]  = true; EnsemblePitchX[64]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[64]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {EnsemblePitchIsActive[65]  = true; EnsemblePitchX[65]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[65]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {EnsemblePitchIsActive[66]  = true; EnsemblePitchX[66]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[66]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {EnsemblePitchIsActive[67]  = true; EnsemblePitchX[67]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[67]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {EnsemblePitchIsActive[68]  = true; EnsemblePitchX[68]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[68]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {EnsemblePitchIsActive[69]  = true; EnsemblePitchX[69]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[69]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {EnsemblePitchIsActive[70]  = true; EnsemblePitchX[70]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[70]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {EnsemblePitchIsActive[71]  = true; EnsemblePitchX[71]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[71]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {EnsemblePitchIsActive[72]  = true; EnsemblePitchX[72]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[72]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {EnsemblePitchIsActive[73]  = true; EnsemblePitchX[73]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[73]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {EnsemblePitchIsActive[74]  = true; EnsemblePitchX[74]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[74]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {EnsemblePitchIsActive[75]  = true; EnsemblePitchX[75]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[75]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {EnsemblePitchIsActive[76]  = true; EnsemblePitchX[76]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[76]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {EnsemblePitchIsActive[77]  = true; EnsemblePitchX[77]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[77]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {EnsemblePitchIsActive[78]  = true; EnsemblePitchX[78]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[78]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {EnsemblePitchIsActive[79]  = true; EnsemblePitchX[79]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[79]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {EnsemblePitchIsActive[80]  = true; EnsemblePitchX[80]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[80]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {EnsemblePitchIsActive[81]  = true; EnsemblePitchX[81]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[81]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {EnsemblePitchIsActive[82]  = true; EnsemblePitchX[82]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[82]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {EnsemblePitchIsActive[83]  = true; EnsemblePitchX[83]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[83]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {EnsemblePitchIsActive[84]  = true; EnsemblePitchX[84]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[84]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {EnsemblePitchIsActive[85]  = true; EnsemblePitchX[85]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[85]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {EnsemblePitchIsActive[86]  = true; EnsemblePitchX[86]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[86]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {EnsemblePitchIsActive[87]  = true; EnsemblePitchX[87]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[87]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {EnsemblePitchIsActive[88]  = true; EnsemblePitchX[88]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[88]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {EnsemblePitchIsActive[89]  = true; EnsemblePitchX[89]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[89]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {EnsemblePitchIsActive[90]  = true; EnsemblePitchX[90]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[90]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {EnsemblePitchIsActive[91]  = true; EnsemblePitchX[91]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[91]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {EnsemblePitchIsActive[92]  = true; EnsemblePitchX[92]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[92]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {EnsemblePitchIsActive[93]  = true; EnsemblePitchX[93]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[93]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {EnsemblePitchIsActive[94]  = true; EnsemblePitchX[94]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[94]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {EnsemblePitchIsActive[95]  = true; EnsemblePitchX[95]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[95]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {EnsemblePitchIsActive[96]  = true; EnsemblePitchX[96]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[96]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {EnsemblePitchIsActive[97]  = true; EnsemblePitchX[97]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[97]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {EnsemblePitchIsActive[98]  = true; EnsemblePitchX[98]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[98]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {EnsemblePitchIsActive[99]  = true; EnsemblePitchX[99]  = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[99]  = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {EnsemblePitchIsActive[100] = true; EnsemblePitchX[100] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[100] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {EnsemblePitchIsActive[101] = true; EnsemblePitchX[101] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[101] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {EnsemblePitchIsActive[102] = true; EnsemblePitchX[102] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[102] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {EnsemblePitchIsActive[103] = true; EnsemblePitchX[103] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[103] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {EnsemblePitchIsActive[104] = true; EnsemblePitchX[104] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[104] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {EnsemblePitchIsActive[105] = true; EnsemblePitchX[105] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[105] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {EnsemblePitchIsActive[106] = true; EnsemblePitchX[106] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[106] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {EnsemblePitchIsActive[107] = true; EnsemblePitchX[107] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[107] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {EnsemblePitchIsActive[108] = true; EnsemblePitchX[108] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[108] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {EnsemblePitchIsActive[109] = true; EnsemblePitchX[109] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[109] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {EnsemblePitchIsActive[110] = true; EnsemblePitchX[110] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[110] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {EnsemblePitchIsActive[111] = true; EnsemblePitchX[111] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[111] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {EnsemblePitchIsActive[112] = true; EnsemblePitchX[112] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[112] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {EnsemblePitchIsActive[113] = true; EnsemblePitchX[113] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[113] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {EnsemblePitchIsActive[114] = true; EnsemblePitchX[114] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[114] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {EnsemblePitchIsActive[115] = true; EnsemblePitchX[115] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[115] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {EnsemblePitchIsActive[116] = true; EnsemblePitchX[116] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[116] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {EnsemblePitchIsActive[117] = true; EnsemblePitchX[117] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[117] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {EnsemblePitchIsActive[118] = true; EnsemblePitchX[118] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[118] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {EnsemblePitchIsActive[119] = true; EnsemblePitchX[119] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[119] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {EnsemblePitchIsActive[120] = true; EnsemblePitchX[120] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[120] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {EnsemblePitchIsActive[121] = true; EnsemblePitchX[121] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[121] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {EnsemblePitchIsActive[122] = true; EnsemblePitchX[122] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[122] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {EnsemblePitchIsActive[123] = true; EnsemblePitchX[123] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[123] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {EnsemblePitchIsActive[124] = true; EnsemblePitchX[124] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[124] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {EnsemblePitchIsActive[125] = true; EnsemblePitchX[125] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[125] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {EnsemblePitchIsActive[126] = true; EnsemblePitchX[126] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[126] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {EnsemblePitchIsActive[127] = true; EnsemblePitchX[127] = map(Pitch, 0, 127, -width, width*2); EnsembleVelocityY[127] = map(Velocity, 0, 127, height, 0);  EnsembleVelocityAlpha[127] = Velocity*2;}
//   }
// }

//  void BrassChannelNoteOn(){//Brass channel
//   if (Channel ==   7) {
//     ChannelIsActive[7] = true;
//     if (Pitch == 0  ) {BrassPitchIsActive[0]   = true; BrassPitchX[0]   = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[0]   = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {BrassPitchIsActive[1]   = true; BrassPitchX[1]   = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[1]   = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {BrassPitchIsActive[2]   = true; BrassPitchX[2]   = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[2]   = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {BrassPitchIsActive[3]   = true; BrassPitchX[3]   = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[3]   = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {BrassPitchIsActive[4]   = true; BrassPitchX[4]   = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[4]   = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {BrassPitchIsActive[5]   = true; BrassPitchX[5]   = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[5]   = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {BrassPitchIsActive[6]   = true; BrassPitchX[6]   = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[6]   = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {BrassPitchIsActive[7]   = true; BrassPitchX[7]   = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[7]   = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {BrassPitchIsActive[8]   = true; BrassPitchX[8]   = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[8]   = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {BrassPitchIsActive[9]   = true; BrassPitchX[9]   = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[9]   = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {BrassPitchIsActive[10]  = true; BrassPitchX[10]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[10]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {BrassPitchIsActive[11]  = true; BrassPitchX[11]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[11]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {BrassPitchIsActive[12]  = true; BrassPitchX[12]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[12]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {BrassPitchIsActive[13]  = true; BrassPitchX[13]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[13]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {BrassPitchIsActive[14]  = true; BrassPitchX[14]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[14]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {BrassPitchIsActive[15]  = true; BrassPitchX[15]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[15]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {BrassPitchIsActive[16]  = true; BrassPitchX[16]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[16]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {BrassPitchIsActive[17]  = true; BrassPitchX[17]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[17]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {BrassPitchIsActive[18]  = true; BrassPitchX[18]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[18]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {BrassPitchIsActive[19]  = true; BrassPitchX[19]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[19]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {BrassPitchIsActive[20]  = true; BrassPitchX[20]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[20]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {BrassPitchIsActive[21]  = true; BrassPitchX[21]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[21]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {BrassPitchIsActive[22]  = true; BrassPitchX[22]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[22]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {BrassPitchIsActive[23]  = true; BrassPitchX[23]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[23]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {BrassPitchIsActive[24]  = true; BrassPitchX[24]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[24]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {BrassPitchIsActive[25]  = true; BrassPitchX[25]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[25]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {BrassPitchIsActive[26]  = true; BrassPitchX[26]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[26]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {BrassPitchIsActive[27]  = true; BrassPitchX[27]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[27]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {BrassPitchIsActive[28]  = true; BrassPitchX[28]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[28]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {BrassPitchIsActive[29]  = true; BrassPitchX[29]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[29]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {BrassPitchIsActive[30]  = true; BrassPitchX[30]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[30]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {BrassPitchIsActive[31]  = true; BrassPitchX[31]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[31]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {BrassPitchIsActive[32]  = true; BrassPitchX[32]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[32]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {BrassPitchIsActive[33]  = true; BrassPitchX[33]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[33]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {BrassPitchIsActive[34]  = true; BrassPitchX[34]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[34]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {BrassPitchIsActive[35]  = true; BrassPitchX[35]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[35]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {BrassPitchIsActive[36]  = true; BrassPitchX[36]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[36]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {BrassPitchIsActive[37]  = true; BrassPitchX[37]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[37]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {BrassPitchIsActive[38]  = true; BrassPitchX[38]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[38]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {BrassPitchIsActive[39]  = true; BrassPitchX[39]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[39]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {BrassPitchIsActive[40]  = true; BrassPitchX[40]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[40]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {BrassPitchIsActive[41]  = true; BrassPitchX[41]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[41]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {BrassPitchIsActive[42]  = true; BrassPitchX[42]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[42]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {BrassPitchIsActive[43]  = true; BrassPitchX[43]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[43]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {BrassPitchIsActive[44]  = true; BrassPitchX[44]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[44]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {BrassPitchIsActive[45]  = true; BrassPitchX[45]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[45]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {BrassPitchIsActive[46]  = true; BrassPitchX[46]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[46]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {BrassPitchIsActive[47]  = true; BrassPitchX[47]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[47]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {BrassPitchIsActive[48]  = true; BrassPitchX[48]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[48]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {BrassPitchIsActive[49]  = true; BrassPitchX[49]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[49]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {BrassPitchIsActive[50]  = true; BrassPitchX[50]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[50]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {BrassPitchIsActive[51]  = true; BrassPitchX[51]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[51]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {BrassPitchIsActive[52]  = true; BrassPitchX[52]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[52]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {BrassPitchIsActive[53]  = true; BrassPitchX[53]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[53]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {BrassPitchIsActive[54]  = true; BrassPitchX[54]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[54]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {BrassPitchIsActive[55]  = true; BrassPitchX[55]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[55]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {BrassPitchIsActive[56]  = true; BrassPitchX[56]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[56]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {BrassPitchIsActive[57]  = true; BrassPitchX[57]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[57]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {BrassPitchIsActive[58]  = true; BrassPitchX[58]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[58]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {BrassPitchIsActive[59]  = true; BrassPitchX[59]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[59]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {BrassPitchIsActive[60]  = true; BrassPitchX[60]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[60]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {BrassPitchIsActive[61]  = true; BrassPitchX[61]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[61]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {BrassPitchIsActive[62]  = true; BrassPitchX[62]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[62]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {BrassPitchIsActive[63]  = true; BrassPitchX[63]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[63]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {BrassPitchIsActive[64]  = true; BrassPitchX[64]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[64]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {BrassPitchIsActive[65]  = true; BrassPitchX[65]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[65]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {BrassPitchIsActive[66]  = true; BrassPitchX[66]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[66]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {BrassPitchIsActive[67]  = true; BrassPitchX[67]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[67]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {BrassPitchIsActive[68]  = true; BrassPitchX[68]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[68]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {BrassPitchIsActive[69]  = true; BrassPitchX[69]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[69]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {BrassPitchIsActive[70]  = true; BrassPitchX[70]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[70]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {BrassPitchIsActive[71]  = true; BrassPitchX[71]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[71]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {BrassPitchIsActive[72]  = true; BrassPitchX[72]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[72]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {BrassPitchIsActive[73]  = true; BrassPitchX[73]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[73]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {BrassPitchIsActive[74]  = true; BrassPitchX[74]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[74]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {BrassPitchIsActive[75]  = true; BrassPitchX[75]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[75]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {BrassPitchIsActive[76]  = true; BrassPitchX[76]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[76]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {BrassPitchIsActive[77]  = true; BrassPitchX[77]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[77]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {BrassPitchIsActive[78]  = true; BrassPitchX[78]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[78]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {BrassPitchIsActive[79]  = true; BrassPitchX[79]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[79]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {BrassPitchIsActive[80]  = true; BrassPitchX[80]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[80]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {BrassPitchIsActive[81]  = true; BrassPitchX[81]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[81]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {BrassPitchIsActive[82]  = true; BrassPitchX[82]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[82]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {BrassPitchIsActive[83]  = true; BrassPitchX[83]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[83]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {BrassPitchIsActive[84]  = true; BrassPitchX[84]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[84]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {BrassPitchIsActive[85]  = true; BrassPitchX[85]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[85]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {BrassPitchIsActive[86]  = true; BrassPitchX[86]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[86]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {BrassPitchIsActive[87]  = true; BrassPitchX[87]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[87]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {BrassPitchIsActive[88]  = true; BrassPitchX[88]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[88]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {BrassPitchIsActive[89]  = true; BrassPitchX[89]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[89]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {BrassPitchIsActive[90]  = true; BrassPitchX[90]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[90]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {BrassPitchIsActive[91]  = true; BrassPitchX[91]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[91]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {BrassPitchIsActive[92]  = true; BrassPitchX[92]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[92]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {BrassPitchIsActive[93]  = true; BrassPitchX[93]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[93]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {BrassPitchIsActive[94]  = true; BrassPitchX[94]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[94]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {BrassPitchIsActive[95]  = true; BrassPitchX[95]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[95]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {BrassPitchIsActive[96]  = true; BrassPitchX[96]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[96]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {BrassPitchIsActive[97]  = true; BrassPitchX[97]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[97]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {BrassPitchIsActive[98]  = true; BrassPitchX[98]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[98]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {BrassPitchIsActive[99]  = true; BrassPitchX[99]  = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[99]  = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {BrassPitchIsActive[100] = true; BrassPitchX[100] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[100] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {BrassPitchIsActive[101] = true; BrassPitchX[101] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[101] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {BrassPitchIsActive[102] = true; BrassPitchX[102] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[102] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {BrassPitchIsActive[103] = true; BrassPitchX[103] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[103] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {BrassPitchIsActive[104] = true; BrassPitchX[104] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[104] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {BrassPitchIsActive[105] = true; BrassPitchX[105] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[105] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {BrassPitchIsActive[106] = true; BrassPitchX[106] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[106] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {BrassPitchIsActive[107] = true; BrassPitchX[107] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[107] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {BrassPitchIsActive[108] = true; BrassPitchX[108] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[108] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {BrassPitchIsActive[109] = true; BrassPitchX[109] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[109] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {BrassPitchIsActive[110] = true; BrassPitchX[110] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[110] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {BrassPitchIsActive[111] = true; BrassPitchX[111] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[111] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {BrassPitchIsActive[112] = true; BrassPitchX[112] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[112] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {BrassPitchIsActive[113] = true; BrassPitchX[113] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[113] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {BrassPitchIsActive[114] = true; BrassPitchX[114] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[114] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {BrassPitchIsActive[115] = true; BrassPitchX[115] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[115] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {BrassPitchIsActive[116] = true; BrassPitchX[116] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[116] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {BrassPitchIsActive[117] = true; BrassPitchX[117] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[117] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {BrassPitchIsActive[118] = true; BrassPitchX[118] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[118] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {BrassPitchIsActive[119] = true; BrassPitchX[119] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[119] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {BrassPitchIsActive[120] = true; BrassPitchX[120] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[120] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {BrassPitchIsActive[121] = true; BrassPitchX[121] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[121] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {BrassPitchIsActive[122] = true; BrassPitchX[122] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[122] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {BrassPitchIsActive[123] = true; BrassPitchX[123] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[123] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {BrassPitchIsActive[124] = true; BrassPitchX[124] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[124] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {BrassPitchIsActive[125] = true; BrassPitchX[125] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[125] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {BrassPitchIsActive[126] = true; BrassPitchX[126] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[126] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {BrassPitchIsActive[127] = true; BrassPitchX[127] = map(Pitch, 0, 127, -width, width*2); BrassVelocityY[127] = map(Velocity, 0, 127, height, 0);  BrassVelocityAlpha[127] = Velocity*2;}
//   }
// }

//  void ReedChannelNoteOn(){//Reed channel
//   if (Channel ==   8) {
//     ChannelIsActive[8] = true;
//     if (Pitch == 0  ) {ReedPitchIsActive[0]   = true; ReedPitchX[0]   = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[0]   = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {ReedPitchIsActive[1]   = true; ReedPitchX[1]   = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[1]   = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {ReedPitchIsActive[2]   = true; ReedPitchX[2]   = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[2]   = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {ReedPitchIsActive[3]   = true; ReedPitchX[3]   = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[3]   = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {ReedPitchIsActive[4]   = true; ReedPitchX[4]   = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[4]   = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {ReedPitchIsActive[5]   = true; ReedPitchX[5]   = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[5]   = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {ReedPitchIsActive[6]   = true; ReedPitchX[6]   = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[6]   = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {ReedPitchIsActive[7]   = true; ReedPitchX[7]   = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[7]   = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {ReedPitchIsActive[8]   = true; ReedPitchX[8]   = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[8]   = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {ReedPitchIsActive[9]   = true; ReedPitchX[9]   = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[9]   = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {ReedPitchIsActive[10]  = true; ReedPitchX[10]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[10]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {ReedPitchIsActive[11]  = true; ReedPitchX[11]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[11]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {ReedPitchIsActive[12]  = true; ReedPitchX[12]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[12]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {ReedPitchIsActive[13]  = true; ReedPitchX[13]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[13]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {ReedPitchIsActive[14]  = true; ReedPitchX[14]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[14]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {ReedPitchIsActive[15]  = true; ReedPitchX[15]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[15]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {ReedPitchIsActive[16]  = true; ReedPitchX[16]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[16]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {ReedPitchIsActive[17]  = true; ReedPitchX[17]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[17]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {ReedPitchIsActive[18]  = true; ReedPitchX[18]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[18]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {ReedPitchIsActive[19]  = true; ReedPitchX[19]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[19]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {ReedPitchIsActive[20]  = true; ReedPitchX[20]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[20]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {ReedPitchIsActive[21]  = true; ReedPitchX[21]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[21]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {ReedPitchIsActive[22]  = true; ReedPitchX[22]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[22]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {ReedPitchIsActive[23]  = true; ReedPitchX[23]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[23]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {ReedPitchIsActive[24]  = true; ReedPitchX[24]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[24]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {ReedPitchIsActive[25]  = true; ReedPitchX[25]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[25]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {ReedPitchIsActive[26]  = true; ReedPitchX[26]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[26]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {ReedPitchIsActive[27]  = true; ReedPitchX[27]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[27]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {ReedPitchIsActive[28]  = true; ReedPitchX[28]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[28]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {ReedPitchIsActive[29]  = true; ReedPitchX[29]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[29]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {ReedPitchIsActive[30]  = true; ReedPitchX[30]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[30]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {ReedPitchIsActive[31]  = true; ReedPitchX[31]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[31]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {ReedPitchIsActive[32]  = true; ReedPitchX[32]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[32]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {ReedPitchIsActive[33]  = true; ReedPitchX[33]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[33]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {ReedPitchIsActive[34]  = true; ReedPitchX[34]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[34]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {ReedPitchIsActive[35]  = true; ReedPitchX[35]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[35]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {ReedPitchIsActive[36]  = true; ReedPitchX[36]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[36]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {ReedPitchIsActive[37]  = true; ReedPitchX[37]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[37]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {ReedPitchIsActive[38]  = true; ReedPitchX[38]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[38]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {ReedPitchIsActive[39]  = true; ReedPitchX[39]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[39]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {ReedPitchIsActive[40]  = true; ReedPitchX[40]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[40]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {ReedPitchIsActive[41]  = true; ReedPitchX[41]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[41]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {ReedPitchIsActive[42]  = true; ReedPitchX[42]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[42]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {ReedPitchIsActive[43]  = true; ReedPitchX[43]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[43]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {ReedPitchIsActive[44]  = true; ReedPitchX[44]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[44]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {ReedPitchIsActive[45]  = true; ReedPitchX[45]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[45]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {ReedPitchIsActive[46]  = true; ReedPitchX[46]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[46]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {ReedPitchIsActive[47]  = true; ReedPitchX[47]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[47]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {ReedPitchIsActive[48]  = true; ReedPitchX[48]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[48]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {ReedPitchIsActive[49]  = true; ReedPitchX[49]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[49]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {ReedPitchIsActive[50]  = true; ReedPitchX[50]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[50]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {ReedPitchIsActive[51]  = true; ReedPitchX[51]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[51]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {ReedPitchIsActive[52]  = true; ReedPitchX[52]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[52]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {ReedPitchIsActive[53]  = true; ReedPitchX[53]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[53]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {ReedPitchIsActive[54]  = true; ReedPitchX[54]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[54]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {ReedPitchIsActive[55]  = true; ReedPitchX[55]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[55]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {ReedPitchIsActive[56]  = true; ReedPitchX[56]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[56]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {ReedPitchIsActive[57]  = true; ReedPitchX[57]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[57]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {ReedPitchIsActive[58]  = true; ReedPitchX[58]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[58]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {ReedPitchIsActive[59]  = true; ReedPitchX[59]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[59]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {ReedPitchIsActive[60]  = true; ReedPitchX[60]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[60]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {ReedPitchIsActive[61]  = true; ReedPitchX[61]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[61]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {ReedPitchIsActive[62]  = true; ReedPitchX[62]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[62]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {ReedPitchIsActive[63]  = true; ReedPitchX[63]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[63]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {ReedPitchIsActive[64]  = true; ReedPitchX[64]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[64]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {ReedPitchIsActive[65]  = true; ReedPitchX[65]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[65]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {ReedPitchIsActive[66]  = true; ReedPitchX[66]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[66]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {ReedPitchIsActive[67]  = true; ReedPitchX[67]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[67]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {ReedPitchIsActive[68]  = true; ReedPitchX[68]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[68]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {ReedPitchIsActive[69]  = true; ReedPitchX[69]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[69]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {ReedPitchIsActive[70]  = true; ReedPitchX[70]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[70]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {ReedPitchIsActive[71]  = true; ReedPitchX[71]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[71]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {ReedPitchIsActive[72]  = true; ReedPitchX[72]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[72]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {ReedPitchIsActive[73]  = true; ReedPitchX[73]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[73]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {ReedPitchIsActive[74]  = true; ReedPitchX[74]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[74]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {ReedPitchIsActive[75]  = true; ReedPitchX[75]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[75]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {ReedPitchIsActive[76]  = true; ReedPitchX[76]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[76]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {ReedPitchIsActive[77]  = true; ReedPitchX[77]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[77]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {ReedPitchIsActive[78]  = true; ReedPitchX[78]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[78]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {ReedPitchIsActive[79]  = true; ReedPitchX[79]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[79]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {ReedPitchIsActive[80]  = true; ReedPitchX[80]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[80]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {ReedPitchIsActive[81]  = true; ReedPitchX[81]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[81]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {ReedPitchIsActive[82]  = true; ReedPitchX[82]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[82]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {ReedPitchIsActive[83]  = true; ReedPitchX[83]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[83]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {ReedPitchIsActive[84]  = true; ReedPitchX[84]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[84]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {ReedPitchIsActive[85]  = true; ReedPitchX[85]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[85]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {ReedPitchIsActive[86]  = true; ReedPitchX[86]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[86]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {ReedPitchIsActive[87]  = true; ReedPitchX[87]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[87]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {ReedPitchIsActive[88]  = true; ReedPitchX[88]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[88]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {ReedPitchIsActive[89]  = true; ReedPitchX[89]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[89]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {ReedPitchIsActive[90]  = true; ReedPitchX[90]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[90]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {ReedPitchIsActive[91]  = true; ReedPitchX[91]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[91]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {ReedPitchIsActive[92]  = true; ReedPitchX[92]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[92]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {ReedPitchIsActive[93]  = true; ReedPitchX[93]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[93]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {ReedPitchIsActive[94]  = true; ReedPitchX[94]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[94]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {ReedPitchIsActive[95]  = true; ReedPitchX[95]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[95]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {ReedPitchIsActive[96]  = true; ReedPitchX[96]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[96]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {ReedPitchIsActive[97]  = true; ReedPitchX[97]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[97]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {ReedPitchIsActive[98]  = true; ReedPitchX[98]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[98]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {ReedPitchIsActive[99]  = true; ReedPitchX[99]  = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[99]  = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {ReedPitchIsActive[100] = true; ReedPitchX[100] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[100] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {ReedPitchIsActive[101] = true; ReedPitchX[101] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[101] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {ReedPitchIsActive[102] = true; ReedPitchX[102] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[102] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {ReedPitchIsActive[103] = true; ReedPitchX[103] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[103] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {ReedPitchIsActive[104] = true; ReedPitchX[104] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[104] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {ReedPitchIsActive[105] = true; ReedPitchX[105] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[105] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {ReedPitchIsActive[106] = true; ReedPitchX[106] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[106] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {ReedPitchIsActive[107] = true; ReedPitchX[107] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[107] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {ReedPitchIsActive[108] = true; ReedPitchX[108] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[108] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {ReedPitchIsActive[109] = true; ReedPitchX[109] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[109] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {ReedPitchIsActive[110] = true; ReedPitchX[110] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[110] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {ReedPitchIsActive[111] = true; ReedPitchX[111] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[111] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {ReedPitchIsActive[112] = true; ReedPitchX[112] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[112] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {ReedPitchIsActive[113] = true; ReedPitchX[113] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[113] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {ReedPitchIsActive[114] = true; ReedPitchX[114] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[114] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {ReedPitchIsActive[115] = true; ReedPitchX[115] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[115] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {ReedPitchIsActive[116] = true; ReedPitchX[116] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[116] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {ReedPitchIsActive[117] = true; ReedPitchX[117] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[117] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {ReedPitchIsActive[118] = true; ReedPitchX[118] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[118] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {ReedPitchIsActive[119] = true; ReedPitchX[119] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[119] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {ReedPitchIsActive[120] = true; ReedPitchX[120] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[120] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {ReedPitchIsActive[121] = true; ReedPitchX[121] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[121] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {ReedPitchIsActive[122] = true; ReedPitchX[122] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[122] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {ReedPitchIsActive[123] = true; ReedPitchX[123] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[123] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {ReedPitchIsActive[124] = true; ReedPitchX[124] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[124] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {ReedPitchIsActive[125] = true; ReedPitchX[125] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[125] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {ReedPitchIsActive[126] = true; ReedPitchX[126] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[126] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {ReedPitchIsActive[127] = true; ReedPitchX[127] = map(Pitch, 0, 127, -width, width*2); ReedVelocityY[127] = map(Velocity, 0, 127, height, 0);  ReedVelocityAlpha[127] = Velocity*2;}
//   }
// }

//  void PipeChannelNoteOn(){//Pipe channel
//   if (Channel ==   9) {
//     ChannelIsActive[9] = true;
//     if (Pitch == 0  ) {PipePitchIsActive[0]   = true; PipePitchX[0]   = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[0]   = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {PipePitchIsActive[1]   = true; PipePitchX[1]   = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[1]   = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {PipePitchIsActive[2]   = true; PipePitchX[2]   = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[2]   = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {PipePitchIsActive[3]   = true; PipePitchX[3]   = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[3]   = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {PipePitchIsActive[4]   = true; PipePitchX[4]   = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[4]   = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {PipePitchIsActive[5]   = true; PipePitchX[5]   = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[5]   = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {PipePitchIsActive[6]   = true; PipePitchX[6]   = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[6]   = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {PipePitchIsActive[7]   = true; PipePitchX[7]   = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[7]   = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {PipePitchIsActive[8]   = true; PipePitchX[8]   = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[8]   = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {PipePitchIsActive[9]   = true; PipePitchX[9]   = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[9]   = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {PipePitchIsActive[10]  = true; PipePitchX[10]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[10]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {PipePitchIsActive[11]  = true; PipePitchX[11]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[11]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {PipePitchIsActive[12]  = true; PipePitchX[12]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[12]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {PipePitchIsActive[13]  = true; PipePitchX[13]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[13]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {PipePitchIsActive[14]  = true; PipePitchX[14]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[14]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {PipePitchIsActive[15]  = true; PipePitchX[15]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[15]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {PipePitchIsActive[16]  = true; PipePitchX[16]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[16]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {PipePitchIsActive[17]  = true; PipePitchX[17]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[17]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {PipePitchIsActive[18]  = true; PipePitchX[18]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[18]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {PipePitchIsActive[19]  = true; PipePitchX[19]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[19]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {PipePitchIsActive[20]  = true; PipePitchX[20]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[20]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {PipePitchIsActive[21]  = true; PipePitchX[21]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[21]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {PipePitchIsActive[22]  = true; PipePitchX[22]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[22]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {PipePitchIsActive[23]  = true; PipePitchX[23]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[23]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {PipePitchIsActive[24]  = true; PipePitchX[24]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[24]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {PipePitchIsActive[25]  = true; PipePitchX[25]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[25]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {PipePitchIsActive[26]  = true; PipePitchX[26]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[26]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {PipePitchIsActive[27]  = true; PipePitchX[27]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[27]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {PipePitchIsActive[28]  = true; PipePitchX[28]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[28]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {PipePitchIsActive[29]  = true; PipePitchX[29]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[29]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {PipePitchIsActive[30]  = true; PipePitchX[30]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[30]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {PipePitchIsActive[31]  = true; PipePitchX[31]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[31]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {PipePitchIsActive[32]  = true; PipePitchX[32]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[32]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {PipePitchIsActive[33]  = true; PipePitchX[33]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[33]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {PipePitchIsActive[34]  = true; PipePitchX[34]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[34]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {PipePitchIsActive[35]  = true; PipePitchX[35]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[35]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {PipePitchIsActive[36]  = true; PipePitchX[36]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[36]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {PipePitchIsActive[37]  = true; PipePitchX[37]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[37]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {PipePitchIsActive[38]  = true; PipePitchX[38]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[38]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {PipePitchIsActive[39]  = true; PipePitchX[39]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[39]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {PipePitchIsActive[40]  = true; PipePitchX[40]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[40]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {PipePitchIsActive[41]  = true; PipePitchX[41]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[41]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {PipePitchIsActive[42]  = true; PipePitchX[42]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[42]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {PipePitchIsActive[43]  = true; PipePitchX[43]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[43]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {PipePitchIsActive[44]  = true; PipePitchX[44]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[44]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {PipePitchIsActive[45]  = true; PipePitchX[45]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[45]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {PipePitchIsActive[46]  = true; PipePitchX[46]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[46]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {PipePitchIsActive[47]  = true; PipePitchX[47]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[47]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {PipePitchIsActive[48]  = true; PipePitchX[48]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[48]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {PipePitchIsActive[49]  = true; PipePitchX[49]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[49]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {PipePitchIsActive[50]  = true; PipePitchX[50]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[50]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {PipePitchIsActive[51]  = true; PipePitchX[51]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[51]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {PipePitchIsActive[52]  = true; PipePitchX[52]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[52]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {PipePitchIsActive[53]  = true; PipePitchX[53]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[53]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {PipePitchIsActive[54]  = true; PipePitchX[54]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[54]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {PipePitchIsActive[55]  = true; PipePitchX[55]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[55]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {PipePitchIsActive[56]  = true; PipePitchX[56]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[56]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {PipePitchIsActive[57]  = true; PipePitchX[57]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[57]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {PipePitchIsActive[58]  = true; PipePitchX[58]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[58]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {PipePitchIsActive[59]  = true; PipePitchX[59]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[59]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {PipePitchIsActive[60]  = true; PipePitchX[60]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[60]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {PipePitchIsActive[61]  = true; PipePitchX[61]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[61]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {PipePitchIsActive[62]  = true; PipePitchX[62]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[62]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {PipePitchIsActive[63]  = true; PipePitchX[63]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[63]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {PipePitchIsActive[64]  = true; PipePitchX[64]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[64]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {PipePitchIsActive[65]  = true; PipePitchX[65]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[65]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {PipePitchIsActive[66]  = true; PipePitchX[66]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[66]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {PipePitchIsActive[67]  = true; PipePitchX[67]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[67]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {PipePitchIsActive[68]  = true; PipePitchX[68]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[68]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {PipePitchIsActive[69]  = true; PipePitchX[69]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[69]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {PipePitchIsActive[70]  = true; PipePitchX[70]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[70]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {PipePitchIsActive[71]  = true; PipePitchX[71]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[71]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {PipePitchIsActive[72]  = true; PipePitchX[72]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[72]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {PipePitchIsActive[73]  = true; PipePitchX[73]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[73]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {PipePitchIsActive[74]  = true; PipePitchX[74]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[74]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {PipePitchIsActive[75]  = true; PipePitchX[75]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[75]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {PipePitchIsActive[76]  = true; PipePitchX[76]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[76]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {PipePitchIsActive[77]  = true; PipePitchX[77]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[77]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {PipePitchIsActive[78]  = true; PipePitchX[78]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[78]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {PipePitchIsActive[79]  = true; PipePitchX[79]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[79]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {PipePitchIsActive[80]  = true; PipePitchX[80]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[80]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {PipePitchIsActive[81]  = true; PipePitchX[81]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[81]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {PipePitchIsActive[82]  = true; PipePitchX[82]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[82]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {PipePitchIsActive[83]  = true; PipePitchX[83]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[83]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {PipePitchIsActive[84]  = true; PipePitchX[84]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[84]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {PipePitchIsActive[85]  = true; PipePitchX[85]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[85]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {PipePitchIsActive[86]  = true; PipePitchX[86]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[86]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {PipePitchIsActive[87]  = true; PipePitchX[87]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[87]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {PipePitchIsActive[88]  = true; PipePitchX[88]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[88]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {PipePitchIsActive[89]  = true; PipePitchX[89]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[89]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {PipePitchIsActive[90]  = true; PipePitchX[90]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[90]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {PipePitchIsActive[91]  = true; PipePitchX[91]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[91]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {PipePitchIsActive[92]  = true; PipePitchX[92]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[92]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {PipePitchIsActive[93]  = true; PipePitchX[93]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[93]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {PipePitchIsActive[94]  = true; PipePitchX[94]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[94]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {PipePitchIsActive[95]  = true; PipePitchX[95]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[95]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {PipePitchIsActive[96]  = true; PipePitchX[96]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[96]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {PipePitchIsActive[97]  = true; PipePitchX[97]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[97]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {PipePitchIsActive[98]  = true; PipePitchX[98]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[98]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {PipePitchIsActive[99]  = true; PipePitchX[99]  = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[99]  = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {PipePitchIsActive[100] = true; PipePitchX[100] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[100] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {PipePitchIsActive[101] = true; PipePitchX[101] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[101] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {PipePitchIsActive[102] = true; PipePitchX[102] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[102] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {PipePitchIsActive[103] = true; PipePitchX[103] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[103] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {PipePitchIsActive[104] = true; PipePitchX[104] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[104] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {PipePitchIsActive[105] = true; PipePitchX[105] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[105] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {PipePitchIsActive[106] = true; PipePitchX[106] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[106] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {PipePitchIsActive[107] = true; PipePitchX[107] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[107] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {PipePitchIsActive[108] = true; PipePitchX[108] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[108] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {PipePitchIsActive[109] = true; PipePitchX[109] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[109] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {PipePitchIsActive[110] = true; PipePitchX[110] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[110] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {PipePitchIsActive[111] = true; PipePitchX[111] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[111] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {PipePitchIsActive[112] = true; PipePitchX[112] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[112] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {PipePitchIsActive[113] = true; PipePitchX[113] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[113] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {PipePitchIsActive[114] = true; PipePitchX[114] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[114] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {PipePitchIsActive[115] = true; PipePitchX[115] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[115] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {PipePitchIsActive[116] = true; PipePitchX[116] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[116] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {PipePitchIsActive[117] = true; PipePitchX[117] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[117] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {PipePitchIsActive[118] = true; PipePitchX[118] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[118] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {PipePitchIsActive[119] = true; PipePitchX[119] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[119] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {PipePitchIsActive[120] = true; PipePitchX[120] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[120] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {PipePitchIsActive[121] = true; PipePitchX[121] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[121] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {PipePitchIsActive[122] = true; PipePitchX[122] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[122] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {PipePitchIsActive[123] = true; PipePitchX[123] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[123] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {PipePitchIsActive[124] = true; PipePitchX[124] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[124] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {PipePitchIsActive[125] = true; PipePitchX[125] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[125] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {PipePitchIsActive[126] = true; PipePitchX[126] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[126] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {PipePitchIsActive[127] = true; PipePitchX[127] = map(Pitch, 0, 127, -width, width*2); PipeVelocityY[127] = map(Velocity, 0, 127, height, 0);  PipeVelocityAlpha[127] = Velocity*2;}
//   }
// }

//  void SynthLeadChannelNoteOn(){//SynthLead channel
//   if (Channel ==   11) {
//     ChannelIsActive[11] = true;
//     if (Pitch == 0  ) {SynthLeadPitchIsActive[0]   = true; SynthLeadPitchX[0]   = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[0]   = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {SynthLeadPitchIsActive[1]   = true; SynthLeadPitchX[1]   = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[1]   = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {SynthLeadPitchIsActive[2]   = true; SynthLeadPitchX[2]   = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[2]   = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {SynthLeadPitchIsActive[3]   = true; SynthLeadPitchX[3]   = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[3]   = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {SynthLeadPitchIsActive[4]   = true; SynthLeadPitchX[4]   = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[4]   = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {SynthLeadPitchIsActive[5]   = true; SynthLeadPitchX[5]   = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[5]   = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {SynthLeadPitchIsActive[6]   = true; SynthLeadPitchX[6]   = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[6]   = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {SynthLeadPitchIsActive[7]   = true; SynthLeadPitchX[7]   = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[7]   = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {SynthLeadPitchIsActive[8]   = true; SynthLeadPitchX[8]   = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[8]   = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {SynthLeadPitchIsActive[9]   = true; SynthLeadPitchX[9]   = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[9]   = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {SynthLeadPitchIsActive[10]  = true; SynthLeadPitchX[10]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[10]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {SynthLeadPitchIsActive[11]  = true; SynthLeadPitchX[11]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[11]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {SynthLeadPitchIsActive[12]  = true; SynthLeadPitchX[12]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[12]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {SynthLeadPitchIsActive[13]  = true; SynthLeadPitchX[13]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[13]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {SynthLeadPitchIsActive[14]  = true; SynthLeadPitchX[14]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[14]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {SynthLeadPitchIsActive[15]  = true; SynthLeadPitchX[15]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[15]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {SynthLeadPitchIsActive[16]  = true; SynthLeadPitchX[16]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[16]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {SynthLeadPitchIsActive[17]  = true; SynthLeadPitchX[17]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[17]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {SynthLeadPitchIsActive[18]  = true; SynthLeadPitchX[18]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[18]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {SynthLeadPitchIsActive[19]  = true; SynthLeadPitchX[19]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[19]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {SynthLeadPitchIsActive[20]  = true; SynthLeadPitchX[20]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[20]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {SynthLeadPitchIsActive[21]  = true; SynthLeadPitchX[21]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[21]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {SynthLeadPitchIsActive[22]  = true; SynthLeadPitchX[22]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[22]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {SynthLeadPitchIsActive[23]  = true; SynthLeadPitchX[23]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[23]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {SynthLeadPitchIsActive[24]  = true; SynthLeadPitchX[24]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[24]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {SynthLeadPitchIsActive[25]  = true; SynthLeadPitchX[25]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[25]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {SynthLeadPitchIsActive[26]  = true; SynthLeadPitchX[26]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[26]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {SynthLeadPitchIsActive[27]  = true; SynthLeadPitchX[27]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[27]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {SynthLeadPitchIsActive[28]  = true; SynthLeadPitchX[28]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[28]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {SynthLeadPitchIsActive[29]  = true; SynthLeadPitchX[29]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[29]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {SynthLeadPitchIsActive[30]  = true; SynthLeadPitchX[30]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[30]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {SynthLeadPitchIsActive[31]  = true; SynthLeadPitchX[31]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[31]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {SynthLeadPitchIsActive[32]  = true; SynthLeadPitchX[32]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[32]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {SynthLeadPitchIsActive[33]  = true; SynthLeadPitchX[33]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[33]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {SynthLeadPitchIsActive[34]  = true; SynthLeadPitchX[34]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[34]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {SynthLeadPitchIsActive[35]  = true; SynthLeadPitchX[35]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[35]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {SynthLeadPitchIsActive[36]  = true; SynthLeadPitchX[36]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[36]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {SynthLeadPitchIsActive[37]  = true; SynthLeadPitchX[37]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[37]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {SynthLeadPitchIsActive[38]  = true; SynthLeadPitchX[38]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[38]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {SynthLeadPitchIsActive[39]  = true; SynthLeadPitchX[39]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[39]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {SynthLeadPitchIsActive[40]  = true; SynthLeadPitchX[40]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[40]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {SynthLeadPitchIsActive[41]  = true; SynthLeadPitchX[41]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[41]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {SynthLeadPitchIsActive[42]  = true; SynthLeadPitchX[42]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[42]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {SynthLeadPitchIsActive[43]  = true; SynthLeadPitchX[43]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[43]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {SynthLeadPitchIsActive[44]  = true; SynthLeadPitchX[44]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[44]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {SynthLeadPitchIsActive[45]  = true; SynthLeadPitchX[45]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[45]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {SynthLeadPitchIsActive[46]  = true; SynthLeadPitchX[46]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[46]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {SynthLeadPitchIsActive[47]  = true; SynthLeadPitchX[47]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[47]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {SynthLeadPitchIsActive[48]  = true; SynthLeadPitchX[48]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[48]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {SynthLeadPitchIsActive[49]  = true; SynthLeadPitchX[49]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[49]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {SynthLeadPitchIsActive[50]  = true; SynthLeadPitchX[50]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[50]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {SynthLeadPitchIsActive[51]  = true; SynthLeadPitchX[51]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[51]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {SynthLeadPitchIsActive[52]  = true; SynthLeadPitchX[52]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[52]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {SynthLeadPitchIsActive[53]  = true; SynthLeadPitchX[53]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[53]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {SynthLeadPitchIsActive[54]  = true; SynthLeadPitchX[54]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[54]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {SynthLeadPitchIsActive[55]  = true; SynthLeadPitchX[55]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[55]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {SynthLeadPitchIsActive[56]  = true; SynthLeadPitchX[56]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[56]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {SynthLeadPitchIsActive[57]  = true; SynthLeadPitchX[57]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[57]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {SynthLeadPitchIsActive[58]  = true; SynthLeadPitchX[58]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[58]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {SynthLeadPitchIsActive[59]  = true; SynthLeadPitchX[59]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[59]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {SynthLeadPitchIsActive[60]  = true; SynthLeadPitchX[60]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[60]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {SynthLeadPitchIsActive[61]  = true; SynthLeadPitchX[61]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[61]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {SynthLeadPitchIsActive[62]  = true; SynthLeadPitchX[62]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[62]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {SynthLeadPitchIsActive[63]  = true; SynthLeadPitchX[63]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[63]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {SynthLeadPitchIsActive[64]  = true; SynthLeadPitchX[64]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[64]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {SynthLeadPitchIsActive[65]  = true; SynthLeadPitchX[65]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[65]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {SynthLeadPitchIsActive[66]  = true; SynthLeadPitchX[66]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[66]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {SynthLeadPitchIsActive[67]  = true; SynthLeadPitchX[67]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[67]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {SynthLeadPitchIsActive[68]  = true; SynthLeadPitchX[68]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[68]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {SynthLeadPitchIsActive[69]  = true; SynthLeadPitchX[69]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[69]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {SynthLeadPitchIsActive[70]  = true; SynthLeadPitchX[70]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[70]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {SynthLeadPitchIsActive[71]  = true; SynthLeadPitchX[71]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[71]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {SynthLeadPitchIsActive[72]  = true; SynthLeadPitchX[72]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[72]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {SynthLeadPitchIsActive[73]  = true; SynthLeadPitchX[73]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[73]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {SynthLeadPitchIsActive[74]  = true; SynthLeadPitchX[74]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[74]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {SynthLeadPitchIsActive[75]  = true; SynthLeadPitchX[75]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[75]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {SynthLeadPitchIsActive[76]  = true; SynthLeadPitchX[76]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[76]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {SynthLeadPitchIsActive[77]  = true; SynthLeadPitchX[77]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[77]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {SynthLeadPitchIsActive[78]  = true; SynthLeadPitchX[78]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[78]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {SynthLeadPitchIsActive[79]  = true; SynthLeadPitchX[79]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[79]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {SynthLeadPitchIsActive[80]  = true; SynthLeadPitchX[80]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[80]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {SynthLeadPitchIsActive[81]  = true; SynthLeadPitchX[81]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[81]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {SynthLeadPitchIsActive[82]  = true; SynthLeadPitchX[82]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[82]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {SynthLeadPitchIsActive[83]  = true; SynthLeadPitchX[83]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[83]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {SynthLeadPitchIsActive[84]  = true; SynthLeadPitchX[84]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[84]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {SynthLeadPitchIsActive[85]  = true; SynthLeadPitchX[85]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[85]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {SynthLeadPitchIsActive[86]  = true; SynthLeadPitchX[86]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[86]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {SynthLeadPitchIsActive[87]  = true; SynthLeadPitchX[87]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[87]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {SynthLeadPitchIsActive[88]  = true; SynthLeadPitchX[88]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[88]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {SynthLeadPitchIsActive[89]  = true; SynthLeadPitchX[89]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[89]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {SynthLeadPitchIsActive[90]  = true; SynthLeadPitchX[90]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[90]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {SynthLeadPitchIsActive[91]  = true; SynthLeadPitchX[91]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[91]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {SynthLeadPitchIsActive[92]  = true; SynthLeadPitchX[92]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[92]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {SynthLeadPitchIsActive[93]  = true; SynthLeadPitchX[93]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[93]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {SynthLeadPitchIsActive[94]  = true; SynthLeadPitchX[94]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[94]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {SynthLeadPitchIsActive[95]  = true; SynthLeadPitchX[95]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[95]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {SynthLeadPitchIsActive[96]  = true; SynthLeadPitchX[96]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[96]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {SynthLeadPitchIsActive[97]  = true; SynthLeadPitchX[97]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[97]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {SynthLeadPitchIsActive[98]  = true; SynthLeadPitchX[98]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[98]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {SynthLeadPitchIsActive[99]  = true; SynthLeadPitchX[99]  = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[99]  = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {SynthLeadPitchIsActive[100] = true; SynthLeadPitchX[100] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[100] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {SynthLeadPitchIsActive[101] = true; SynthLeadPitchX[101] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[101] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {SynthLeadPitchIsActive[102] = true; SynthLeadPitchX[102] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[102] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {SynthLeadPitchIsActive[103] = true; SynthLeadPitchX[103] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[103] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {SynthLeadPitchIsActive[104] = true; SynthLeadPitchX[104] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[104] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {SynthLeadPitchIsActive[105] = true; SynthLeadPitchX[105] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[105] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {SynthLeadPitchIsActive[106] = true; SynthLeadPitchX[106] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[106] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {SynthLeadPitchIsActive[107] = true; SynthLeadPitchX[107] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[107] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {SynthLeadPitchIsActive[108] = true; SynthLeadPitchX[108] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[108] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {SynthLeadPitchIsActive[109] = true; SynthLeadPitchX[109] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[109] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {SynthLeadPitchIsActive[110] = true; SynthLeadPitchX[110] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[110] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {SynthLeadPitchIsActive[111] = true; SynthLeadPitchX[111] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[111] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {SynthLeadPitchIsActive[112] = true; SynthLeadPitchX[112] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[112] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {SynthLeadPitchIsActive[113] = true; SynthLeadPitchX[113] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[113] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {SynthLeadPitchIsActive[114] = true; SynthLeadPitchX[114] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[114] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {SynthLeadPitchIsActive[115] = true; SynthLeadPitchX[115] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[115] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {SynthLeadPitchIsActive[116] = true; SynthLeadPitchX[116] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[116] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {SynthLeadPitchIsActive[117] = true; SynthLeadPitchX[117] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[117] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {SynthLeadPitchIsActive[118] = true; SynthLeadPitchX[118] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[118] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {SynthLeadPitchIsActive[119] = true; SynthLeadPitchX[119] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[119] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {SynthLeadPitchIsActive[120] = true; SynthLeadPitchX[120] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[120] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {SynthLeadPitchIsActive[121] = true; SynthLeadPitchX[121] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[121] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {SynthLeadPitchIsActive[122] = true; SynthLeadPitchX[122] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[122] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {SynthLeadPitchIsActive[123] = true; SynthLeadPitchX[123] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[123] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {SynthLeadPitchIsActive[124] = true; SynthLeadPitchX[124] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[124] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {SynthLeadPitchIsActive[125] = true; SynthLeadPitchX[125] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[125] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {SynthLeadPitchIsActive[126] = true; SynthLeadPitchX[126] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[126] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {SynthLeadPitchIsActive[127] = true; SynthLeadPitchX[127] = map(Pitch, 0, 127, -width, width*2); SynthLeadVelocityY[127] = map(Velocity, 0, 127, height, 0);  SynthLeadVelocityAlpha[127] = Velocity*2;}
//   }
// }

//  void SynthPadChannelNoteOn(){//SynthPad channel
//   if (Channel ==   12) {
//     ChannelIsActive[12] = true;
//     if (Pitch == 0  ) {SynthPadPitchIsActive[0]   = true; SynthPadPitchX[0]   = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[0]   = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {SynthPadPitchIsActive[1]   = true; SynthPadPitchX[1]   = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[1]   = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {SynthPadPitchIsActive[2]   = true; SynthPadPitchX[2]   = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[2]   = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {SynthPadPitchIsActive[3]   = true; SynthPadPitchX[3]   = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[3]   = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {SynthPadPitchIsActive[4]   = true; SynthPadPitchX[4]   = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[4]   = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {SynthPadPitchIsActive[5]   = true; SynthPadPitchX[5]   = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[5]   = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {SynthPadPitchIsActive[6]   = true; SynthPadPitchX[6]   = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[6]   = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {SynthPadPitchIsActive[7]   = true; SynthPadPitchX[7]   = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[7]   = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {SynthPadPitchIsActive[8]   = true; SynthPadPitchX[8]   = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[8]   = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {SynthPadPitchIsActive[9]   = true; SynthPadPitchX[9]   = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[9]   = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {SynthPadPitchIsActive[10]  = true; SynthPadPitchX[10]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[10]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {SynthPadPitchIsActive[11]  = true; SynthPadPitchX[11]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[11]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {SynthPadPitchIsActive[12]  = true; SynthPadPitchX[12]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[12]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {SynthPadPitchIsActive[13]  = true; SynthPadPitchX[13]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[13]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {SynthPadPitchIsActive[14]  = true; SynthPadPitchX[14]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[14]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {SynthPadPitchIsActive[15]  = true; SynthPadPitchX[15]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[15]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {SynthPadPitchIsActive[16]  = true; SynthPadPitchX[16]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[16]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {SynthPadPitchIsActive[17]  = true; SynthPadPitchX[17]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[17]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {SynthPadPitchIsActive[18]  = true; SynthPadPitchX[18]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[18]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {SynthPadPitchIsActive[19]  = true; SynthPadPitchX[19]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[19]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {SynthPadPitchIsActive[20]  = true; SynthPadPitchX[20]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[20]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {SynthPadPitchIsActive[21]  = true; SynthPadPitchX[21]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[21]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {SynthPadPitchIsActive[22]  = true; SynthPadPitchX[22]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[22]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {SynthPadPitchIsActive[23]  = true; SynthPadPitchX[23]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[23]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {SynthPadPitchIsActive[24]  = true; SynthPadPitchX[24]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[24]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {SynthPadPitchIsActive[25]  = true; SynthPadPitchX[25]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[25]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {SynthPadPitchIsActive[26]  = true; SynthPadPitchX[26]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[26]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {SynthPadPitchIsActive[27]  = true; SynthPadPitchX[27]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[27]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {SynthPadPitchIsActive[28]  = true; SynthPadPitchX[28]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[28]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {SynthPadPitchIsActive[29]  = true; SynthPadPitchX[29]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[29]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {SynthPadPitchIsActive[30]  = true; SynthPadPitchX[30]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[30]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {SynthPadPitchIsActive[31]  = true; SynthPadPitchX[31]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[31]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {SynthPadPitchIsActive[32]  = true; SynthPadPitchX[32]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[32]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {SynthPadPitchIsActive[33]  = true; SynthPadPitchX[33]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[33]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {SynthPadPitchIsActive[34]  = true; SynthPadPitchX[34]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[34]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {SynthPadPitchIsActive[35]  = true; SynthPadPitchX[35]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[35]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {SynthPadPitchIsActive[36]  = true; SynthPadPitchX[36]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[36]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {SynthPadPitchIsActive[37]  = true; SynthPadPitchX[37]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[37]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {SynthPadPitchIsActive[38]  = true; SynthPadPitchX[38]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[38]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {SynthPadPitchIsActive[39]  = true; SynthPadPitchX[39]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[39]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {SynthPadPitchIsActive[40]  = true; SynthPadPitchX[40]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[40]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {SynthPadPitchIsActive[41]  = true; SynthPadPitchX[41]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[41]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {SynthPadPitchIsActive[42]  = true; SynthPadPitchX[42]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[42]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {SynthPadPitchIsActive[43]  = true; SynthPadPitchX[43]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[43]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {SynthPadPitchIsActive[44]  = true; SynthPadPitchX[44]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[44]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {SynthPadPitchIsActive[45]  = true; SynthPadPitchX[45]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[45]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {SynthPadPitchIsActive[46]  = true; SynthPadPitchX[46]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[46]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {SynthPadPitchIsActive[47]  = true; SynthPadPitchX[47]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[47]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {SynthPadPitchIsActive[48]  = true; SynthPadPitchX[48]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[48]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {SynthPadPitchIsActive[49]  = true; SynthPadPitchX[49]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[49]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {SynthPadPitchIsActive[50]  = true; SynthPadPitchX[50]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[50]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {SynthPadPitchIsActive[51]  = true; SynthPadPitchX[51]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[51]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {SynthPadPitchIsActive[52]  = true; SynthPadPitchX[52]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[52]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {SynthPadPitchIsActive[53]  = true; SynthPadPitchX[53]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[53]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {SynthPadPitchIsActive[54]  = true; SynthPadPitchX[54]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[54]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {SynthPadPitchIsActive[55]  = true; SynthPadPitchX[55]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[55]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {SynthPadPitchIsActive[56]  = true; SynthPadPitchX[56]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[56]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {SynthPadPitchIsActive[57]  = true; SynthPadPitchX[57]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[57]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {SynthPadPitchIsActive[58]  = true; SynthPadPitchX[58]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[58]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {SynthPadPitchIsActive[59]  = true; SynthPadPitchX[59]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[59]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {SynthPadPitchIsActive[60]  = true; SynthPadPitchX[60]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[60]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {SynthPadPitchIsActive[61]  = true; SynthPadPitchX[61]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[61]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {SynthPadPitchIsActive[62]  = true; SynthPadPitchX[62]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[62]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {SynthPadPitchIsActive[63]  = true; SynthPadPitchX[63]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[63]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {SynthPadPitchIsActive[64]  = true; SynthPadPitchX[64]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[64]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {SynthPadPitchIsActive[65]  = true; SynthPadPitchX[65]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[65]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {SynthPadPitchIsActive[66]  = true; SynthPadPitchX[66]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[66]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {SynthPadPitchIsActive[67]  = true; SynthPadPitchX[67]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[67]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {SynthPadPitchIsActive[68]  = true; SynthPadPitchX[68]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[68]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {SynthPadPitchIsActive[69]  = true; SynthPadPitchX[69]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[69]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {SynthPadPitchIsActive[70]  = true; SynthPadPitchX[70]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[70]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {SynthPadPitchIsActive[71]  = true; SynthPadPitchX[71]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[71]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {SynthPadPitchIsActive[72]  = true; SynthPadPitchX[72]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[72]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {SynthPadPitchIsActive[73]  = true; SynthPadPitchX[73]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[73]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {SynthPadPitchIsActive[74]  = true; SynthPadPitchX[74]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[74]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {SynthPadPitchIsActive[75]  = true; SynthPadPitchX[75]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[75]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {SynthPadPitchIsActive[76]  = true; SynthPadPitchX[76]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[76]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {SynthPadPitchIsActive[77]  = true; SynthPadPitchX[77]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[77]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {SynthPadPitchIsActive[78]  = true; SynthPadPitchX[78]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[78]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {SynthPadPitchIsActive[79]  = true; SynthPadPitchX[79]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[79]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {SynthPadPitchIsActive[80]  = true; SynthPadPitchX[80]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[80]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {SynthPadPitchIsActive[81]  = true; SynthPadPitchX[81]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[81]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {SynthPadPitchIsActive[82]  = true; SynthPadPitchX[82]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[82]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {SynthPadPitchIsActive[83]  = true; SynthPadPitchX[83]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[83]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {SynthPadPitchIsActive[84]  = true; SynthPadPitchX[84]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[84]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {SynthPadPitchIsActive[85]  = true; SynthPadPitchX[85]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[85]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {SynthPadPitchIsActive[86]  = true; SynthPadPitchX[86]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[86]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {SynthPadPitchIsActive[87]  = true; SynthPadPitchX[87]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[87]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {SynthPadPitchIsActive[88]  = true; SynthPadPitchX[88]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[88]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {SynthPadPitchIsActive[89]  = true; SynthPadPitchX[89]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[89]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {SynthPadPitchIsActive[90]  = true; SynthPadPitchX[90]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[90]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {SynthPadPitchIsActive[91]  = true; SynthPadPitchX[91]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[91]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {SynthPadPitchIsActive[92]  = true; SynthPadPitchX[92]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[92]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {SynthPadPitchIsActive[93]  = true; SynthPadPitchX[93]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[93]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {SynthPadPitchIsActive[94]  = true; SynthPadPitchX[94]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[94]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {SynthPadPitchIsActive[95]  = true; SynthPadPitchX[95]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[95]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {SynthPadPitchIsActive[96]  = true; SynthPadPitchX[96]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[96]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {SynthPadPitchIsActive[97]  = true; SynthPadPitchX[97]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[97]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {SynthPadPitchIsActive[98]  = true; SynthPadPitchX[98]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[98]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {SynthPadPitchIsActive[99]  = true; SynthPadPitchX[99]  = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[99]  = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {SynthPadPitchIsActive[100] = true; SynthPadPitchX[100] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[100] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {SynthPadPitchIsActive[101] = true; SynthPadPitchX[101] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[101] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {SynthPadPitchIsActive[102] = true; SynthPadPitchX[102] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[102] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {SynthPadPitchIsActive[103] = true; SynthPadPitchX[103] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[103] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {SynthPadPitchIsActive[104] = true; SynthPadPitchX[104] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[104] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {SynthPadPitchIsActive[105] = true; SynthPadPitchX[105] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[105] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {SynthPadPitchIsActive[106] = true; SynthPadPitchX[106] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[106] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {SynthPadPitchIsActive[107] = true; SynthPadPitchX[107] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[107] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {SynthPadPitchIsActive[108] = true; SynthPadPitchX[108] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[108] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {SynthPadPitchIsActive[109] = true; SynthPadPitchX[109] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[109] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {SynthPadPitchIsActive[110] = true; SynthPadPitchX[110] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[110] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {SynthPadPitchIsActive[111] = true; SynthPadPitchX[111] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[111] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {SynthPadPitchIsActive[112] = true; SynthPadPitchX[112] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[112] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {SynthPadPitchIsActive[113] = true; SynthPadPitchX[113] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[113] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {SynthPadPitchIsActive[114] = true; SynthPadPitchX[114] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[114] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {SynthPadPitchIsActive[115] = true; SynthPadPitchX[115] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[115] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {SynthPadPitchIsActive[116] = true; SynthPadPitchX[116] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[116] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {SynthPadPitchIsActive[117] = true; SynthPadPitchX[117] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[117] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {SynthPadPitchIsActive[118] = true; SynthPadPitchX[118] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[118] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {SynthPadPitchIsActive[119] = true; SynthPadPitchX[119] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[119] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {SynthPadPitchIsActive[120] = true; SynthPadPitchX[120] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[120] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {SynthPadPitchIsActive[121] = true; SynthPadPitchX[121] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[121] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {SynthPadPitchIsActive[122] = true; SynthPadPitchX[122] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[122] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {SynthPadPitchIsActive[123] = true; SynthPadPitchX[123] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[123] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {SynthPadPitchIsActive[124] = true; SynthPadPitchX[124] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[124] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {SynthPadPitchIsActive[125] = true; SynthPadPitchX[125] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[125] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {SynthPadPitchIsActive[126] = true; SynthPadPitchX[126] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[126] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {SynthPadPitchIsActive[127] = true; SynthPadPitchX[127] = map(Pitch, 0, 127, -width, width*2); SynthPadVelocityY[127] = map(Velocity, 0, 127, height, 0);  SynthPadVelocityAlpha[127] = Velocity*2;}
//   }
// }

//  void SynthEffectsChannelNoteOn(){//SynthEffects channel
//   if (Channel ==   13) {
//     ChannelIsActive[13] = true;
//     if (Pitch == 0  ) {SynthEffectsPitchIsActive[0]   = true; SynthEffectsPitchX[0]   = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[0]   = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {SynthEffectsPitchIsActive[1]   = true; SynthEffectsPitchX[1]   = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[1]   = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {SynthEffectsPitchIsActive[2]   = true; SynthEffectsPitchX[2]   = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[2]   = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {SynthEffectsPitchIsActive[3]   = true; SynthEffectsPitchX[3]   = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[3]   = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {SynthEffectsPitchIsActive[4]   = true; SynthEffectsPitchX[4]   = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[4]   = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {SynthEffectsPitchIsActive[5]   = true; SynthEffectsPitchX[5]   = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[5]   = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {SynthEffectsPitchIsActive[6]   = true; SynthEffectsPitchX[6]   = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[6]   = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {SynthEffectsPitchIsActive[7]   = true; SynthEffectsPitchX[7]   = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[7]   = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {SynthEffectsPitchIsActive[8]   = true; SynthEffectsPitchX[8]   = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[8]   = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {SynthEffectsPitchIsActive[9]   = true; SynthEffectsPitchX[9]   = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[9]   = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {SynthEffectsPitchIsActive[10]  = true; SynthEffectsPitchX[10]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[10]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {SynthEffectsPitchIsActive[11]  = true; SynthEffectsPitchX[11]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[11]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {SynthEffectsPitchIsActive[12]  = true; SynthEffectsPitchX[12]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[12]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {SynthEffectsPitchIsActive[13]  = true; SynthEffectsPitchX[13]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[13]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {SynthEffectsPitchIsActive[14]  = true; SynthEffectsPitchX[14]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[14]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {SynthEffectsPitchIsActive[15]  = true; SynthEffectsPitchX[15]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[15]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {SynthEffectsPitchIsActive[16]  = true; SynthEffectsPitchX[16]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[16]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {SynthEffectsPitchIsActive[17]  = true; SynthEffectsPitchX[17]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[17]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {SynthEffectsPitchIsActive[18]  = true; SynthEffectsPitchX[18]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[18]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {SynthEffectsPitchIsActive[19]  = true; SynthEffectsPitchX[19]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[19]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {SynthEffectsPitchIsActive[20]  = true; SynthEffectsPitchX[20]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[20]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {SynthEffectsPitchIsActive[21]  = true; SynthEffectsPitchX[21]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[21]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {SynthEffectsPitchIsActive[22]  = true; SynthEffectsPitchX[22]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[22]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {SynthEffectsPitchIsActive[23]  = true; SynthEffectsPitchX[23]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[23]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {SynthEffectsPitchIsActive[24]  = true; SynthEffectsPitchX[24]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[24]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {SynthEffectsPitchIsActive[25]  = true; SynthEffectsPitchX[25]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[25]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {SynthEffectsPitchIsActive[26]  = true; SynthEffectsPitchX[26]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[26]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {SynthEffectsPitchIsActive[27]  = true; SynthEffectsPitchX[27]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[27]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {SynthEffectsPitchIsActive[28]  = true; SynthEffectsPitchX[28]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[28]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {SynthEffectsPitchIsActive[29]  = true; SynthEffectsPitchX[29]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[29]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {SynthEffectsPitchIsActive[30]  = true; SynthEffectsPitchX[30]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[30]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {SynthEffectsPitchIsActive[31]  = true; SynthEffectsPitchX[31]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[31]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {SynthEffectsPitchIsActive[32]  = true; SynthEffectsPitchX[32]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[32]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {SynthEffectsPitchIsActive[33]  = true; SynthEffectsPitchX[33]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[33]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {SynthEffectsPitchIsActive[34]  = true; SynthEffectsPitchX[34]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[34]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {SynthEffectsPitchIsActive[35]  = true; SynthEffectsPitchX[35]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[35]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {SynthEffectsPitchIsActive[36]  = true; SynthEffectsPitchX[36]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[36]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {SynthEffectsPitchIsActive[37]  = true; SynthEffectsPitchX[37]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[37]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {SynthEffectsPitchIsActive[38]  = true; SynthEffectsPitchX[38]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[38]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {SynthEffectsPitchIsActive[39]  = true; SynthEffectsPitchX[39]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[39]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {SynthEffectsPitchIsActive[40]  = true; SynthEffectsPitchX[40]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[40]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {SynthEffectsPitchIsActive[41]  = true; SynthEffectsPitchX[41]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[41]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {SynthEffectsPitchIsActive[42]  = true; SynthEffectsPitchX[42]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[42]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {SynthEffectsPitchIsActive[43]  = true; SynthEffectsPitchX[43]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[43]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {SynthEffectsPitchIsActive[44]  = true; SynthEffectsPitchX[44]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[44]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {SynthEffectsPitchIsActive[45]  = true; SynthEffectsPitchX[45]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[45]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {SynthEffectsPitchIsActive[46]  = true; SynthEffectsPitchX[46]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[46]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {SynthEffectsPitchIsActive[47]  = true; SynthEffectsPitchX[47]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[47]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {SynthEffectsPitchIsActive[48]  = true; SynthEffectsPitchX[48]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[48]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {SynthEffectsPitchIsActive[49]  = true; SynthEffectsPitchX[49]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[49]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {SynthEffectsPitchIsActive[50]  = true; SynthEffectsPitchX[50]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[50]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {SynthEffectsPitchIsActive[51]  = true; SynthEffectsPitchX[51]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[51]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {SynthEffectsPitchIsActive[52]  = true; SynthEffectsPitchX[52]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[52]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {SynthEffectsPitchIsActive[53]  = true; SynthEffectsPitchX[53]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[53]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {SynthEffectsPitchIsActive[54]  = true; SynthEffectsPitchX[54]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[54]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {SynthEffectsPitchIsActive[55]  = true; SynthEffectsPitchX[55]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[55]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {SynthEffectsPitchIsActive[56]  = true; SynthEffectsPitchX[56]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[56]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {SynthEffectsPitchIsActive[57]  = true; SynthEffectsPitchX[57]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[57]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {SynthEffectsPitchIsActive[58]  = true; SynthEffectsPitchX[58]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[58]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {SynthEffectsPitchIsActive[59]  = true; SynthEffectsPitchX[59]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[59]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {SynthEffectsPitchIsActive[60]  = true; SynthEffectsPitchX[60]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[60]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {SynthEffectsPitchIsActive[61]  = true; SynthEffectsPitchX[61]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[61]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {SynthEffectsPitchIsActive[62]  = true; SynthEffectsPitchX[62]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[62]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {SynthEffectsPitchIsActive[63]  = true; SynthEffectsPitchX[63]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[63]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {SynthEffectsPitchIsActive[64]  = true; SynthEffectsPitchX[64]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[64]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {SynthEffectsPitchIsActive[65]  = true; SynthEffectsPitchX[65]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[65]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {SynthEffectsPitchIsActive[66]  = true; SynthEffectsPitchX[66]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[66]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {SynthEffectsPitchIsActive[67]  = true; SynthEffectsPitchX[67]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[67]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {SynthEffectsPitchIsActive[68]  = true; SynthEffectsPitchX[68]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[68]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {SynthEffectsPitchIsActive[69]  = true; SynthEffectsPitchX[69]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[69]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {SynthEffectsPitchIsActive[70]  = true; SynthEffectsPitchX[70]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[70]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {SynthEffectsPitchIsActive[71]  = true; SynthEffectsPitchX[71]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[71]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {SynthEffectsPitchIsActive[72]  = true; SynthEffectsPitchX[72]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[72]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {SynthEffectsPitchIsActive[73]  = true; SynthEffectsPitchX[73]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[73]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {SynthEffectsPitchIsActive[74]  = true; SynthEffectsPitchX[74]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[74]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {SynthEffectsPitchIsActive[75]  = true; SynthEffectsPitchX[75]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[75]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {SynthEffectsPitchIsActive[76]  = true; SynthEffectsPitchX[76]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[76]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {SynthEffectsPitchIsActive[77]  = true; SynthEffectsPitchX[77]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[77]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {SynthEffectsPitchIsActive[78]  = true; SynthEffectsPitchX[78]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[78]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {SynthEffectsPitchIsActive[79]  = true; SynthEffectsPitchX[79]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[79]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {SynthEffectsPitchIsActive[80]  = true; SynthEffectsPitchX[80]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[80]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {SynthEffectsPitchIsActive[81]  = true; SynthEffectsPitchX[81]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[81]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {SynthEffectsPitchIsActive[82]  = true; SynthEffectsPitchX[82]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[82]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {SynthEffectsPitchIsActive[83]  = true; SynthEffectsPitchX[83]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[83]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {SynthEffectsPitchIsActive[84]  = true; SynthEffectsPitchX[84]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[84]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {SynthEffectsPitchIsActive[85]  = true; SynthEffectsPitchX[85]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[85]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {SynthEffectsPitchIsActive[86]  = true; SynthEffectsPitchX[86]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[86]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {SynthEffectsPitchIsActive[87]  = true; SynthEffectsPitchX[87]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[87]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {SynthEffectsPitchIsActive[88]  = true; SynthEffectsPitchX[88]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[88]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {SynthEffectsPitchIsActive[89]  = true; SynthEffectsPitchX[89]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[89]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {SynthEffectsPitchIsActive[90]  = true; SynthEffectsPitchX[90]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[90]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {SynthEffectsPitchIsActive[91]  = true; SynthEffectsPitchX[91]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[91]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {SynthEffectsPitchIsActive[92]  = true; SynthEffectsPitchX[92]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[92]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {SynthEffectsPitchIsActive[93]  = true; SynthEffectsPitchX[93]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[93]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {SynthEffectsPitchIsActive[94]  = true; SynthEffectsPitchX[94]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[94]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {SynthEffectsPitchIsActive[95]  = true; SynthEffectsPitchX[95]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[95]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {SynthEffectsPitchIsActive[96]  = true; SynthEffectsPitchX[96]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[96]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {SynthEffectsPitchIsActive[97]  = true; SynthEffectsPitchX[97]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[97]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {SynthEffectsPitchIsActive[98]  = true; SynthEffectsPitchX[98]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[98]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {SynthEffectsPitchIsActive[99]  = true; SynthEffectsPitchX[99]  = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[99]  = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {SynthEffectsPitchIsActive[100] = true; SynthEffectsPitchX[100] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[100] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {SynthEffectsPitchIsActive[101] = true; SynthEffectsPitchX[101] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[101] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {SynthEffectsPitchIsActive[102] = true; SynthEffectsPitchX[102] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[102] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {SynthEffectsPitchIsActive[103] = true; SynthEffectsPitchX[103] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[103] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {SynthEffectsPitchIsActive[104] = true; SynthEffectsPitchX[104] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[104] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {SynthEffectsPitchIsActive[105] = true; SynthEffectsPitchX[105] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[105] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {SynthEffectsPitchIsActive[106] = true; SynthEffectsPitchX[106] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[106] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {SynthEffectsPitchIsActive[107] = true; SynthEffectsPitchX[107] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[107] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {SynthEffectsPitchIsActive[108] = true; SynthEffectsPitchX[108] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[108] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {SynthEffectsPitchIsActive[109] = true; SynthEffectsPitchX[109] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[109] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {SynthEffectsPitchIsActive[110] = true; SynthEffectsPitchX[110] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[110] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {SynthEffectsPitchIsActive[111] = true; SynthEffectsPitchX[111] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[111] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {SynthEffectsPitchIsActive[112] = true; SynthEffectsPitchX[112] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[112] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {SynthEffectsPitchIsActive[113] = true; SynthEffectsPitchX[113] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[113] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {SynthEffectsPitchIsActive[114] = true; SynthEffectsPitchX[114] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[114] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {SynthEffectsPitchIsActive[115] = true; SynthEffectsPitchX[115] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[115] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {SynthEffectsPitchIsActive[116] = true; SynthEffectsPitchX[116] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[116] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {SynthEffectsPitchIsActive[117] = true; SynthEffectsPitchX[117] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[117] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {SynthEffectsPitchIsActive[118] = true; SynthEffectsPitchX[118] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[118] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {SynthEffectsPitchIsActive[119] = true; SynthEffectsPitchX[119] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[119] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {SynthEffectsPitchIsActive[120] = true; SynthEffectsPitchX[120] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[120] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {SynthEffectsPitchIsActive[121] = true; SynthEffectsPitchX[121] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[121] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {SynthEffectsPitchIsActive[122] = true; SynthEffectsPitchX[122] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[122] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {SynthEffectsPitchIsActive[123] = true; SynthEffectsPitchX[123] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[123] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {SynthEffectsPitchIsActive[124] = true; SynthEffectsPitchX[124] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[124] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {SynthEffectsPitchIsActive[125] = true; SynthEffectsPitchX[125] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[125] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {SynthEffectsPitchIsActive[126] = true; SynthEffectsPitchX[126] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[126] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {SynthEffectsPitchIsActive[127] = true; SynthEffectsPitchX[127] = map(Pitch, 0, 127, -width, width*2); SynthEffectsVelocityY[127] = map(Velocity, 0, 127, height, 0);  SynthEffectsVelocityAlpha[127] = Velocity*2;}
//   }
// }

//  void EthnicChannelNoteOn(){//Ethnic channel
//   if (Channel ==   14) {
//     ChannelIsActive[14] = true;
//     if (Pitch == 0  ) {EthnicPitchIsActive[0]   = true; EthnicPitchX[0]   = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[0]   = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {EthnicPitchIsActive[1]   = true; EthnicPitchX[1]   = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[1]   = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {EthnicPitchIsActive[2]   = true; EthnicPitchX[2]   = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[2]   = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {EthnicPitchIsActive[3]   = true; EthnicPitchX[3]   = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[3]   = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {EthnicPitchIsActive[4]   = true; EthnicPitchX[4]   = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[4]   = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {EthnicPitchIsActive[5]   = true; EthnicPitchX[5]   = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[5]   = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {EthnicPitchIsActive[6]   = true; EthnicPitchX[6]   = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[6]   = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {EthnicPitchIsActive[7]   = true; EthnicPitchX[7]   = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[7]   = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {EthnicPitchIsActive[8]   = true; EthnicPitchX[8]   = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[8]   = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {EthnicPitchIsActive[9]   = true; EthnicPitchX[9]   = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[9]   = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {EthnicPitchIsActive[10]  = true; EthnicPitchX[10]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[10]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {EthnicPitchIsActive[11]  = true; EthnicPitchX[11]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[11]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {EthnicPitchIsActive[12]  = true; EthnicPitchX[12]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[12]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {EthnicPitchIsActive[13]  = true; EthnicPitchX[13]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[13]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {EthnicPitchIsActive[14]  = true; EthnicPitchX[14]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[14]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {EthnicPitchIsActive[15]  = true; EthnicPitchX[15]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[15]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {EthnicPitchIsActive[16]  = true; EthnicPitchX[16]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[16]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {EthnicPitchIsActive[17]  = true; EthnicPitchX[17]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[17]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {EthnicPitchIsActive[18]  = true; EthnicPitchX[18]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[18]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {EthnicPitchIsActive[19]  = true; EthnicPitchX[19]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[19]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {EthnicPitchIsActive[20]  = true; EthnicPitchX[20]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[20]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {EthnicPitchIsActive[21]  = true; EthnicPitchX[21]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[21]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {EthnicPitchIsActive[22]  = true; EthnicPitchX[22]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[22]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {EthnicPitchIsActive[23]  = true; EthnicPitchX[23]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[23]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {EthnicPitchIsActive[24]  = true; EthnicPitchX[24]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[24]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {EthnicPitchIsActive[25]  = true; EthnicPitchX[25]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[25]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {EthnicPitchIsActive[26]  = true; EthnicPitchX[26]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[26]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {EthnicPitchIsActive[27]  = true; EthnicPitchX[27]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[27]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {EthnicPitchIsActive[28]  = true; EthnicPitchX[28]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[28]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {EthnicPitchIsActive[29]  = true; EthnicPitchX[29]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[29]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {EthnicPitchIsActive[30]  = true; EthnicPitchX[30]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[30]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {EthnicPitchIsActive[31]  = true; EthnicPitchX[31]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[31]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {EthnicPitchIsActive[32]  = true; EthnicPitchX[32]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[32]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {EthnicPitchIsActive[33]  = true; EthnicPitchX[33]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[33]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {EthnicPitchIsActive[34]  = true; EthnicPitchX[34]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[34]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {EthnicPitchIsActive[35]  = true; EthnicPitchX[35]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[35]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {EthnicPitchIsActive[36]  = true; EthnicPitchX[36]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[36]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {EthnicPitchIsActive[37]  = true; EthnicPitchX[37]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[37]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {EthnicPitchIsActive[38]  = true; EthnicPitchX[38]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[38]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {EthnicPitchIsActive[39]  = true; EthnicPitchX[39]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[39]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {EthnicPitchIsActive[40]  = true; EthnicPitchX[40]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[40]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {EthnicPitchIsActive[41]  = true; EthnicPitchX[41]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[41]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {EthnicPitchIsActive[42]  = true; EthnicPitchX[42]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[42]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {EthnicPitchIsActive[43]  = true; EthnicPitchX[43]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[43]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {EthnicPitchIsActive[44]  = true; EthnicPitchX[44]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[44]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {EthnicPitchIsActive[45]  = true; EthnicPitchX[45]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[45]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {EthnicPitchIsActive[46]  = true; EthnicPitchX[46]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[46]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {EthnicPitchIsActive[47]  = true; EthnicPitchX[47]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[47]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {EthnicPitchIsActive[48]  = true; EthnicPitchX[48]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[48]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {EthnicPitchIsActive[49]  = true; EthnicPitchX[49]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[49]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {EthnicPitchIsActive[50]  = true; EthnicPitchX[50]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[50]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {EthnicPitchIsActive[51]  = true; EthnicPitchX[51]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[51]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {EthnicPitchIsActive[52]  = true; EthnicPitchX[52]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[52]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {EthnicPitchIsActive[53]  = true; EthnicPitchX[53]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[53]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {EthnicPitchIsActive[54]  = true; EthnicPitchX[54]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[54]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {EthnicPitchIsActive[55]  = true; EthnicPitchX[55]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[55]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {EthnicPitchIsActive[56]  = true; EthnicPitchX[56]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[56]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {EthnicPitchIsActive[57]  = true; EthnicPitchX[57]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[57]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {EthnicPitchIsActive[58]  = true; EthnicPitchX[58]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[58]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {EthnicPitchIsActive[59]  = true; EthnicPitchX[59]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[59]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {EthnicPitchIsActive[60]  = true; EthnicPitchX[60]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[60]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {EthnicPitchIsActive[61]  = true; EthnicPitchX[61]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[61]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {EthnicPitchIsActive[62]  = true; EthnicPitchX[62]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[62]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {EthnicPitchIsActive[63]  = true; EthnicPitchX[63]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[63]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {EthnicPitchIsActive[64]  = true; EthnicPitchX[64]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[64]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {EthnicPitchIsActive[65]  = true; EthnicPitchX[65]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[65]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {EthnicPitchIsActive[66]  = true; EthnicPitchX[66]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[66]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {EthnicPitchIsActive[67]  = true; EthnicPitchX[67]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[67]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {EthnicPitchIsActive[68]  = true; EthnicPitchX[68]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[68]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {EthnicPitchIsActive[69]  = true; EthnicPitchX[69]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[69]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {EthnicPitchIsActive[70]  = true; EthnicPitchX[70]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[70]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {EthnicPitchIsActive[71]  = true; EthnicPitchX[71]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[71]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {EthnicPitchIsActive[72]  = true; EthnicPitchX[72]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[72]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {EthnicPitchIsActive[73]  = true; EthnicPitchX[73]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[73]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {EthnicPitchIsActive[74]  = true; EthnicPitchX[74]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[74]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {EthnicPitchIsActive[75]  = true; EthnicPitchX[75]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[75]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {EthnicPitchIsActive[76]  = true; EthnicPitchX[76]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[76]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {EthnicPitchIsActive[77]  = true; EthnicPitchX[77]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[77]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {EthnicPitchIsActive[78]  = true; EthnicPitchX[78]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[78]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {EthnicPitchIsActive[79]  = true; EthnicPitchX[79]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[79]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {EthnicPitchIsActive[80]  = true; EthnicPitchX[80]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[80]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {EthnicPitchIsActive[81]  = true; EthnicPitchX[81]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[81]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {EthnicPitchIsActive[82]  = true; EthnicPitchX[82]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[82]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {EthnicPitchIsActive[83]  = true; EthnicPitchX[83]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[83]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {EthnicPitchIsActive[84]  = true; EthnicPitchX[84]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[84]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {EthnicPitchIsActive[85]  = true; EthnicPitchX[85]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[85]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {EthnicPitchIsActive[86]  = true; EthnicPitchX[86]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[86]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {EthnicPitchIsActive[87]  = true; EthnicPitchX[87]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[87]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {EthnicPitchIsActive[88]  = true; EthnicPitchX[88]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[88]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {EthnicPitchIsActive[89]  = true; EthnicPitchX[89]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[89]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {EthnicPitchIsActive[90]  = true; EthnicPitchX[90]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[90]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {EthnicPitchIsActive[91]  = true; EthnicPitchX[91]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[91]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {EthnicPitchIsActive[92]  = true; EthnicPitchX[92]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[92]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {EthnicPitchIsActive[93]  = true; EthnicPitchX[93]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[93]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {EthnicPitchIsActive[94]  = true; EthnicPitchX[94]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[94]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {EthnicPitchIsActive[95]  = true; EthnicPitchX[95]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[95]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {EthnicPitchIsActive[96]  = true; EthnicPitchX[96]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[96]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {EthnicPitchIsActive[97]  = true; EthnicPitchX[97]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[97]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {EthnicPitchIsActive[98]  = true; EthnicPitchX[98]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[98]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {EthnicPitchIsActive[99]  = true; EthnicPitchX[99]  = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[99]  = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {EthnicPitchIsActive[100] = true; EthnicPitchX[100] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[100] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {EthnicPitchIsActive[101] = true; EthnicPitchX[101] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[101] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {EthnicPitchIsActive[102] = true; EthnicPitchX[102] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[102] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {EthnicPitchIsActive[103] = true; EthnicPitchX[103] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[103] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {EthnicPitchIsActive[104] = true; EthnicPitchX[104] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[104] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {EthnicPitchIsActive[105] = true; EthnicPitchX[105] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[105] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {EthnicPitchIsActive[106] = true; EthnicPitchX[106] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[106] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {EthnicPitchIsActive[107] = true; EthnicPitchX[107] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[107] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {EthnicPitchIsActive[108] = true; EthnicPitchX[108] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[108] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {EthnicPitchIsActive[109] = true; EthnicPitchX[109] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[109] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {EthnicPitchIsActive[110] = true; EthnicPitchX[110] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[110] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {EthnicPitchIsActive[111] = true; EthnicPitchX[111] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[111] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {EthnicPitchIsActive[112] = true; EthnicPitchX[112] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[112] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {EthnicPitchIsActive[113] = true; EthnicPitchX[113] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[113] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {EthnicPitchIsActive[114] = true; EthnicPitchX[114] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[114] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {EthnicPitchIsActive[115] = true; EthnicPitchX[115] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[115] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {EthnicPitchIsActive[116] = true; EthnicPitchX[116] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[116] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {EthnicPitchIsActive[117] = true; EthnicPitchX[117] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[117] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {EthnicPitchIsActive[118] = true; EthnicPitchX[118] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[118] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {EthnicPitchIsActive[119] = true; EthnicPitchX[119] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[119] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {EthnicPitchIsActive[120] = true; EthnicPitchX[120] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[120] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {EthnicPitchIsActive[121] = true; EthnicPitchX[121] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[121] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {EthnicPitchIsActive[122] = true; EthnicPitchX[122] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[122] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {EthnicPitchIsActive[123] = true; EthnicPitchX[123] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[123] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {EthnicPitchIsActive[124] = true; EthnicPitchX[124] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[124] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {EthnicPitchIsActive[125] = true; EthnicPitchX[125] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[125] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {EthnicPitchIsActive[126] = true; EthnicPitchX[126] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[126] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {EthnicPitchIsActive[127] = true; EthnicPitchX[127] = map(Pitch, 0, 127, -width, width*2); EthnicVelocityY[127] = map(Velocity, 0, 127, height, 0);  EthnicVelocityAlpha[127] = Velocity*2;}
//   }
// }

//  void PercussiveChannelNoteOn(){//Percussive channel
//   if (Channel ==   15) {
//     ChannelIsActive[15] = true;
//     if (Pitch == 0  ) {PercussivePitchIsActive[0]   = true; PercussivePitchX[0]   = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[0]   = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {PercussivePitchIsActive[1]   = true; PercussivePitchX[1]   = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[1]   = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {PercussivePitchIsActive[2]   = true; PercussivePitchX[2]   = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[2]   = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {PercussivePitchIsActive[3]   = true; PercussivePitchX[3]   = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[3]   = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {PercussivePitchIsActive[4]   = true; PercussivePitchX[4]   = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[4]   = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {PercussivePitchIsActive[5]   = true; PercussivePitchX[5]   = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[5]   = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {PercussivePitchIsActive[6]   = true; PercussivePitchX[6]   = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[6]   = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {PercussivePitchIsActive[7]   = true; PercussivePitchX[7]   = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[7]   = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {PercussivePitchIsActive[8]   = true; PercussivePitchX[8]   = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[8]   = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {PercussivePitchIsActive[9]   = true; PercussivePitchX[9]   = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[9]   = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {PercussivePitchIsActive[10]  = true; PercussivePitchX[10]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[10]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {PercussivePitchIsActive[11]  = true; PercussivePitchX[11]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[11]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {PercussivePitchIsActive[12]  = true; PercussivePitchX[12]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[12]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {PercussivePitchIsActive[13]  = true; PercussivePitchX[13]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[13]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {PercussivePitchIsActive[14]  = true; PercussivePitchX[14]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[14]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {PercussivePitchIsActive[15]  = true; PercussivePitchX[15]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[15]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {PercussivePitchIsActive[16]  = true; PercussivePitchX[16]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[16]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {PercussivePitchIsActive[17]  = true; PercussivePitchX[17]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[17]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {PercussivePitchIsActive[18]  = true; PercussivePitchX[18]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[18]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {PercussivePitchIsActive[19]  = true; PercussivePitchX[19]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[19]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {PercussivePitchIsActive[20]  = true; PercussivePitchX[20]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[20]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {PercussivePitchIsActive[21]  = true; PercussivePitchX[21]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[21]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {PercussivePitchIsActive[22]  = true; PercussivePitchX[22]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[22]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {PercussivePitchIsActive[23]  = true; PercussivePitchX[23]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[23]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {PercussivePitchIsActive[24]  = true; PercussivePitchX[24]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[24]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {PercussivePitchIsActive[25]  = true; PercussivePitchX[25]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[25]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {PercussivePitchIsActive[26]  = true; PercussivePitchX[26]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[26]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {PercussivePitchIsActive[27]  = true; PercussivePitchX[27]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[27]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {PercussivePitchIsActive[28]  = true; PercussivePitchX[28]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[28]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {PercussivePitchIsActive[29]  = true; PercussivePitchX[29]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[29]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {PercussivePitchIsActive[30]  = true; PercussivePitchX[30]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[30]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {PercussivePitchIsActive[31]  = true; PercussivePitchX[31]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[31]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {PercussivePitchIsActive[32]  = true; PercussivePitchX[32]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[32]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {PercussivePitchIsActive[33]  = true; PercussivePitchX[33]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[33]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {PercussivePitchIsActive[34]  = true; PercussivePitchX[34]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[34]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {PercussivePitchIsActive[35]  = true; PercussivePitchX[35]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[35]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {PercussivePitchIsActive[36]  = true; PercussivePitchX[36]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[36]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {PercussivePitchIsActive[37]  = true; PercussivePitchX[37]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[37]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {PercussivePitchIsActive[38]  = true; PercussivePitchX[38]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[38]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {PercussivePitchIsActive[39]  = true; PercussivePitchX[39]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[39]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {PercussivePitchIsActive[40]  = true; PercussivePitchX[40]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[40]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {PercussivePitchIsActive[41]  = true; PercussivePitchX[41]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[41]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {PercussivePitchIsActive[42]  = true; PercussivePitchX[42]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[42]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {PercussivePitchIsActive[43]  = true; PercussivePitchX[43]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[43]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {PercussivePitchIsActive[44]  = true; PercussivePitchX[44]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[44]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {PercussivePitchIsActive[45]  = true; PercussivePitchX[45]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[45]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {PercussivePitchIsActive[46]  = true; PercussivePitchX[46]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[46]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {PercussivePitchIsActive[47]  = true; PercussivePitchX[47]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[47]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {PercussivePitchIsActive[48]  = true; PercussivePitchX[48]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[48]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {PercussivePitchIsActive[49]  = true; PercussivePitchX[49]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[49]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {PercussivePitchIsActive[50]  = true; PercussivePitchX[50]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[50]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {PercussivePitchIsActive[51]  = true; PercussivePitchX[51]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[51]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {PercussivePitchIsActive[52]  = true; PercussivePitchX[52]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[52]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {PercussivePitchIsActive[53]  = true; PercussivePitchX[53]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[53]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {PercussivePitchIsActive[54]  = true; PercussivePitchX[54]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[54]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {PercussivePitchIsActive[55]  = true; PercussivePitchX[55]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[55]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {PercussivePitchIsActive[56]  = true; PercussivePitchX[56]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[56]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {PercussivePitchIsActive[57]  = true; PercussivePitchX[57]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[57]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {PercussivePitchIsActive[58]  = true; PercussivePitchX[58]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[58]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {PercussivePitchIsActive[59]  = true; PercussivePitchX[59]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[59]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {PercussivePitchIsActive[60]  = true; PercussivePitchX[60]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[60]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {PercussivePitchIsActive[61]  = true; PercussivePitchX[61]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[61]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {PercussivePitchIsActive[62]  = true; PercussivePitchX[62]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[62]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {PercussivePitchIsActive[63]  = true; PercussivePitchX[63]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[63]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {PercussivePitchIsActive[64]  = true; PercussivePitchX[64]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[64]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {PercussivePitchIsActive[65]  = true; PercussivePitchX[65]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[65]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {PercussivePitchIsActive[66]  = true; PercussivePitchX[66]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[66]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {PercussivePitchIsActive[67]  = true; PercussivePitchX[67]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[67]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {PercussivePitchIsActive[68]  = true; PercussivePitchX[68]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[68]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {PercussivePitchIsActive[69]  = true; PercussivePitchX[69]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[69]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {PercussivePitchIsActive[70]  = true; PercussivePitchX[70]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[70]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {PercussivePitchIsActive[71]  = true; PercussivePitchX[71]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[71]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {PercussivePitchIsActive[72]  = true; PercussivePitchX[72]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[72]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {PercussivePitchIsActive[73]  = true; PercussivePitchX[73]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[73]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {PercussivePitchIsActive[74]  = true; PercussivePitchX[74]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[74]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {PercussivePitchIsActive[75]  = true; PercussivePitchX[75]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[75]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {PercussivePitchIsActive[76]  = true; PercussivePitchX[76]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[76]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {PercussivePitchIsActive[77]  = true; PercussivePitchX[77]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[77]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {PercussivePitchIsActive[78]  = true; PercussivePitchX[78]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[78]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {PercussivePitchIsActive[79]  = true; PercussivePitchX[79]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[79]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {PercussivePitchIsActive[80]  = true; PercussivePitchX[80]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[80]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {PercussivePitchIsActive[81]  = true; PercussivePitchX[81]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[81]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {PercussivePitchIsActive[82]  = true; PercussivePitchX[82]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[82]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {PercussivePitchIsActive[83]  = true; PercussivePitchX[83]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[83]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {PercussivePitchIsActive[84]  = true; PercussivePitchX[84]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[84]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {PercussivePitchIsActive[85]  = true; PercussivePitchX[85]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[85]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {PercussivePitchIsActive[86]  = true; PercussivePitchX[86]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[86]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {PercussivePitchIsActive[87]  = true; PercussivePitchX[87]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[87]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {PercussivePitchIsActive[88]  = true; PercussivePitchX[88]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[88]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {PercussivePitchIsActive[89]  = true; PercussivePitchX[89]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[89]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {PercussivePitchIsActive[90]  = true; PercussivePitchX[90]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[90]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {PercussivePitchIsActive[91]  = true; PercussivePitchX[91]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[91]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {PercussivePitchIsActive[92]  = true; PercussivePitchX[92]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[92]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {PercussivePitchIsActive[93]  = true; PercussivePitchX[93]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[93]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {PercussivePitchIsActive[94]  = true; PercussivePitchX[94]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[94]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {PercussivePitchIsActive[95]  = true; PercussivePitchX[95]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[95]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {PercussivePitchIsActive[96]  = true; PercussivePitchX[96]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[96]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {PercussivePitchIsActive[97]  = true; PercussivePitchX[97]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[97]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {PercussivePitchIsActive[98]  = true; PercussivePitchX[98]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[98]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {PercussivePitchIsActive[99]  = true; PercussivePitchX[99]  = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[99]  = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {PercussivePitchIsActive[100] = true; PercussivePitchX[100] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[100] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {PercussivePitchIsActive[101] = true; PercussivePitchX[101] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[101] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {PercussivePitchIsActive[102] = true; PercussivePitchX[102] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[102] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {PercussivePitchIsActive[103] = true; PercussivePitchX[103] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[103] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {PercussivePitchIsActive[104] = true; PercussivePitchX[104] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[104] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {PercussivePitchIsActive[105] = true; PercussivePitchX[105] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[105] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {PercussivePitchIsActive[106] = true; PercussivePitchX[106] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[106] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {PercussivePitchIsActive[107] = true; PercussivePitchX[107] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[107] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {PercussivePitchIsActive[108] = true; PercussivePitchX[108] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[108] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {PercussivePitchIsActive[109] = true; PercussivePitchX[109] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[109] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {PercussivePitchIsActive[110] = true; PercussivePitchX[110] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[110] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {PercussivePitchIsActive[111] = true; PercussivePitchX[111] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[111] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {PercussivePitchIsActive[112] = true; PercussivePitchX[112] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[112] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {PercussivePitchIsActive[113] = true; PercussivePitchX[113] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[113] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {PercussivePitchIsActive[114] = true; PercussivePitchX[114] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[114] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {PercussivePitchIsActive[115] = true; PercussivePitchX[115] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[115] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {PercussivePitchIsActive[116] = true; PercussivePitchX[116] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[116] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {PercussivePitchIsActive[117] = true; PercussivePitchX[117] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[117] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {PercussivePitchIsActive[118] = true; PercussivePitchX[118] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[118] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {PercussivePitchIsActive[119] = true; PercussivePitchX[119] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[119] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {PercussivePitchIsActive[120] = true; PercussivePitchX[120] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[120] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {PercussivePitchIsActive[121] = true; PercussivePitchX[121] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[121] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {PercussivePitchIsActive[122] = true; PercussivePitchX[122] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[122] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {PercussivePitchIsActive[123] = true; PercussivePitchX[123] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[123] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {PercussivePitchIsActive[124] = true; PercussivePitchX[124] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[124] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {PercussivePitchIsActive[125] = true; PercussivePitchX[125] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[125] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {PercussivePitchIsActive[126] = true; PercussivePitchX[126] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[126] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {PercussivePitchIsActive[127] = true; PercussivePitchX[127] = map(Pitch, 0, 127, -width, width*2); PercussiveVelocityY[127] = map(Velocity, 0, 127, height, 0);  PercussiveVelocityAlpha[127] = Velocity*2;}
//   }
// }

//  void SoundEffectsChannelNoteOn(){//SoundEffects channel
//   if (Channel ==   16) {
//     ChannelIsActive[16] = true;
//     if (Pitch == 0  ) {SoundEffectsPitchIsActive[0]   = true; SoundEffectsPitchX[0]   = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[0]   = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {SoundEffectsPitchIsActive[1]   = true; SoundEffectsPitchX[1]   = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[1]   = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {SoundEffectsPitchIsActive[2]   = true; SoundEffectsPitchX[2]   = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[2]   = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {SoundEffectsPitchIsActive[3]   = true; SoundEffectsPitchX[3]   = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[3]   = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {SoundEffectsPitchIsActive[4]   = true; SoundEffectsPitchX[4]   = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[4]   = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {SoundEffectsPitchIsActive[5]   = true; SoundEffectsPitchX[5]   = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[5]   = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {SoundEffectsPitchIsActive[6]   = true; SoundEffectsPitchX[6]   = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[6]   = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {SoundEffectsPitchIsActive[7]   = true; SoundEffectsPitchX[7]   = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[7]   = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {SoundEffectsPitchIsActive[8]   = true; SoundEffectsPitchX[8]   = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[8]   = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {SoundEffectsPitchIsActive[9]   = true; SoundEffectsPitchX[9]   = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[9]   = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {SoundEffectsPitchIsActive[10]  = true; SoundEffectsPitchX[10]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[10]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {SoundEffectsPitchIsActive[11]  = true; SoundEffectsPitchX[11]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[11]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {SoundEffectsPitchIsActive[12]  = true; SoundEffectsPitchX[12]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[12]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {SoundEffectsPitchIsActive[13]  = true; SoundEffectsPitchX[13]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[13]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {SoundEffectsPitchIsActive[14]  = true; SoundEffectsPitchX[14]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[14]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {SoundEffectsPitchIsActive[15]  = true; SoundEffectsPitchX[15]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[15]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {SoundEffectsPitchIsActive[16]  = true; SoundEffectsPitchX[16]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[16]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {SoundEffectsPitchIsActive[17]  = true; SoundEffectsPitchX[17]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[17]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {SoundEffectsPitchIsActive[18]  = true; SoundEffectsPitchX[18]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[18]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {SoundEffectsPitchIsActive[19]  = true; SoundEffectsPitchX[19]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[19]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {SoundEffectsPitchIsActive[20]  = true; SoundEffectsPitchX[20]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[20]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {SoundEffectsPitchIsActive[21]  = true; SoundEffectsPitchX[21]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[21]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {SoundEffectsPitchIsActive[22]  = true; SoundEffectsPitchX[22]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[22]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {SoundEffectsPitchIsActive[23]  = true; SoundEffectsPitchX[23]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[23]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {SoundEffectsPitchIsActive[24]  = true; SoundEffectsPitchX[24]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[24]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {SoundEffectsPitchIsActive[25]  = true; SoundEffectsPitchX[25]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[25]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {SoundEffectsPitchIsActive[26]  = true; SoundEffectsPitchX[26]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[26]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {SoundEffectsPitchIsActive[27]  = true; SoundEffectsPitchX[27]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[27]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {SoundEffectsPitchIsActive[28]  = true; SoundEffectsPitchX[28]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[28]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {SoundEffectsPitchIsActive[29]  = true; SoundEffectsPitchX[29]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[29]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {SoundEffectsPitchIsActive[30]  = true; SoundEffectsPitchX[30]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[30]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {SoundEffectsPitchIsActive[31]  = true; SoundEffectsPitchX[31]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[31]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {SoundEffectsPitchIsActive[32]  = true; SoundEffectsPitchX[32]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[32]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {SoundEffectsPitchIsActive[33]  = true; SoundEffectsPitchX[33]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[33]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {SoundEffectsPitchIsActive[34]  = true; SoundEffectsPitchX[34]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[34]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {SoundEffectsPitchIsActive[35]  = true; SoundEffectsPitchX[35]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[35]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {SoundEffectsPitchIsActive[36]  = true; SoundEffectsPitchX[36]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[36]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {SoundEffectsPitchIsActive[37]  = true; SoundEffectsPitchX[37]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[37]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {SoundEffectsPitchIsActive[38]  = true; SoundEffectsPitchX[38]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[38]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {SoundEffectsPitchIsActive[39]  = true; SoundEffectsPitchX[39]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[39]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {SoundEffectsPitchIsActive[40]  = true; SoundEffectsPitchX[40]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[40]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {SoundEffectsPitchIsActive[41]  = true; SoundEffectsPitchX[41]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[41]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {SoundEffectsPitchIsActive[42]  = true; SoundEffectsPitchX[42]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[42]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {SoundEffectsPitchIsActive[43]  = true; SoundEffectsPitchX[43]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[43]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {SoundEffectsPitchIsActive[44]  = true; SoundEffectsPitchX[44]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[44]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {SoundEffectsPitchIsActive[45]  = true; SoundEffectsPitchX[45]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[45]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {SoundEffectsPitchIsActive[46]  = true; SoundEffectsPitchX[46]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[46]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {SoundEffectsPitchIsActive[47]  = true; SoundEffectsPitchX[47]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[47]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {SoundEffectsPitchIsActive[48]  = true; SoundEffectsPitchX[48]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[48]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {SoundEffectsPitchIsActive[49]  = true; SoundEffectsPitchX[49]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[49]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {SoundEffectsPitchIsActive[50]  = true; SoundEffectsPitchX[50]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[50]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {SoundEffectsPitchIsActive[51]  = true; SoundEffectsPitchX[51]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[51]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {SoundEffectsPitchIsActive[52]  = true; SoundEffectsPitchX[52]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[52]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {SoundEffectsPitchIsActive[53]  = true; SoundEffectsPitchX[53]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[53]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {SoundEffectsPitchIsActive[54]  = true; SoundEffectsPitchX[54]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[54]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {SoundEffectsPitchIsActive[55]  = true; SoundEffectsPitchX[55]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[55]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {SoundEffectsPitchIsActive[56]  = true; SoundEffectsPitchX[56]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[56]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {SoundEffectsPitchIsActive[57]  = true; SoundEffectsPitchX[57]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[57]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {SoundEffectsPitchIsActive[58]  = true; SoundEffectsPitchX[58]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[58]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {SoundEffectsPitchIsActive[59]  = true; SoundEffectsPitchX[59]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[59]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {SoundEffectsPitchIsActive[60]  = true; SoundEffectsPitchX[60]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[60]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {SoundEffectsPitchIsActive[61]  = true; SoundEffectsPitchX[61]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[61]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {SoundEffectsPitchIsActive[62]  = true; SoundEffectsPitchX[62]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[62]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {SoundEffectsPitchIsActive[63]  = true; SoundEffectsPitchX[63]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[63]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {SoundEffectsPitchIsActive[64]  = true; SoundEffectsPitchX[64]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[64]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {SoundEffectsPitchIsActive[65]  = true; SoundEffectsPitchX[65]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[65]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {SoundEffectsPitchIsActive[66]  = true; SoundEffectsPitchX[66]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[66]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {SoundEffectsPitchIsActive[67]  = true; SoundEffectsPitchX[67]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[67]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {SoundEffectsPitchIsActive[68]  = true; SoundEffectsPitchX[68]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[68]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {SoundEffectsPitchIsActive[69]  = true; SoundEffectsPitchX[69]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[69]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {SoundEffectsPitchIsActive[70]  = true; SoundEffectsPitchX[70]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[70]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {SoundEffectsPitchIsActive[71]  = true; SoundEffectsPitchX[71]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[71]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {SoundEffectsPitchIsActive[72]  = true; SoundEffectsPitchX[72]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[72]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {SoundEffectsPitchIsActive[73]  = true; SoundEffectsPitchX[73]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[73]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {SoundEffectsPitchIsActive[74]  = true; SoundEffectsPitchX[74]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[74]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {SoundEffectsPitchIsActive[75]  = true; SoundEffectsPitchX[75]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[75]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {SoundEffectsPitchIsActive[76]  = true; SoundEffectsPitchX[76]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[76]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {SoundEffectsPitchIsActive[77]  = true; SoundEffectsPitchX[77]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[77]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {SoundEffectsPitchIsActive[78]  = true; SoundEffectsPitchX[78]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[78]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {SoundEffectsPitchIsActive[79]  = true; SoundEffectsPitchX[79]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[79]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {SoundEffectsPitchIsActive[80]  = true; SoundEffectsPitchX[80]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[80]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {SoundEffectsPitchIsActive[81]  = true; SoundEffectsPitchX[81]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[81]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {SoundEffectsPitchIsActive[82]  = true; SoundEffectsPitchX[82]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[82]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {SoundEffectsPitchIsActive[83]  = true; SoundEffectsPitchX[83]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[83]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {SoundEffectsPitchIsActive[84]  = true; SoundEffectsPitchX[84]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[84]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {SoundEffectsPitchIsActive[85]  = true; SoundEffectsPitchX[85]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[85]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {SoundEffectsPitchIsActive[86]  = true; SoundEffectsPitchX[86]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[86]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {SoundEffectsPitchIsActive[87]  = true; SoundEffectsPitchX[87]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[87]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {SoundEffectsPitchIsActive[88]  = true; SoundEffectsPitchX[88]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[88]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {SoundEffectsPitchIsActive[89]  = true; SoundEffectsPitchX[89]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[89]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {SoundEffectsPitchIsActive[90]  = true; SoundEffectsPitchX[90]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[90]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {SoundEffectsPitchIsActive[91]  = true; SoundEffectsPitchX[91]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[91]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {SoundEffectsPitchIsActive[92]  = true; SoundEffectsPitchX[92]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[92]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {SoundEffectsPitchIsActive[93]  = true; SoundEffectsPitchX[93]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[93]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {SoundEffectsPitchIsActive[94]  = true; SoundEffectsPitchX[94]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[94]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {SoundEffectsPitchIsActive[95]  = true; SoundEffectsPitchX[95]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[95]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {SoundEffectsPitchIsActive[96]  = true; SoundEffectsPitchX[96]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[96]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {SoundEffectsPitchIsActive[97]  = true; SoundEffectsPitchX[97]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[97]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {SoundEffectsPitchIsActive[98]  = true; SoundEffectsPitchX[98]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[98]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {SoundEffectsPitchIsActive[99]  = true; SoundEffectsPitchX[99]  = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[99]  = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {SoundEffectsPitchIsActive[100] = true; SoundEffectsPitchX[100] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[100] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {SoundEffectsPitchIsActive[101] = true; SoundEffectsPitchX[101] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[101] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {SoundEffectsPitchIsActive[102] = true; SoundEffectsPitchX[102] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[102] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {SoundEffectsPitchIsActive[103] = true; SoundEffectsPitchX[103] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[103] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {SoundEffectsPitchIsActive[104] = true; SoundEffectsPitchX[104] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[104] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {SoundEffectsPitchIsActive[105] = true; SoundEffectsPitchX[105] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[105] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {SoundEffectsPitchIsActive[106] = true; SoundEffectsPitchX[106] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[106] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {SoundEffectsPitchIsActive[107] = true; SoundEffectsPitchX[107] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[107] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {SoundEffectsPitchIsActive[108] = true; SoundEffectsPitchX[108] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[108] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {SoundEffectsPitchIsActive[109] = true; SoundEffectsPitchX[109] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[109] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {SoundEffectsPitchIsActive[110] = true; SoundEffectsPitchX[110] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[110] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {SoundEffectsPitchIsActive[111] = true; SoundEffectsPitchX[111] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[111] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {SoundEffectsPitchIsActive[112] = true; SoundEffectsPitchX[112] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[112] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {SoundEffectsPitchIsActive[113] = true; SoundEffectsPitchX[113] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[113] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {SoundEffectsPitchIsActive[114] = true; SoundEffectsPitchX[114] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[114] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {SoundEffectsPitchIsActive[115] = true; SoundEffectsPitchX[115] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[115] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {SoundEffectsPitchIsActive[116] = true; SoundEffectsPitchX[116] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[116] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {SoundEffectsPitchIsActive[117] = true; SoundEffectsPitchX[117] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[117] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {SoundEffectsPitchIsActive[118] = true; SoundEffectsPitchX[118] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[118] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {SoundEffectsPitchIsActive[119] = true; SoundEffectsPitchX[119] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[119] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {SoundEffectsPitchIsActive[120] = true; SoundEffectsPitchX[120] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[120] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {SoundEffectsPitchIsActive[121] = true; SoundEffectsPitchX[121] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[121] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {SoundEffectsPitchIsActive[122] = true; SoundEffectsPitchX[122] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[122] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {SoundEffectsPitchIsActive[123] = true; SoundEffectsPitchX[123] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[123] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {SoundEffectsPitchIsActive[124] = true; SoundEffectsPitchX[124] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[124] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {SoundEffectsPitchIsActive[125] = true; SoundEffectsPitchX[125] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[125] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {SoundEffectsPitchIsActive[126] = true; SoundEffectsPitchX[126] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[126] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {SoundEffectsPitchIsActive[127] = true; SoundEffectsPitchX[127] = map(Pitch, 0, 127, -width, width*2); SoundEffectsVelocityY[127] = map(Velocity, 0, 127, height, 0);  SoundEffectsVelocityAlpha[127] = Velocity*2;}
//   }
// }

//  void PercussionChannelNoteOn(){//Percussion channel
//   if (Channel ==   10) {
//     ChannelIsActive[10] = true;
//     if (Pitch == 0  ) {PercussionPitchIsActive[0]   = true; PercussionPitchX[0]   = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[0]   = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[0]   = Velocity*2;}
//     if (Pitch == 1  ) {PercussionPitchIsActive[1]   = true; PercussionPitchX[1]   = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[1]   = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[1]   = Velocity*2;}
//     if (Pitch == 2  ) {PercussionPitchIsActive[2]   = true; PercussionPitchX[2]   = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[2]   = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[2]   = Velocity*2;}
//     if (Pitch == 3  ) {PercussionPitchIsActive[3]   = true; PercussionPitchX[3]   = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[3]   = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[3]   = Velocity*2;}
//     if (Pitch == 4  ) {PercussionPitchIsActive[4]   = true; PercussionPitchX[4]   = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[4]   = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[4]   = Velocity*2;}
//     if (Pitch == 5  ) {PercussionPitchIsActive[5]   = true; PercussionPitchX[5]   = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[5]   = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[5]   = Velocity*2;}
//     if (Pitch == 6  ) {PercussionPitchIsActive[6]   = true; PercussionPitchX[6]   = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[6]   = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[6]   = Velocity*2;}
//     if (Pitch == 7  ) {PercussionPitchIsActive[7]   = true; PercussionPitchX[7]   = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[7]   = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[7]   = Velocity*2;}
//     if (Pitch == 8  ) {PercussionPitchIsActive[8]   = true; PercussionPitchX[8]   = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[8]   = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[8]   = Velocity*2;}
//     if (Pitch == 9  ) {PercussionPitchIsActive[9]   = true; PercussionPitchX[9]   = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[9]   = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[9]   = Velocity*2;}
//     if (Pitch == 10 ) {PercussionPitchIsActive[10]  = true; PercussionPitchX[10]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[10]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[10]  = Velocity*2;}
//     if (Pitch == 11 ) {PercussionPitchIsActive[11]  = true; PercussionPitchX[11]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[11]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[11]  = Velocity*2;}
//     if (Pitch == 12 ) {PercussionPitchIsActive[12]  = true; PercussionPitchX[12]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[12]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[12]  = Velocity*2;}
//     if (Pitch == 13 ) {PercussionPitchIsActive[13]  = true; PercussionPitchX[13]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[13]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[13]  = Velocity*2;}
//     if (Pitch == 14 ) {PercussionPitchIsActive[14]  = true; PercussionPitchX[14]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[14]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[14]  = Velocity*2;}
//     if (Pitch == 15 ) {PercussionPitchIsActive[15]  = true; PercussionPitchX[15]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[15]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[15]  = Velocity*2;}
//     if (Pitch == 16 ) {PercussionPitchIsActive[16]  = true; PercussionPitchX[16]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[16]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[16]  = Velocity*2;}
//     if (Pitch == 17 ) {PercussionPitchIsActive[17]  = true; PercussionPitchX[17]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[17]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[17]  = Velocity*2;}
//     if (Pitch == 18 ) {PercussionPitchIsActive[18]  = true; PercussionPitchX[18]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[18]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[18]  = Velocity*2;}
//     if (Pitch == 19 ) {PercussionPitchIsActive[19]  = true; PercussionPitchX[19]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[19]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[19]  = Velocity*2;}
//     if (Pitch == 20 ) {PercussionPitchIsActive[20]  = true; PercussionPitchX[20]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[20]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[20]  = Velocity*2;}
//     if (Pitch == 21 ) {PercussionPitchIsActive[21]  = true; PercussionPitchX[21]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[21]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[21]  = Velocity*2;}
//     if (Pitch == 22 ) {PercussionPitchIsActive[22]  = true; PercussionPitchX[22]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[22]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[22]  = Velocity*2;}
//     if (Pitch == 23 ) {PercussionPitchIsActive[23]  = true; PercussionPitchX[23]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[23]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[23]  = Velocity*2;}
//     if (Pitch == 24 ) {PercussionPitchIsActive[24]  = true; PercussionPitchX[24]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[24]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[24]  = Velocity*2;}
//     if (Pitch == 25 ) {PercussionPitchIsActive[25]  = true; PercussionPitchX[25]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[25]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[25]  = Velocity*2;}
//     if (Pitch == 26 ) {PercussionPitchIsActive[26]  = true; PercussionPitchX[26]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[26]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[26]  = Velocity*2;}
//     if (Pitch == 27 ) {PercussionPitchIsActive[27]  = true; PercussionPitchX[27]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[27]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[27]  = Velocity*2;}
//     if (Pitch == 28 ) {PercussionPitchIsActive[28]  = true; PercussionPitchX[28]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[28]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[28]  = Velocity*2;}
//     if (Pitch == 29 ) {PercussionPitchIsActive[29]  = true; PercussionPitchX[29]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[29]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[29]  = Velocity*2;}
//     if (Pitch == 30 ) {PercussionPitchIsActive[30]  = true; PercussionPitchX[30]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[30]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[30]  = Velocity*2;}
//     if (Pitch == 31 ) {PercussionPitchIsActive[31]  = true; PercussionPitchX[31]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[31]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[31]  = Velocity*2;}
//     if (Pitch == 32 ) {PercussionPitchIsActive[32]  = true; PercussionPitchX[32]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[32]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[32]  = Velocity*2;}
//     if (Pitch == 33 ) {PercussionPitchIsActive[33]  = true; PercussionPitchX[33]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[33]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[33]  = Velocity*2;}
//     if (Pitch == 34 ) {PercussionPitchIsActive[34]  = true; PercussionPitchX[34]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[34]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[34]  = Velocity*2;}
//     if (Pitch == 35 ) {PercussionPitchIsActive[35]  = true; PercussionPitchX[35]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[35]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[35]  = Velocity*2;}
//     if (Pitch == 36 ) {PercussionPitchIsActive[36]  = true; PercussionPitchX[36]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[36]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[36]  = Velocity*2;}
//     if (Pitch == 37 ) {PercussionPitchIsActive[37]  = true; PercussionPitchX[37]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[37]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[37]  = Velocity*2;}
//     if (Pitch == 38 ) {PercussionPitchIsActive[38]  = true; PercussionPitchX[38]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[38]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[38]  = Velocity*2;}
//     if (Pitch == 39 ) {PercussionPitchIsActive[39]  = true; PercussionPitchX[39]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[39]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[39]  = Velocity*2;}
//     if (Pitch == 40 ) {PercussionPitchIsActive[40]  = true; PercussionPitchX[40]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[40]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[40]  = Velocity*2;}
//     if (Pitch == 41 ) {PercussionPitchIsActive[41]  = true; PercussionPitchX[41]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[41]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[41]  = Velocity*2;}
//     if (Pitch == 42 ) {PercussionPitchIsActive[42]  = true; PercussionPitchX[42]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[42]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[42]  = Velocity*2;}
//     if (Pitch == 43 ) {PercussionPitchIsActive[43]  = true; PercussionPitchX[43]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[43]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[43]  = Velocity*2;}
//     if (Pitch == 44 ) {PercussionPitchIsActive[44]  = true; PercussionPitchX[44]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[44]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[44]  = Velocity*2;}
//     if (Pitch == 45 ) {PercussionPitchIsActive[45]  = true; PercussionPitchX[45]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[45]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[45]  = Velocity*2;}
//     if (Pitch == 46 ) {PercussionPitchIsActive[46]  = true; PercussionPitchX[46]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[46]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[46]  = Velocity*2;}
//     if (Pitch == 47 ) {PercussionPitchIsActive[47]  = true; PercussionPitchX[47]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[47]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[47]  = Velocity*2;}
//     if (Pitch == 48 ) {PercussionPitchIsActive[48]  = true; PercussionPitchX[48]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[48]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[48]  = Velocity*2;}
//     if (Pitch == 49 ) {PercussionPitchIsActive[49]  = true; PercussionPitchX[49]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[49]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[49]  = Velocity*2;}
//     if (Pitch == 50 ) {PercussionPitchIsActive[50]  = true; PercussionPitchX[50]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[50]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[50]  = Velocity*2;}
//     if (Pitch == 51 ) {PercussionPitchIsActive[51]  = true; PercussionPitchX[51]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[51]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[51]  = Velocity*2;}
//     if (Pitch == 52 ) {PercussionPitchIsActive[52]  = true; PercussionPitchX[52]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[52]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[52]  = Velocity*2;}
//     if (Pitch == 53 ) {PercussionPitchIsActive[53]  = true; PercussionPitchX[53]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[53]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[53]  = Velocity*2;}
//     if (Pitch == 54 ) {PercussionPitchIsActive[54]  = true; PercussionPitchX[54]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[54]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[54]  = Velocity*2;}
//     if (Pitch == 55 ) {PercussionPitchIsActive[55]  = true; PercussionPitchX[55]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[55]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[55]  = Velocity*2;}
//     if (Pitch == 56 ) {PercussionPitchIsActive[56]  = true; PercussionPitchX[56]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[56]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[56]  = Velocity*2;}
//     if (Pitch == 57 ) {PercussionPitchIsActive[57]  = true; PercussionPitchX[57]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[57]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[57]  = Velocity*2;}
//     if (Pitch == 58 ) {PercussionPitchIsActive[58]  = true; PercussionPitchX[58]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[58]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[58]  = Velocity*2;}
//     if (Pitch == 59 ) {PercussionPitchIsActive[59]  = true; PercussionPitchX[59]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[59]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[59]  = Velocity*2;}
//     if (Pitch == 60 ) {PercussionPitchIsActive[60]  = true; PercussionPitchX[60]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[60]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[60]  = Velocity*2;}
//     if (Pitch == 61 ) {PercussionPitchIsActive[61]  = true; PercussionPitchX[61]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[61]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[61]  = Velocity*2;}
//     if (Pitch == 62 ) {PercussionPitchIsActive[62]  = true; PercussionPitchX[62]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[62]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[62]  = Velocity*2;}
//     if (Pitch == 63 ) {PercussionPitchIsActive[63]  = true; PercussionPitchX[63]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[63]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[63]  = Velocity*2;}
//     if (Pitch == 64 ) {PercussionPitchIsActive[64]  = true; PercussionPitchX[64]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[64]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[64]  = Velocity*2;}
//     if (Pitch == 65 ) {PercussionPitchIsActive[65]  = true; PercussionPitchX[65]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[65]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[65]  = Velocity*2;}
//     if (Pitch == 66 ) {PercussionPitchIsActive[66]  = true; PercussionPitchX[66]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[66]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[66]  = Velocity*2;}
//     if (Pitch == 67 ) {PercussionPitchIsActive[67]  = true; PercussionPitchX[67]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[67]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[67]  = Velocity*2;}
//     if (Pitch == 68 ) {PercussionPitchIsActive[68]  = true; PercussionPitchX[68]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[68]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[68]  = Velocity*2;}
//     if (Pitch == 69 ) {PercussionPitchIsActive[69]  = true; PercussionPitchX[69]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[69]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[69]  = Velocity*2;}
//     if (Pitch == 70 ) {PercussionPitchIsActive[70]  = true; PercussionPitchX[70]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[70]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[70]  = Velocity*2;}
//     if (Pitch == 71 ) {PercussionPitchIsActive[71]  = true; PercussionPitchX[71]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[71]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[71]  = Velocity*2;}
//     if (Pitch == 72 ) {PercussionPitchIsActive[72]  = true; PercussionPitchX[72]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[72]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[72]  = Velocity*2;}
//     if (Pitch == 73 ) {PercussionPitchIsActive[73]  = true; PercussionPitchX[73]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[73]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[73]  = Velocity*2;}
//     if (Pitch == 74 ) {PercussionPitchIsActive[74]  = true; PercussionPitchX[74]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[74]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[74]  = Velocity*2;}
//     if (Pitch == 75 ) {PercussionPitchIsActive[75]  = true; PercussionPitchX[75]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[75]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[75]  = Velocity*2;}
//     if (Pitch == 76 ) {PercussionPitchIsActive[76]  = true; PercussionPitchX[76]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[76]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[76]  = Velocity*2;}
//     if (Pitch == 77 ) {PercussionPitchIsActive[77]  = true; PercussionPitchX[77]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[77]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[77]  = Velocity*2;}
//     if (Pitch == 78 ) {PercussionPitchIsActive[78]  = true; PercussionPitchX[78]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[78]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[78]  = Velocity*2;}
//     if (Pitch == 79 ) {PercussionPitchIsActive[79]  = true; PercussionPitchX[79]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[79]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[79]  = Velocity*2;}
//     if (Pitch == 80 ) {PercussionPitchIsActive[80]  = true; PercussionPitchX[80]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[80]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[80]  = Velocity*2;}
//     if (Pitch == 81 ) {PercussionPitchIsActive[81]  = true; PercussionPitchX[81]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[81]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[81]  = Velocity*2;}
//     if (Pitch == 82 ) {PercussionPitchIsActive[82]  = true; PercussionPitchX[82]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[82]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[82]  = Velocity*2;}
//     if (Pitch == 83 ) {PercussionPitchIsActive[83]  = true; PercussionPitchX[83]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[83]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[83]  = Velocity*2;}
//     if (Pitch == 84 ) {PercussionPitchIsActive[84]  = true; PercussionPitchX[84]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[84]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[84]  = Velocity*2;}
//     if (Pitch == 85 ) {PercussionPitchIsActive[85]  = true; PercussionPitchX[85]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[85]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[85]  = Velocity*2;}
//     if (Pitch == 86 ) {PercussionPitchIsActive[86]  = true; PercussionPitchX[86]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[86]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[86]  = Velocity*2;}
//     if (Pitch == 87 ) {PercussionPitchIsActive[87]  = true; PercussionPitchX[87]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[87]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[87]  = Velocity*2;}
//     if (Pitch == 88 ) {PercussionPitchIsActive[88]  = true; PercussionPitchX[88]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[88]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[88]  = Velocity*2;}
//     if (Pitch == 89 ) {PercussionPitchIsActive[89]  = true; PercussionPitchX[89]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[89]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[89]  = Velocity*2;}
//     if (Pitch == 90 ) {PercussionPitchIsActive[90]  = true; PercussionPitchX[90]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[90]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[90]  = Velocity*2;}
//     if (Pitch == 91 ) {PercussionPitchIsActive[91]  = true; PercussionPitchX[91]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[91]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[91]  = Velocity*2;}
//     if (Pitch == 92 ) {PercussionPitchIsActive[92]  = true; PercussionPitchX[92]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[92]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[92]  = Velocity*2;}
//     if (Pitch == 93 ) {PercussionPitchIsActive[93]  = true; PercussionPitchX[93]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[93]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[93]  = Velocity*2;}
//     if (Pitch == 94 ) {PercussionPitchIsActive[94]  = true; PercussionPitchX[94]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[94]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[94]  = Velocity*2;}
//     if (Pitch == 95 ) {PercussionPitchIsActive[95]  = true; PercussionPitchX[95]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[95]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[95]  = Velocity*2;}
//     if (Pitch == 96 ) {PercussionPitchIsActive[96]  = true; PercussionPitchX[96]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[96]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[96]  = Velocity*2;}
//     if (Pitch == 97 ) {PercussionPitchIsActive[97]  = true; PercussionPitchX[97]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[97]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[97]  = Velocity*2;}
//     if (Pitch == 98 ) {PercussionPitchIsActive[98]  = true; PercussionPitchX[98]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[98]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[98]  = Velocity*2;}
//     if (Pitch == 99 ) {PercussionPitchIsActive[99]  = true; PercussionPitchX[99]  = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[99]  = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[99]  = Velocity*2;}
//     if (Pitch == 100) {PercussionPitchIsActive[100] = true; PercussionPitchX[100] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[100] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[100] = Velocity*2;}
//     if (Pitch == 101) {PercussionPitchIsActive[101] = true; PercussionPitchX[101] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[101] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[101] = Velocity*2;}
//     if (Pitch == 102) {PercussionPitchIsActive[102] = true; PercussionPitchX[102] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[102] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[102] = Velocity*2;}
//     if (Pitch == 103) {PercussionPitchIsActive[103] = true; PercussionPitchX[103] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[103] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[103] = Velocity*2;}
//     if (Pitch == 104) {PercussionPitchIsActive[104] = true; PercussionPitchX[104] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[104] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[104] = Velocity*2;}
//     if (Pitch == 105) {PercussionPitchIsActive[105] = true; PercussionPitchX[105] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[105] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[105] = Velocity*2;}
//     if (Pitch == 106) {PercussionPitchIsActive[106] = true; PercussionPitchX[106] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[106] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[106] = Velocity*2;}
//     if (Pitch == 107) {PercussionPitchIsActive[107] = true; PercussionPitchX[107] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[107] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[107] = Velocity*2;}
//     if (Pitch == 108) {PercussionPitchIsActive[108] = true; PercussionPitchX[108] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[108] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[108] = Velocity*2;}
//     if (Pitch == 109) {PercussionPitchIsActive[109] = true; PercussionPitchX[109] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[109] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[109] = Velocity*2;}
//     if (Pitch == 110) {PercussionPitchIsActive[110] = true; PercussionPitchX[110] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[110] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[110] = Velocity*2;}
//     if (Pitch == 111) {PercussionPitchIsActive[111] = true; PercussionPitchX[111] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[111] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[111] = Velocity*2;}
//     if (Pitch == 112) {PercussionPitchIsActive[112] = true; PercussionPitchX[112] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[112] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[112] = Velocity*2;}
//     if (Pitch == 113) {PercussionPitchIsActive[113] = true; PercussionPitchX[113] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[113] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[113] = Velocity*2;}
//     if (Pitch == 114) {PercussionPitchIsActive[114] = true; PercussionPitchX[114] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[114] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[114] = Velocity*2;}
//     if (Pitch == 115) {PercussionPitchIsActive[115] = true; PercussionPitchX[115] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[115] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[115] = Velocity*2;}
//     if (Pitch == 116) {PercussionPitchIsActive[116] = true; PercussionPitchX[116] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[116] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[116] = Velocity*2;}
//     if (Pitch == 117) {PercussionPitchIsActive[117] = true; PercussionPitchX[117] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[117] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[117] = Velocity*2;}
//     if (Pitch == 118) {PercussionPitchIsActive[118] = true; PercussionPitchX[118] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[118] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[118] = Velocity*2;}
//     if (Pitch == 119) {PercussionPitchIsActive[119] = true; PercussionPitchX[119] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[119] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[119] = Velocity*2;}
//     if (Pitch == 120) {PercussionPitchIsActive[120] = true; PercussionPitchX[120] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[120] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[120] = Velocity*2;}
//     if (Pitch == 121) {PercussionPitchIsActive[121] = true; PercussionPitchX[121] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[121] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[121] = Velocity*2;}
//     if (Pitch == 122) {PercussionPitchIsActive[122] = true; PercussionPitchX[122] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[122] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[122] = Velocity*2;}
//     if (Pitch == 123) {PercussionPitchIsActive[123] = true; PercussionPitchX[123] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[123] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[123] = Velocity*2;}
//     if (Pitch == 124) {PercussionPitchIsActive[124] = true; PercussionPitchX[124] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[124] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[124] = Velocity*2;}
//     if (Pitch == 125) {PercussionPitchIsActive[125] = true; PercussionPitchX[125] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[125] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[125] = Velocity*2;}
//     if (Pitch == 126) {PercussionPitchIsActive[126] = true; PercussionPitchX[126] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[126] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[126] = Velocity*2;}
//     if (Pitch == 127) {PercussionPitchIsActive[127] = true; PercussionPitchX[127] = map(Pitch, 0, 127, -width, width*2); PercussionVelocityY[127] = map(Velocity, 0, 127, height, 0);  PercussionVelocityAlpha[127] = Velocity*2;}
//   }
// }

void PianoChannelNoteOff(){
if (Channel ==   0) {
    if (Pitch ==   0) {PianoPitchIsActive[0] = false;}
    if (Pitch ==   1) {PianoPitchIsActive[1] = false;}
    if (Pitch ==   2) {PianoPitchIsActive[2] = false;}
    if (Pitch ==   3) {PianoPitchIsActive[3] = false;}
    if (Pitch ==   4) {PianoPitchIsActive[4] = false;}
    if (Pitch ==   5) {PianoPitchIsActive[5] = false;}
    if (Pitch ==   6) {PianoPitchIsActive[6] = false;}
    if (Pitch ==   7) {PianoPitchIsActive[7] = false;}
    if (Pitch ==   8) {PianoPitchIsActive[8] = false;}
    if (Pitch ==   9) {PianoPitchIsActive[9] = false;}
    if (Pitch ==  10) {PianoPitchIsActive[10] = false;}
    if (Pitch ==  11) {PianoPitchIsActive[11] = false;}
    if (Pitch ==  12) {PianoPitchIsActive[12] = false;}
    if (Pitch ==  13) {PianoPitchIsActive[13] = false;}
    if (Pitch ==  14) {PianoPitchIsActive[14] = false;}
    if (Pitch ==  15) {PianoPitchIsActive[15] = false;}
    if (Pitch ==  16) {PianoPitchIsActive[16] = false;}
    if (Pitch ==  17) {PianoPitchIsActive[17] = false;}
    if (Pitch ==  18) {PianoPitchIsActive[18] = false;}
    if (Pitch ==  19) {PianoPitchIsActive[19] = false;}
    if (Pitch ==  20) {PianoPitchIsActive[20] = false;}
    if (Pitch ==  21) {PianoPitchIsActive[21] = false;}
    if (Pitch ==  22) {PianoPitchIsActive[22] = false;}
    if (Pitch ==  23) {PianoPitchIsActive[23] = false;}
    if (Pitch ==  24) {PianoPitchIsActive[24] = false;}
    if (Pitch ==  25) {PianoPitchIsActive[25] = false;}
    if (Pitch ==  26) {PianoPitchIsActive[26] = false;}
    if (Pitch ==  27) {PianoPitchIsActive[27] = false;}
    if (Pitch ==  28) {PianoPitchIsActive[28] = false;}
    if (Pitch ==  29) {PianoPitchIsActive[29] = false;}
    if (Pitch ==  30) {PianoPitchIsActive[30] = false;}
    if (Pitch ==  31) {PianoPitchIsActive[31] = false;}
    if (Pitch ==  32) {PianoPitchIsActive[32] = false;}
    if (Pitch ==  33) {PianoPitchIsActive[33] = false;}
    if (Pitch ==  34) {PianoPitchIsActive[34] = false;}
    if (Pitch ==  35) {PianoPitchIsActive[35] = false;}
    if (Pitch ==  36) {PianoPitchIsActive[36] = false;}
    if (Pitch ==  37) {PianoPitchIsActive[37] = false;}
    if (Pitch ==  38) {PianoPitchIsActive[38] = false;}
    if (Pitch ==  39) {PianoPitchIsActive[39] = false;}
    if (Pitch ==  40) {PianoPitchIsActive[40] = false;}
    if (Pitch ==  41) {PianoPitchIsActive[41] = false;}
    if (Pitch ==  42) {PianoPitchIsActive[42] = false;}
    if (Pitch ==  43) {PianoPitchIsActive[43] = false;}
    if (Pitch ==  44) {PianoPitchIsActive[44] = false;}
    if (Pitch ==  45) {PianoPitchIsActive[45] = false;}
    if (Pitch ==  46) {PianoPitchIsActive[46] = false;}
    if (Pitch ==  47) {PianoPitchIsActive[47] = false;}
    if (Pitch ==  48) {PianoPitchIsActive[48] = false;}
    if (Pitch ==  49) {PianoPitchIsActive[49] = false;}
    if (Pitch ==  50) {PianoPitchIsActive[50] = false;}
    if (Pitch ==  51) {PianoPitchIsActive[51] = false;}
    if (Pitch ==  52) {PianoPitchIsActive[52] = false;}
    if (Pitch ==  53) {PianoPitchIsActive[53] = false;}
    if (Pitch ==  54) {PianoPitchIsActive[54] = false;}
    if (Pitch ==  55) {PianoPitchIsActive[55] = false;}
    if (Pitch ==  56) {PianoPitchIsActive[56] = false;}
    if (Pitch ==  57) {PianoPitchIsActive[57] = false;}
    if (Pitch ==  58) {PianoPitchIsActive[58] = false;}
    if (Pitch ==  59) {PianoPitchIsActive[59] = false;}
    if (Pitch ==  60) {PianoPitchIsActive[60] = false;}
    if (Pitch ==  61) {PianoPitchIsActive[61] = false;}
    if (Pitch ==  62) {PianoPitchIsActive[62] = false;}
    if (Pitch ==  63) {PianoPitchIsActive[63] = false;}
    if (Pitch ==  64) {PianoPitchIsActive[64] = false;}
    if (Pitch ==  65) {PianoPitchIsActive[65] = false;}
    if (Pitch ==  66) {PianoPitchIsActive[66] = false;}
    if (Pitch ==  67) {PianoPitchIsActive[67] = false;}
    if (Pitch ==  68) {PianoPitchIsActive[68] = false;}
    if (Pitch ==  69) {PianoPitchIsActive[69] = false;}
    if (Pitch ==  70) {PianoPitchIsActive[70] = false;}
    if (Pitch ==  71) {PianoPitchIsActive[71] = false;}
    if (Pitch ==  72) {PianoPitchIsActive[72] = false;}
    if (Pitch ==  73) {PianoPitchIsActive[73] = false;}
    if (Pitch ==  74) {PianoPitchIsActive[74] = false;}
    if (Pitch ==  75) {PianoPitchIsActive[75] = false;}
    if (Pitch ==  76) {PianoPitchIsActive[76] = false;}
    if (Pitch ==  77) {PianoPitchIsActive[77] = false;}
    if (Pitch ==  78) {PianoPitchIsActive[78] = false;}
    if (Pitch ==  79) {PianoPitchIsActive[79] = false;}
    if (Pitch ==  80) {PianoPitchIsActive[80] = false;}
    if (Pitch ==  81) {PianoPitchIsActive[81] = false;}
    if (Pitch ==  82) {PianoPitchIsActive[82] = false;}
    if (Pitch ==  83) {PianoPitchIsActive[83] = false;}
    if (Pitch ==  84) {PianoPitchIsActive[84] = false;}
    if (Pitch ==  85) {PianoPitchIsActive[85] = false;}
    if (Pitch ==  86) {PianoPitchIsActive[86] = false;}
    if (Pitch ==  87) {PianoPitchIsActive[87] = false;}
    if (Pitch ==  88) {PianoPitchIsActive[88] = false;}
    if (Pitch ==  89) {PianoPitchIsActive[89] = false;}
    if (Pitch ==  90) {PianoPitchIsActive[90] = false;}
    if (Pitch ==  91) {PianoPitchIsActive[91] = false;}
    if (Pitch ==  92) {PianoPitchIsActive[92] = false;}
    if (Pitch ==  93) {PianoPitchIsActive[93] = false;}
    if (Pitch ==  94) {PianoPitchIsActive[94] = false;}
    if (Pitch ==  95) {PianoPitchIsActive[95] = false;}
    if (Pitch ==  96) {PianoPitchIsActive[96] = false;}
    if (Pitch ==  97) {PianoPitchIsActive[97] = false;}
    if (Pitch ==  98) {PianoPitchIsActive[98] = false;}
    if (Pitch ==  99) {PianoPitchIsActive[99] = false;}
    if (Pitch == 100) {PianoPitchIsActive[100] = false;}
    if (Pitch == 101) {PianoPitchIsActive[101] = false;}
    if (Pitch == 102) {PianoPitchIsActive[102] = false;}
    if (Pitch == 103) {PianoPitchIsActive[103] = false;}
    if (Pitch == 104) {PianoPitchIsActive[104] = false;}
    if (Pitch == 105) {PianoPitchIsActive[105] = false;}
    if (Pitch == 106) {PianoPitchIsActive[106] = false;}
    if (Pitch == 107) {PianoPitchIsActive[107] = false;}
    if (Pitch == 108) {PianoPitchIsActive[108] = false;}
    if (Pitch == 109) {PianoPitchIsActive[109] = false;}
    if (Pitch == 110) {PianoPitchIsActive[110] = false;}
    if (Pitch == 111) {PianoPitchIsActive[111] = false;}
    if (Pitch == 112) {PianoPitchIsActive[112] = false;}
    if (Pitch == 113) {PianoPitchIsActive[113] = false;}
    if (Pitch == 114) {PianoPitchIsActive[114] = false;}
    if (Pitch == 115) {PianoPitchIsActive[115] = false;}
    if (Pitch == 116) {PianoPitchIsActive[116] = false;}
    if (Pitch == 117) {PianoPitchIsActive[117] = false;}
    if (Pitch == 118) {PianoPitchIsActive[118] = false;}
    if (Pitch == 119) {PianoPitchIsActive[119] = false;}
    if (Pitch == 120) {PianoPitchIsActive[120] = false;}
    if (Pitch == 121) {PianoPitchIsActive[121] = false;}
    if (Pitch == 122) {PianoPitchIsActive[122] = false;}
    if (Pitch == 123) {PianoPitchIsActive[123] = false;}
    if (Pitch == 124) {PianoPitchIsActive[124] = false;}
    if (Pitch == 125) {PianoPitchIsActive[125] = false;}
    if (Pitch == 126) {PianoPitchIsActive[126] = false;}
    if (Pitch == 127) {PianoPitchIsActive[127] = false;}
  }
}

void ChromaticPercussionChannelNoteOff(){
if (Channel ==   1) {
    if (Pitch ==   0) {ChromaticPercussionPitchIsActive[0] = false;}
    if (Pitch ==   1) {ChromaticPercussionPitchIsActive[1] = false;}
    if (Pitch ==   2) {ChromaticPercussionPitchIsActive[2] = false;}
    if (Pitch ==   3) {ChromaticPercussionPitchIsActive[3] = false;}
    if (Pitch ==   4) {ChromaticPercussionPitchIsActive[4] = false;}
    if (Pitch ==   5) {ChromaticPercussionPitchIsActive[5] = false;}
    if (Pitch ==   6) {ChromaticPercussionPitchIsActive[6] = false;}
    if (Pitch ==   7) {ChromaticPercussionPitchIsActive[7] = false;}
    if (Pitch ==   8) {ChromaticPercussionPitchIsActive[8] = false;}
    if (Pitch ==   9) {ChromaticPercussionPitchIsActive[9] = false;}
    if (Pitch ==  10) {ChromaticPercussionPitchIsActive[10] = false;}
    if (Pitch ==  11) {ChromaticPercussionPitchIsActive[11] = false;}
    if (Pitch ==  12) {ChromaticPercussionPitchIsActive[12] = false;}
    if (Pitch ==  13) {ChromaticPercussionPitchIsActive[13] = false;}
    if (Pitch ==  14) {ChromaticPercussionPitchIsActive[14] = false;}
    if (Pitch ==  15) {ChromaticPercussionPitchIsActive[15] = false;}
    if (Pitch ==  16) {ChromaticPercussionPitchIsActive[16] = false;}
    if (Pitch ==  17) {ChromaticPercussionPitchIsActive[17] = false;}
    if (Pitch ==  18) {ChromaticPercussionPitchIsActive[18] = false;}
    if (Pitch ==  19) {ChromaticPercussionPitchIsActive[19] = false;}
    if (Pitch ==  20) {ChromaticPercussionPitchIsActive[20] = false;}
    if (Pitch ==  21) {ChromaticPercussionPitchIsActive[21] = false;}
    if (Pitch ==  22) {ChromaticPercussionPitchIsActive[22] = false;}
    if (Pitch ==  23) {ChromaticPercussionPitchIsActive[23] = false;}
    if (Pitch ==  24) {ChromaticPercussionPitchIsActive[24] = false;}
    if (Pitch ==  25) {ChromaticPercussionPitchIsActive[25] = false;}
    if (Pitch ==  26) {ChromaticPercussionPitchIsActive[26] = false;}
    if (Pitch ==  27) {ChromaticPercussionPitchIsActive[27] = false;}
    if (Pitch ==  28) {ChromaticPercussionPitchIsActive[28] = false;}
    if (Pitch ==  29) {ChromaticPercussionPitchIsActive[29] = false;}
    if (Pitch ==  30) {ChromaticPercussionPitchIsActive[30] = false;}
    if (Pitch ==  31) {ChromaticPercussionPitchIsActive[31] = false;}
    if (Pitch ==  32) {ChromaticPercussionPitchIsActive[32] = false;}
    if (Pitch ==  33) {ChromaticPercussionPitchIsActive[33] = false;}
    if (Pitch ==  34) {ChromaticPercussionPitchIsActive[34] = false;}
    if (Pitch ==  35) {ChromaticPercussionPitchIsActive[35] = false;}
    if (Pitch ==  36) {ChromaticPercussionPitchIsActive[36] = false;}
    if (Pitch ==  37) {ChromaticPercussionPitchIsActive[37] = false;}
    if (Pitch ==  38) {ChromaticPercussionPitchIsActive[38] = false;}
    if (Pitch ==  39) {ChromaticPercussionPitchIsActive[39] = false;}
    if (Pitch ==  40) {ChromaticPercussionPitchIsActive[40] = false;}
    if (Pitch ==  41) {ChromaticPercussionPitchIsActive[41] = false;}
    if (Pitch ==  42) {ChromaticPercussionPitchIsActive[42] = false;}
    if (Pitch ==  43) {ChromaticPercussionPitchIsActive[43] = false;}
    if (Pitch ==  44) {ChromaticPercussionPitchIsActive[44] = false;}
    if (Pitch ==  45) {ChromaticPercussionPitchIsActive[45] = false;}
    if (Pitch ==  46) {ChromaticPercussionPitchIsActive[46] = false;}
    if (Pitch ==  47) {ChromaticPercussionPitchIsActive[47] = false;}
    if (Pitch ==  48) {ChromaticPercussionPitchIsActive[48] = false;}
    if (Pitch ==  49) {ChromaticPercussionPitchIsActive[49] = false;}
    if (Pitch ==  50) {ChromaticPercussionPitchIsActive[50] = false;}
    if (Pitch ==  51) {ChromaticPercussionPitchIsActive[51] = false;}
    if (Pitch ==  52) {ChromaticPercussionPitchIsActive[52] = false;}
    if (Pitch ==  53) {ChromaticPercussionPitchIsActive[53] = false;}
    if (Pitch ==  54) {ChromaticPercussionPitchIsActive[54] = false;}
    if (Pitch ==  55) {ChromaticPercussionPitchIsActive[55] = false;}
    if (Pitch ==  56) {ChromaticPercussionPitchIsActive[56] = false;}
    if (Pitch ==  57) {ChromaticPercussionPitchIsActive[57] = false;}
    if (Pitch ==  58) {ChromaticPercussionPitchIsActive[58] = false;}
    if (Pitch ==  59) {ChromaticPercussionPitchIsActive[59] = false;}
    if (Pitch ==  60) {ChromaticPercussionPitchIsActive[60] = false;}
    if (Pitch ==  61) {ChromaticPercussionPitchIsActive[61] = false;}
    if (Pitch ==  62) {ChromaticPercussionPitchIsActive[62] = false;}
    if (Pitch ==  63) {ChromaticPercussionPitchIsActive[63] = false;}
    if (Pitch ==  64) {ChromaticPercussionPitchIsActive[64] = false;}
    if (Pitch ==  65) {ChromaticPercussionPitchIsActive[65] = false;}
    if (Pitch ==  66) {ChromaticPercussionPitchIsActive[66] = false;}
    if (Pitch ==  67) {ChromaticPercussionPitchIsActive[67] = false;}
    if (Pitch ==  68) {ChromaticPercussionPitchIsActive[68] = false;}
    if (Pitch ==  69) {ChromaticPercussionPitchIsActive[69] = false;}
    if (Pitch ==  70) {ChromaticPercussionPitchIsActive[70] = false;}
    if (Pitch ==  71) {ChromaticPercussionPitchIsActive[71] = false;}
    if (Pitch ==  72) {ChromaticPercussionPitchIsActive[72] = false;}
    if (Pitch ==  73) {ChromaticPercussionPitchIsActive[73] = false;}
    if (Pitch ==  74) {ChromaticPercussionPitchIsActive[74] = false;}
    if (Pitch ==  75) {ChromaticPercussionPitchIsActive[75] = false;}
    if (Pitch ==  76) {ChromaticPercussionPitchIsActive[76] = false;}
    if (Pitch ==  77) {ChromaticPercussionPitchIsActive[77] = false;}
    if (Pitch ==  78) {ChromaticPercussionPitchIsActive[78] = false;}
    if (Pitch ==  79) {ChromaticPercussionPitchIsActive[79] = false;}
    if (Pitch ==  80) {ChromaticPercussionPitchIsActive[80] = false;}
    if (Pitch ==  81) {ChromaticPercussionPitchIsActive[81] = false;}
    if (Pitch ==  82) {ChromaticPercussionPitchIsActive[82] = false;}
    if (Pitch ==  83) {ChromaticPercussionPitchIsActive[83] = false;}
    if (Pitch ==  84) {ChromaticPercussionPitchIsActive[84] = false;}
    if (Pitch ==  85) {ChromaticPercussionPitchIsActive[85] = false;}
    if (Pitch ==  86) {ChromaticPercussionPitchIsActive[86] = false;}
    if (Pitch ==  87) {ChromaticPercussionPitchIsActive[87] = false;}
    if (Pitch ==  88) {ChromaticPercussionPitchIsActive[88] = false;}
    if (Pitch ==  89) {ChromaticPercussionPitchIsActive[89] = false;}
    if (Pitch ==  90) {ChromaticPercussionPitchIsActive[90] = false;}
    if (Pitch ==  91) {ChromaticPercussionPitchIsActive[91] = false;}
    if (Pitch ==  92) {ChromaticPercussionPitchIsActive[92] = false;}
    if (Pitch ==  93) {ChromaticPercussionPitchIsActive[93] = false;}
    if (Pitch ==  94) {ChromaticPercussionPitchIsActive[94] = false;}
    if (Pitch ==  95) {ChromaticPercussionPitchIsActive[95] = false;}
    if (Pitch ==  96) {ChromaticPercussionPitchIsActive[96] = false;}
    if (Pitch ==  97) {ChromaticPercussionPitchIsActive[97] = false;}
    if (Pitch ==  98) {ChromaticPercussionPitchIsActive[98] = false;}
    if (Pitch ==  99) {ChromaticPercussionPitchIsActive[99] = false;}
    if (Pitch == 100) {ChromaticPercussionPitchIsActive[100] = false;}
    if (Pitch == 101) {ChromaticPercussionPitchIsActive[101] = false;}
    if (Pitch == 102) {ChromaticPercussionPitchIsActive[102] = false;}
    if (Pitch == 103) {ChromaticPercussionPitchIsActive[103] = false;}
    if (Pitch == 104) {ChromaticPercussionPitchIsActive[104] = false;}
    if (Pitch == 105) {ChromaticPercussionPitchIsActive[105] = false;}
    if (Pitch == 106) {ChromaticPercussionPitchIsActive[106] = false;}
    if (Pitch == 107) {ChromaticPercussionPitchIsActive[107] = false;}
    if (Pitch == 108) {ChromaticPercussionPitchIsActive[108] = false;}
    if (Pitch == 109) {ChromaticPercussionPitchIsActive[109] = false;}
    if (Pitch == 110) {ChromaticPercussionPitchIsActive[110] = false;}
    if (Pitch == 111) {ChromaticPercussionPitchIsActive[111] = false;}
    if (Pitch == 112) {ChromaticPercussionPitchIsActive[112] = false;}
    if (Pitch == 113) {ChromaticPercussionPitchIsActive[113] = false;}
    if (Pitch == 114) {ChromaticPercussionPitchIsActive[114] = false;}
    if (Pitch == 115) {ChromaticPercussionPitchIsActive[115] = false;}
    if (Pitch == 116) {ChromaticPercussionPitchIsActive[116] = false;}
    if (Pitch == 117) {ChromaticPercussionPitchIsActive[117] = false;}
    if (Pitch == 118) {ChromaticPercussionPitchIsActive[118] = false;}
    if (Pitch == 119) {ChromaticPercussionPitchIsActive[119] = false;}
    if (Pitch == 120) {ChromaticPercussionPitchIsActive[120] = false;}
    if (Pitch == 121) {ChromaticPercussionPitchIsActive[121] = false;}
    if (Pitch == 122) {ChromaticPercussionPitchIsActive[122] = false;}
    if (Pitch == 123) {ChromaticPercussionPitchIsActive[123] = false;}
    if (Pitch == 124) {ChromaticPercussionPitchIsActive[124] = false;}
    if (Pitch == 125) {ChromaticPercussionPitchIsActive[125] = false;}
    if (Pitch == 126) {ChromaticPercussionPitchIsActive[126] = false;}
    if (Pitch == 127) {ChromaticPercussionPitchIsActive[127] = false;}
  }
}

void OrganChannelNoteOff(){
  if (Channel ==   2) {
    if (Pitch ==   0) {OrganPitchIsActive[0] = false;}
    if (Pitch ==   1) {OrganPitchIsActive[1] = false;}
    if (Pitch ==   2) {OrganPitchIsActive[2] = false;}
    if (Pitch ==   3) {OrganPitchIsActive[3] = false;}
    if (Pitch ==   4) {OrganPitchIsActive[4] = false;}
    if (Pitch ==   5) {OrganPitchIsActive[5] = false;}
    if (Pitch ==   6) {OrganPitchIsActive[6] = false;}
    if (Pitch ==   7) {OrganPitchIsActive[7] = false;}
    if (Pitch ==   8) {OrganPitchIsActive[8] = false;}
    if (Pitch ==   9) {OrganPitchIsActive[9] = false;}
    if (Pitch ==  10) {OrganPitchIsActive[10] = false;}
    if (Pitch ==  11) {OrganPitchIsActive[11] = false;}
    if (Pitch ==  12) {OrganPitchIsActive[12] = false;}
    if (Pitch ==  13) {OrganPitchIsActive[13] = false;}
    if (Pitch ==  14) {OrganPitchIsActive[14] = false;}
    if (Pitch ==  15) {OrganPitchIsActive[15] = false;}
    if (Pitch ==  16) {OrganPitchIsActive[16] = false;}
    if (Pitch ==  17) {OrganPitchIsActive[17] = false;}
    if (Pitch ==  18) {OrganPitchIsActive[18] = false;}
    if (Pitch ==  19) {OrganPitchIsActive[19] = false;}
    if (Pitch ==  20) {OrganPitchIsActive[20] = false;}
    if (Pitch ==  21) {OrganPitchIsActive[21] = false;}
    if (Pitch ==  22) {OrganPitchIsActive[22] = false;}
    if (Pitch ==  23) {OrganPitchIsActive[23] = false;}
    if (Pitch ==  24) {OrganPitchIsActive[24] = false;}
    if (Pitch ==  25) {OrganPitchIsActive[25] = false;}
    if (Pitch ==  26) {OrganPitchIsActive[26] = false;}
    if (Pitch ==  27) {OrganPitchIsActive[27] = false;}
    if (Pitch ==  28) {OrganPitchIsActive[28] = false;}
    if (Pitch ==  29) {OrganPitchIsActive[29] = false;}
    if (Pitch ==  30) {OrganPitchIsActive[30] = false;}
    if (Pitch ==  31) {OrganPitchIsActive[31] = false;}
    if (Pitch ==  32) {OrganPitchIsActive[32] = false;}
    if (Pitch ==  33) {OrganPitchIsActive[33] = false;}
    if (Pitch ==  34) {OrganPitchIsActive[34] = false;}
    if (Pitch ==  35) {OrganPitchIsActive[35] = false;}
    if (Pitch ==  36) {OrganPitchIsActive[36] = false;}
    if (Pitch ==  37) {OrganPitchIsActive[37] = false;}
    if (Pitch ==  38) {OrganPitchIsActive[38] = false;}
    if (Pitch ==  39) {OrganPitchIsActive[39] = false;}
    if (Pitch ==  40) {OrganPitchIsActive[40] = false;}
    if (Pitch ==  41) {OrganPitchIsActive[41] = false;}
    if (Pitch ==  42) {OrganPitchIsActive[42] = false;}
    if (Pitch ==  43) {OrganPitchIsActive[43] = false;}
    if (Pitch ==  44) {OrganPitchIsActive[44] = false;}
    if (Pitch ==  45) {OrganPitchIsActive[45] = false;}
    if (Pitch ==  46) {OrganPitchIsActive[46] = false;}
    if (Pitch ==  47) {OrganPitchIsActive[47] = false;}
    if (Pitch ==  48) {OrganPitchIsActive[48] = false;}
    if (Pitch ==  49) {OrganPitchIsActive[49] = false;}
    if (Pitch ==  50) {OrganPitchIsActive[50] = false;}
    if (Pitch ==  51) {OrganPitchIsActive[51] = false;}
    if (Pitch ==  52) {OrganPitchIsActive[52] = false;}
    if (Pitch ==  53) {OrganPitchIsActive[53] = false;}
    if (Pitch ==  54) {OrganPitchIsActive[54] = false;}
    if (Pitch ==  55) {OrganPitchIsActive[55] = false;}
    if (Pitch ==  56) {OrganPitchIsActive[56] = false;}
    if (Pitch ==  57) {OrganPitchIsActive[57] = false;}
    if (Pitch ==  58) {OrganPitchIsActive[58] = false;}
    if (Pitch ==  59) {OrganPitchIsActive[59] = false;}
    if (Pitch ==  60) {OrganPitchIsActive[60] = false;}
    if (Pitch ==  61) {OrganPitchIsActive[61] = false;}
    if (Pitch ==  62) {OrganPitchIsActive[62] = false;}
    if (Pitch ==  63) {OrganPitchIsActive[63] = false;}
    if (Pitch ==  64) {OrganPitchIsActive[64] = false;}
    if (Pitch ==  65) {OrganPitchIsActive[65] = false;}
    if (Pitch ==  66) {OrganPitchIsActive[66] = false;}
    if (Pitch ==  67) {OrganPitchIsActive[67] = false;}
    if (Pitch ==  68) {OrganPitchIsActive[68] = false;}
    if (Pitch ==  69) {OrganPitchIsActive[69] = false;}
    if (Pitch ==  70) {OrganPitchIsActive[70] = false;}
    if (Pitch ==  71) {OrganPitchIsActive[71] = false;}
    if (Pitch ==  72) {OrganPitchIsActive[72] = false;}
    if (Pitch ==  73) {OrganPitchIsActive[73] = false;}
    if (Pitch ==  74) {OrganPitchIsActive[74] = false;}
    if (Pitch ==  75) {OrganPitchIsActive[75] = false;}
    if (Pitch ==  76) {OrganPitchIsActive[76] = false;}
    if (Pitch ==  77) {OrganPitchIsActive[77] = false;}
    if (Pitch ==  78) {OrganPitchIsActive[78] = false;}
    if (Pitch ==  79) {OrganPitchIsActive[79] = false;}
    if (Pitch ==  80) {OrganPitchIsActive[80] = false;}
    if (Pitch ==  81) {OrganPitchIsActive[81] = false;}
    if (Pitch ==  82) {OrganPitchIsActive[82] = false;}
    if (Pitch ==  83) {OrganPitchIsActive[83] = false;}
    if (Pitch ==  84) {OrganPitchIsActive[84] = false;}
    if (Pitch ==  85) {OrganPitchIsActive[85] = false;}
    if (Pitch ==  86) {OrganPitchIsActive[86] = false;}
    if (Pitch ==  87) {OrganPitchIsActive[87] = false;}
    if (Pitch ==  88) {OrganPitchIsActive[88] = false;}
    if (Pitch ==  89) {OrganPitchIsActive[89] = false;}
    if (Pitch ==  90) {OrganPitchIsActive[90] = false;}
    if (Pitch ==  91) {OrganPitchIsActive[91] = false;}
    if (Pitch ==  92) {OrganPitchIsActive[92] = false;}
    if (Pitch ==  93) {OrganPitchIsActive[93] = false;}
    if (Pitch ==  94) {OrganPitchIsActive[94] = false;}
    if (Pitch ==  95) {OrganPitchIsActive[95] = false;}
    if (Pitch ==  96) {OrganPitchIsActive[96] = false;}
    if (Pitch ==  97) {OrganPitchIsActive[97] = false;}
    if (Pitch ==  98) {OrganPitchIsActive[98] = false;}
    if (Pitch ==  99) {OrganPitchIsActive[99] = false;}
    if (Pitch == 100) {OrganPitchIsActive[100] = false;}
    if (Pitch == 101) {OrganPitchIsActive[101] = false;}
    if (Pitch == 102) {OrganPitchIsActive[102] = false;}
    if (Pitch == 103) {OrganPitchIsActive[103] = false;}
    if (Pitch == 104) {OrganPitchIsActive[104] = false;}
    if (Pitch == 105) {OrganPitchIsActive[105] = false;}
    if (Pitch == 106) {OrganPitchIsActive[106] = false;}
    if (Pitch == 107) {OrganPitchIsActive[107] = false;}
    if (Pitch == 108) {OrganPitchIsActive[108] = false;}
    if (Pitch == 109) {OrganPitchIsActive[109] = false;}
    if (Pitch == 110) {OrganPitchIsActive[110] = false;}
    if (Pitch == 111) {OrganPitchIsActive[111] = false;}
    if (Pitch == 112) {OrganPitchIsActive[112] = false;}
    if (Pitch == 113) {OrganPitchIsActive[113] = false;}
    if (Pitch == 114) {OrganPitchIsActive[114] = false;}
    if (Pitch == 115) {OrganPitchIsActive[115] = false;}
    if (Pitch == 116) {OrganPitchIsActive[116] = false;}
    if (Pitch == 117) {OrganPitchIsActive[117] = false;}
    if (Pitch == 118) {OrganPitchIsActive[118] = false;}
    if (Pitch == 119) {OrganPitchIsActive[119] = false;}
    if (Pitch == 120) {OrganPitchIsActive[120] = false;}
    if (Pitch == 121) {OrganPitchIsActive[121] = false;}
    if (Pitch == 122) {OrganPitchIsActive[122] = false;}
    if (Pitch == 123) {OrganPitchIsActive[123] = false;}
    if (Pitch == 124) {OrganPitchIsActive[124] = false;}
    if (Pitch == 125) {OrganPitchIsActive[125] = false;}
    if (Pitch == 126) {OrganPitchIsActive[126] = false;}
    if (Pitch == 127) {OrganPitchIsActive[127] = false;}
  }
}

// void GuitarChannelNoteOff(){
//   if (Channel ==   3) {
//     if (Pitch ==   0) {GuitarPitchIsActive[0] = false;}
//     if (Pitch ==   1) {GuitarPitchIsActive[1] = false;}
//     if (Pitch ==   2) {GuitarPitchIsActive[2] = false;}
//     if (Pitch ==   3) {GuitarPitchIsActive[3] = false;}
//     if (Pitch ==   4) {GuitarPitchIsActive[4] = false;}
//     if (Pitch ==   5) {GuitarPitchIsActive[5] = false;}
//     if (Pitch ==   6) {GuitarPitchIsActive[6] = false;}
//     if (Pitch ==   7) {GuitarPitchIsActive[7] = false;}
//     if (Pitch ==   8) {GuitarPitchIsActive[8] = false;}
//     if (Pitch ==   9) {GuitarPitchIsActive[9] = false;}
//     if (Pitch ==  10) {GuitarPitchIsActive[10] = false;}
//     if (Pitch ==  11) {GuitarPitchIsActive[11] = false;}
//     if (Pitch ==  12) {GuitarPitchIsActive[12] = false;}
//     if (Pitch ==  13) {GuitarPitchIsActive[13] = false;}
//     if (Pitch ==  14) {GuitarPitchIsActive[14] = false;}
//     if (Pitch ==  15) {GuitarPitchIsActive[15] = false;}
//     if (Pitch ==  16) {GuitarPitchIsActive[16] = false;}
//     if (Pitch ==  17) {GuitarPitchIsActive[17] = false;}
//     if (Pitch ==  18) {GuitarPitchIsActive[18] = false;}
//     if (Pitch ==  19) {GuitarPitchIsActive[19] = false;}
//     if (Pitch ==  20) {GuitarPitchIsActive[20] = false;}
//     if (Pitch ==  21) {GuitarPitchIsActive[21] = false;}
//     if (Pitch ==  22) {GuitarPitchIsActive[22] = false;}
//     if (Pitch ==  23) {GuitarPitchIsActive[23] = false;}
//     if (Pitch ==  24) {GuitarPitchIsActive[24] = false;}
//     if (Pitch ==  25) {GuitarPitchIsActive[25] = false;}
//     if (Pitch ==  26) {GuitarPitchIsActive[26] = false;}
//     if (Pitch ==  27) {GuitarPitchIsActive[27] = false;}
//     if (Pitch ==  28) {GuitarPitchIsActive[28] = false;}
//     if (Pitch ==  29) {GuitarPitchIsActive[29] = false;}
//     if (Pitch ==  30) {GuitarPitchIsActive[30] = false;}
//     if (Pitch ==  31) {GuitarPitchIsActive[31] = false;}
//     if (Pitch ==  32) {GuitarPitchIsActive[32] = false;}
//     if (Pitch ==  33) {GuitarPitchIsActive[33] = false;}
//     if (Pitch ==  34) {GuitarPitchIsActive[34] = false;}
//     if (Pitch ==  35) {GuitarPitchIsActive[35] = false;}
//     if (Pitch ==  36) {GuitarPitchIsActive[36] = false;}
//     if (Pitch ==  37) {GuitarPitchIsActive[37] = false;}
//     if (Pitch ==  38) {GuitarPitchIsActive[38] = false;}
//     if (Pitch ==  39) {GuitarPitchIsActive[39] = false;}
//     if (Pitch ==  40) {GuitarPitchIsActive[40] = false;}
//     if (Pitch ==  41) {GuitarPitchIsActive[41] = false;}
//     if (Pitch ==  42) {GuitarPitchIsActive[42] = false;}
//     if (Pitch ==  43) {GuitarPitchIsActive[43] = false;}
//     if (Pitch ==  44) {GuitarPitchIsActive[44] = false;}
//     if (Pitch ==  45) {GuitarPitchIsActive[45] = false;}
//     if (Pitch ==  46) {GuitarPitchIsActive[46] = false;}
//     if (Pitch ==  47) {GuitarPitchIsActive[47] = false;}
//     if (Pitch ==  48) {GuitarPitchIsActive[48] = false;}
//     if (Pitch ==  49) {GuitarPitchIsActive[49] = false;}
//     if (Pitch ==  50) {GuitarPitchIsActive[50] = false;}
//     if (Pitch ==  51) {GuitarPitchIsActive[51] = false;}
//     if (Pitch ==  52) {GuitarPitchIsActive[52] = false;}
//     if (Pitch ==  53) {GuitarPitchIsActive[53] = false;}
//     if (Pitch ==  54) {GuitarPitchIsActive[54] = false;}
//     if (Pitch ==  55) {GuitarPitchIsActive[55] = false;}
//     if (Pitch ==  56) {GuitarPitchIsActive[56] = false;}
//     if (Pitch ==  57) {GuitarPitchIsActive[57] = false;}
//     if (Pitch ==  58) {GuitarPitchIsActive[58] = false;}
//     if (Pitch ==  59) {GuitarPitchIsActive[59] = false;}
//     if (Pitch ==  60) {GuitarPitchIsActive[60] = false;}
//     if (Pitch ==  61) {GuitarPitchIsActive[61] = false;}
//     if (Pitch ==  62) {GuitarPitchIsActive[62] = false;}
//     if (Pitch ==  63) {GuitarPitchIsActive[63] = false;}
//     if (Pitch ==  64) {GuitarPitchIsActive[64] = false;}
//     if (Pitch ==  65) {GuitarPitchIsActive[65] = false;}
//     if (Pitch ==  66) {GuitarPitchIsActive[66] = false;}
//     if (Pitch ==  67) {GuitarPitchIsActive[67] = false;}
//     if (Pitch ==  68) {GuitarPitchIsActive[68] = false;}
//     if (Pitch ==  69) {GuitarPitchIsActive[69] = false;}
//     if (Pitch ==  70) {GuitarPitchIsActive[70] = false;}
//     if (Pitch ==  71) {GuitarPitchIsActive[71] = false;}
//     if (Pitch ==  72) {GuitarPitchIsActive[72] = false;}
//     if (Pitch ==  73) {GuitarPitchIsActive[73] = false;}
//     if (Pitch ==  74) {GuitarPitchIsActive[74] = false;}
//     if (Pitch ==  75) {GuitarPitchIsActive[75] = false;}
//     if (Pitch ==  76) {GuitarPitchIsActive[76] = false;}
//     if (Pitch ==  77) {GuitarPitchIsActive[77] = false;}
//     if (Pitch ==  78) {GuitarPitchIsActive[78] = false;}
//     if (Pitch ==  79) {GuitarPitchIsActive[79] = false;}
//     if (Pitch ==  80) {GuitarPitchIsActive[80] = false;}
//     if (Pitch ==  81) {GuitarPitchIsActive[81] = false;}
//     if (Pitch ==  82) {GuitarPitchIsActive[82] = false;}
//     if (Pitch ==  83) {GuitarPitchIsActive[83] = false;}
//     if (Pitch ==  84) {GuitarPitchIsActive[84] = false;}
//     if (Pitch ==  85) {GuitarPitchIsActive[85] = false;}
//     if (Pitch ==  86) {GuitarPitchIsActive[86] = false;}
//     if (Pitch ==  87) {GuitarPitchIsActive[87] = false;}
//     if (Pitch ==  88) {GuitarPitchIsActive[88] = false;}
//     if (Pitch ==  89) {GuitarPitchIsActive[89] = false;}
//     if (Pitch ==  90) {GuitarPitchIsActive[90] = false;}
//     if (Pitch ==  91) {GuitarPitchIsActive[91] = false;}
//     if (Pitch ==  92) {GuitarPitchIsActive[92] = false;}
//     if (Pitch ==  93) {GuitarPitchIsActive[93] = false;}
//     if (Pitch ==  94) {GuitarPitchIsActive[94] = false;}
//     if (Pitch ==  95) {GuitarPitchIsActive[95] = false;}
//     if (Pitch ==  96) {GuitarPitchIsActive[96] = false;}
//     if (Pitch ==  97) {GuitarPitchIsActive[97] = false;}
//     if (Pitch ==  98) {GuitarPitchIsActive[98] = false;}
//     if (Pitch ==  99) {GuitarPitchIsActive[99] = false;}
//     if (Pitch == 100) {GuitarPitchIsActive[100] = false;}
//     if (Pitch == 101) {GuitarPitchIsActive[101] = false;}
//     if (Pitch == 102) {GuitarPitchIsActive[102] = false;}
//     if (Pitch == 103) {GuitarPitchIsActive[103] = false;}
//     if (Pitch == 104) {GuitarPitchIsActive[104] = false;}
//     if (Pitch == 105) {GuitarPitchIsActive[105] = false;}
//     if (Pitch == 106) {GuitarPitchIsActive[106] = false;}
//     if (Pitch == 107) {GuitarPitchIsActive[107] = false;}
//     if (Pitch == 108) {GuitarPitchIsActive[108] = false;}
//     if (Pitch == 109) {GuitarPitchIsActive[109] = false;}
//     if (Pitch == 110) {GuitarPitchIsActive[110] = false;}
//     if (Pitch == 111) {GuitarPitchIsActive[111] = false;}
//     if (Pitch == 112) {GuitarPitchIsActive[112] = false;}
//     if (Pitch == 113) {GuitarPitchIsActive[113] = false;}
//     if (Pitch == 114) {GuitarPitchIsActive[114] = false;}
//     if (Pitch == 115) {GuitarPitchIsActive[115] = false;}
//     if (Pitch == 116) {GuitarPitchIsActive[116] = false;}
//     if (Pitch == 117) {GuitarPitchIsActive[117] = false;}
//     if (Pitch == 118) {GuitarPitchIsActive[118] = false;}
//     if (Pitch == 119) {GuitarPitchIsActive[119] = false;}
//     if (Pitch == 120) {GuitarPitchIsActive[120] = false;}
//     if (Pitch == 121) {GuitarPitchIsActive[121] = false;}
//     if (Pitch == 122) {GuitarPitchIsActive[122] = false;}
//     if (Pitch == 123) {GuitarPitchIsActive[123] = false;}
//     if (Pitch == 124) {GuitarPitchIsActive[124] = false;}
//     if (Pitch == 125) {GuitarPitchIsActive[125] = false;}
//     if (Pitch == 126) {GuitarPitchIsActive[126] = false;}
//     if (Pitch == 127) {GuitarPitchIsActive[127] = false;}
//   }
// }

// void BassChannelNoteOff(){
//   if (Channel ==   4) {
//     if (Pitch ==   0) {BassPitchIsActive[0] = false;}
//     if (Pitch ==   1) {BassPitchIsActive[1] = false;}
//     if (Pitch ==   2) {BassPitchIsActive[2] = false;}
//     if (Pitch ==   3) {BassPitchIsActive[3] = false;}
//     if (Pitch ==   4) {BassPitchIsActive[4] = false;}
//     if (Pitch ==   5) {BassPitchIsActive[5] = false;}
//     if (Pitch ==   6) {BassPitchIsActive[6] = false;}
//     if (Pitch ==   7) {BassPitchIsActive[7] = false;}
//     if (Pitch ==   8) {BassPitchIsActive[8] = false;}
//     if (Pitch ==   9) {BassPitchIsActive[9] = false;}
//     if (Pitch ==  10) {BassPitchIsActive[10] = false;}
//     if (Pitch ==  11) {BassPitchIsActive[11] = false;}
//     if (Pitch ==  12) {BassPitchIsActive[12] = false;}
//     if (Pitch ==  13) {BassPitchIsActive[13] = false;}
//     if (Pitch ==  14) {BassPitchIsActive[14] = false;}
//     if (Pitch ==  15) {BassPitchIsActive[15] = false;}
//     if (Pitch ==  16) {BassPitchIsActive[16] = false;}
//     if (Pitch ==  17) {BassPitchIsActive[17] = false;}
//     if (Pitch ==  18) {BassPitchIsActive[18] = false;}
//     if (Pitch ==  19) {BassPitchIsActive[19] = false;}
//     if (Pitch ==  20) {BassPitchIsActive[20] = false;}
//     if (Pitch ==  21) {BassPitchIsActive[21] = false;}
//     if (Pitch ==  22) {BassPitchIsActive[22] = false;}
//     if (Pitch ==  23) {BassPitchIsActive[23] = false;}
//     if (Pitch ==  24) {BassPitchIsActive[24] = false;}
//     if (Pitch ==  25) {BassPitchIsActive[25] = false;}
//     if (Pitch ==  26) {BassPitchIsActive[26] = false;}
//     if (Pitch ==  27) {BassPitchIsActive[27] = false;}
//     if (Pitch ==  28) {BassPitchIsActive[28] = false;}
//     if (Pitch ==  29) {BassPitchIsActive[29] = false;}
//     if (Pitch ==  30) {BassPitchIsActive[30] = false;}
//     if (Pitch ==  31) {BassPitchIsActive[31] = false;}
//     if (Pitch ==  32) {BassPitchIsActive[32] = false;}
//     if (Pitch ==  33) {BassPitchIsActive[33] = false;}
//     if (Pitch ==  34) {BassPitchIsActive[34] = false;}
//     if (Pitch ==  35) {BassPitchIsActive[35] = false;}
//     if (Pitch ==  36) {BassPitchIsActive[36] = false;}
//     if (Pitch ==  37) {BassPitchIsActive[37] = false;}
//     if (Pitch ==  38) {BassPitchIsActive[38] = false;}
//     if (Pitch ==  39) {BassPitchIsActive[39] = false;}
//     if (Pitch ==  40) {BassPitchIsActive[40] = false;}
//     if (Pitch ==  41) {BassPitchIsActive[41] = false;}
//     if (Pitch ==  42) {BassPitchIsActive[42] = false;}
//     if (Pitch ==  43) {BassPitchIsActive[43] = false;}
//     if (Pitch ==  44) {BassPitchIsActive[44] = false;}
//     if (Pitch ==  45) {BassPitchIsActive[45] = false;}
//     if (Pitch ==  46) {BassPitchIsActive[46] = false;}
//     if (Pitch ==  47) {BassPitchIsActive[47] = false;}
//     if (Pitch ==  48) {BassPitchIsActive[48] = false;}
//     if (Pitch ==  49) {BassPitchIsActive[49] = false;}
//     if (Pitch ==  50) {BassPitchIsActive[50] = false;}
//     if (Pitch ==  51) {BassPitchIsActive[51] = false;}
//     if (Pitch ==  52) {BassPitchIsActive[52] = false;}
//     if (Pitch ==  53) {BassPitchIsActive[53] = false;}
//     if (Pitch ==  54) {BassPitchIsActive[54] = false;}
//     if (Pitch ==  55) {BassPitchIsActive[55] = false;}
//     if (Pitch ==  56) {BassPitchIsActive[56] = false;}
//     if (Pitch ==  57) {BassPitchIsActive[57] = false;}
//     if (Pitch ==  58) {BassPitchIsActive[58] = false;}
//     if (Pitch ==  59) {BassPitchIsActive[59] = false;}
//     if (Pitch ==  60) {BassPitchIsActive[60] = false;}
//     if (Pitch ==  61) {BassPitchIsActive[61] = false;}
//     if (Pitch ==  62) {BassPitchIsActive[62] = false;}
//     if (Pitch ==  63) {BassPitchIsActive[63] = false;}
//     if (Pitch ==  64) {BassPitchIsActive[64] = false;}
//     if (Pitch ==  65) {BassPitchIsActive[65] = false;}
//     if (Pitch ==  66) {BassPitchIsActive[66] = false;}
//     if (Pitch ==  67) {BassPitchIsActive[67] = false;}
//     if (Pitch ==  68) {BassPitchIsActive[68] = false;}
//     if (Pitch ==  69) {BassPitchIsActive[69] = false;}
//     if (Pitch ==  70) {BassPitchIsActive[70] = false;}
//     if (Pitch ==  71) {BassPitchIsActive[71] = false;}
//     if (Pitch ==  72) {BassPitchIsActive[72] = false;}
//     if (Pitch ==  73) {BassPitchIsActive[73] = false;}
//     if (Pitch ==  74) {BassPitchIsActive[74] = false;}
//     if (Pitch ==  75) {BassPitchIsActive[75] = false;}
//     if (Pitch ==  76) {BassPitchIsActive[76] = false;}
//     if (Pitch ==  77) {BassPitchIsActive[77] = false;}
//     if (Pitch ==  78) {BassPitchIsActive[78] = false;}
//     if (Pitch ==  79) {BassPitchIsActive[79] = false;}
//     if (Pitch ==  80) {BassPitchIsActive[80] = false;}
//     if (Pitch ==  81) {BassPitchIsActive[81] = false;}
//     if (Pitch ==  82) {BassPitchIsActive[82] = false;}
//     if (Pitch ==  83) {BassPitchIsActive[83] = false;}
//     if (Pitch ==  84) {BassPitchIsActive[84] = false;}
//     if (Pitch ==  85) {BassPitchIsActive[85] = false;}
//     if (Pitch ==  86) {BassPitchIsActive[86] = false;}
//     if (Pitch ==  87) {BassPitchIsActive[87] = false;}
//     if (Pitch ==  88) {BassPitchIsActive[88] = false;}
//     if (Pitch ==  89) {BassPitchIsActive[89] = false;}
//     if (Pitch ==  90) {BassPitchIsActive[90] = false;}
//     if (Pitch ==  91) {BassPitchIsActive[91] = false;}
//     if (Pitch ==  92) {BassPitchIsActive[92] = false;}
//     if (Pitch ==  93) {BassPitchIsActive[93] = false;}
//     if (Pitch ==  94) {BassPitchIsActive[94] = false;}
//     if (Pitch ==  95) {BassPitchIsActive[95] = false;}
//     if (Pitch ==  96) {BassPitchIsActive[96] = false;}
//     if (Pitch ==  97) {BassPitchIsActive[97] = false;}
//     if (Pitch ==  98) {BassPitchIsActive[98] = false;}
//     if (Pitch ==  99) {BassPitchIsActive[99] = false;}
//     if (Pitch == 100) {BassPitchIsActive[100] = false;}
//     if (Pitch == 101) {BassPitchIsActive[101] = false;}
//     if (Pitch == 102) {BassPitchIsActive[102] = false;}
//     if (Pitch == 103) {BassPitchIsActive[103] = false;}
//     if (Pitch == 104) {BassPitchIsActive[104] = false;}
//     if (Pitch == 105) {BassPitchIsActive[105] = false;}
//     if (Pitch == 106) {BassPitchIsActive[106] = false;}
//     if (Pitch == 107) {BassPitchIsActive[107] = false;}
//     if (Pitch == 108) {BassPitchIsActive[108] = false;}
//     if (Pitch == 109) {BassPitchIsActive[109] = false;}
//     if (Pitch == 110) {BassPitchIsActive[110] = false;}
//     if (Pitch == 111) {BassPitchIsActive[111] = false;}
//     if (Pitch == 112) {BassPitchIsActive[112] = false;}
//     if (Pitch == 113) {BassPitchIsActive[113] = false;}
//     if (Pitch == 114) {BassPitchIsActive[114] = false;}
//     if (Pitch == 115) {BassPitchIsActive[115] = false;}
//     if (Pitch == 116) {BassPitchIsActive[116] = false;}
//     if (Pitch == 117) {BassPitchIsActive[117] = false;}
//     if (Pitch == 118) {BassPitchIsActive[118] = false;}
//     if (Pitch == 119) {BassPitchIsActive[119] = false;}
//     if (Pitch == 120) {BassPitchIsActive[120] = false;}
//     if (Pitch == 121) {BassPitchIsActive[121] = false;}
//     if (Pitch == 122) {BassPitchIsActive[122] = false;}
//     if (Pitch == 123) {BassPitchIsActive[123] = false;}
//     if (Pitch == 124) {BassPitchIsActive[124] = false;}
//     if (Pitch == 125) {BassPitchIsActive[125] = false;}
//     if (Pitch == 126) {BassPitchIsActive[126] = false;}
//     if (Pitch == 127) {BassPitchIsActive[127] = false;}
//   }
// }

// void StringsChannelNoteOff(){
//   if (Channel ==   5) {
//     if (Pitch ==   0) {StringsPitchIsActive[0] = false;}
//     if (Pitch ==   1) {StringsPitchIsActive[1] = false;}
//     if (Pitch ==   2) {StringsPitchIsActive[2] = false;}
//     if (Pitch ==   3) {StringsPitchIsActive[3] = false;}
//     if (Pitch ==   4) {StringsPitchIsActive[4] = false;}
//     if (Pitch ==   5) {StringsPitchIsActive[5] = false;}
//     if (Pitch ==   6) {StringsPitchIsActive[6] = false;}
//     if (Pitch ==   7) {StringsPitchIsActive[7] = false;}
//     if (Pitch ==   8) {StringsPitchIsActive[8] = false;}
//     if (Pitch ==   9) {StringsPitchIsActive[9] = false;}
//     if (Pitch ==  10) {StringsPitchIsActive[10] = false;}
//     if (Pitch ==  11) {StringsPitchIsActive[11] = false;}
//     if (Pitch ==  12) {StringsPitchIsActive[12] = false;}
//     if (Pitch ==  13) {StringsPitchIsActive[13] = false;}
//     if (Pitch ==  14) {StringsPitchIsActive[14] = false;}
//     if (Pitch ==  15) {StringsPitchIsActive[15] = false;}
//     if (Pitch ==  16) {StringsPitchIsActive[16] = false;}
//     if (Pitch ==  17) {StringsPitchIsActive[17] = false;}
//     if (Pitch ==  18) {StringsPitchIsActive[18] = false;}
//     if (Pitch ==  19) {StringsPitchIsActive[19] = false;}
//     if (Pitch ==  20) {StringsPitchIsActive[20] = false;}
//     if (Pitch ==  21) {StringsPitchIsActive[21] = false;}
//     if (Pitch ==  22) {StringsPitchIsActive[22] = false;}
//     if (Pitch ==  23) {StringsPitchIsActive[23] = false;}
//     if (Pitch ==  24) {StringsPitchIsActive[24] = false;}
//     if (Pitch ==  25) {StringsPitchIsActive[25] = false;}
//     if (Pitch ==  26) {StringsPitchIsActive[26] = false;}
//     if (Pitch ==  27) {StringsPitchIsActive[27] = false;}
//     if (Pitch ==  28) {StringsPitchIsActive[28] = false;}
//     if (Pitch ==  29) {StringsPitchIsActive[29] = false;}
//     if (Pitch ==  30) {StringsPitchIsActive[30] = false;}
//     if (Pitch ==  31) {StringsPitchIsActive[31] = false;}
//     if (Pitch ==  32) {StringsPitchIsActive[32] = false;}
//     if (Pitch ==  33) {StringsPitchIsActive[33] = false;}
//     if (Pitch ==  34) {StringsPitchIsActive[34] = false;}
//     if (Pitch ==  35) {StringsPitchIsActive[35] = false;}
//     if (Pitch ==  36) {StringsPitchIsActive[36] = false;}
//     if (Pitch ==  37) {StringsPitchIsActive[37] = false;}
//     if (Pitch ==  38) {StringsPitchIsActive[38] = false;}
//     if (Pitch ==  39) {StringsPitchIsActive[39] = false;}
//     if (Pitch ==  40) {StringsPitchIsActive[40] = false;}
//     if (Pitch ==  41) {StringsPitchIsActive[41] = false;}
//     if (Pitch ==  42) {StringsPitchIsActive[42] = false;}
//     if (Pitch ==  43) {StringsPitchIsActive[43] = false;}
//     if (Pitch ==  44) {StringsPitchIsActive[44] = false;}
//     if (Pitch ==  45) {StringsPitchIsActive[45] = false;}
//     if (Pitch ==  46) {StringsPitchIsActive[46] = false;}
//     if (Pitch ==  47) {StringsPitchIsActive[47] = false;}
//     if (Pitch ==  48) {StringsPitchIsActive[48] = false;}
//     if (Pitch ==  49) {StringsPitchIsActive[49] = false;}
//     if (Pitch ==  50) {StringsPitchIsActive[50] = false;}
//     if (Pitch ==  51) {StringsPitchIsActive[51] = false;}
//     if (Pitch ==  52) {StringsPitchIsActive[52] = false;}
//     if (Pitch ==  53) {StringsPitchIsActive[53] = false;}
//     if (Pitch ==  54) {StringsPitchIsActive[54] = false;}
//     if (Pitch ==  55) {StringsPitchIsActive[55] = false;}
//     if (Pitch ==  56) {StringsPitchIsActive[56] = false;}
//     if (Pitch ==  57) {StringsPitchIsActive[57] = false;}
//     if (Pitch ==  58) {StringsPitchIsActive[58] = false;}
//     if (Pitch ==  59) {StringsPitchIsActive[59] = false;}
//     if (Pitch ==  60) {StringsPitchIsActive[60] = false;}
//     if (Pitch ==  61) {StringsPitchIsActive[61] = false;}
//     if (Pitch ==  62) {StringsPitchIsActive[62] = false;}
//     if (Pitch ==  63) {StringsPitchIsActive[63] = false;}
//     if (Pitch ==  64) {StringsPitchIsActive[64] = false;}
//     if (Pitch ==  65) {StringsPitchIsActive[65] = false;}
//     if (Pitch ==  66) {StringsPitchIsActive[66] = false;}
//     if (Pitch ==  67) {StringsPitchIsActive[67] = false;}
//     if (Pitch ==  68) {StringsPitchIsActive[68] = false;}
//     if (Pitch ==  69) {StringsPitchIsActive[69] = false;}
//     if (Pitch ==  70) {StringsPitchIsActive[70] = false;}
//     if (Pitch ==  71) {StringsPitchIsActive[71] = false;}
//     if (Pitch ==  72) {StringsPitchIsActive[72] = false;}
//     if (Pitch ==  73) {StringsPitchIsActive[73] = false;}
//     if (Pitch ==  74) {StringsPitchIsActive[74] = false;}
//     if (Pitch ==  75) {StringsPitchIsActive[75] = false;}
//     if (Pitch ==  76) {StringsPitchIsActive[76] = false;}
//     if (Pitch ==  77) {StringsPitchIsActive[77] = false;}
//     if (Pitch ==  78) {StringsPitchIsActive[78] = false;}
//     if (Pitch ==  79) {StringsPitchIsActive[79] = false;}
//     if (Pitch ==  80) {StringsPitchIsActive[80] = false;}
//     if (Pitch ==  81) {StringsPitchIsActive[81] = false;}
//     if (Pitch ==  82) {StringsPitchIsActive[82] = false;}
//     if (Pitch ==  83) {StringsPitchIsActive[83] = false;}
//     if (Pitch ==  84) {StringsPitchIsActive[84] = false;}
//     if (Pitch ==  85) {StringsPitchIsActive[85] = false;}
//     if (Pitch ==  86) {StringsPitchIsActive[86] = false;}
//     if (Pitch ==  87) {StringsPitchIsActive[87] = false;}
//     if (Pitch ==  88) {StringsPitchIsActive[88] = false;}
//     if (Pitch ==  89) {StringsPitchIsActive[89] = false;}
//     if (Pitch ==  90) {StringsPitchIsActive[90] = false;}
//     if (Pitch ==  91) {StringsPitchIsActive[91] = false;}
//     if (Pitch ==  92) {StringsPitchIsActive[92] = false;}
//     if (Pitch ==  93) {StringsPitchIsActive[93] = false;}
//     if (Pitch ==  94) {StringsPitchIsActive[94] = false;}
//     if (Pitch ==  95) {StringsPitchIsActive[95] = false;}
//     if (Pitch ==  96) {StringsPitchIsActive[96] = false;}
//     if (Pitch ==  97) {StringsPitchIsActive[97] = false;}
//     if (Pitch ==  98) {StringsPitchIsActive[98] = false;}
//     if (Pitch ==  99) {StringsPitchIsActive[99] = false;}
//     if (Pitch == 100) {StringsPitchIsActive[100] = false;}
//     if (Pitch == 101) {StringsPitchIsActive[101] = false;}
//     if (Pitch == 102) {StringsPitchIsActive[102] = false;}
//     if (Pitch == 103) {StringsPitchIsActive[103] = false;}
//     if (Pitch == 104) {StringsPitchIsActive[104] = false;}
//     if (Pitch == 105) {StringsPitchIsActive[105] = false;}
//     if (Pitch == 106) {StringsPitchIsActive[106] = false;}
//     if (Pitch == 107) {StringsPitchIsActive[107] = false;}
//     if (Pitch == 108) {StringsPitchIsActive[108] = false;}
//     if (Pitch == 109) {StringsPitchIsActive[109] = false;}
//     if (Pitch == 110) {StringsPitchIsActive[110] = false;}
//     if (Pitch == 111) {StringsPitchIsActive[111] = false;}
//     if (Pitch == 112) {StringsPitchIsActive[112] = false;}
//     if (Pitch == 113) {StringsPitchIsActive[113] = false;}
//     if (Pitch == 114) {StringsPitchIsActive[114] = false;}
//     if (Pitch == 115) {StringsPitchIsActive[115] = false;}
//     if (Pitch == 116) {StringsPitchIsActive[116] = false;}
//     if (Pitch == 117) {StringsPitchIsActive[117] = false;}
//     if (Pitch == 118) {StringsPitchIsActive[118] = false;}
//     if (Pitch == 119) {StringsPitchIsActive[119] = false;}
//     if (Pitch == 120) {StringsPitchIsActive[120] = false;}
//     if (Pitch == 121) {StringsPitchIsActive[121] = false;}
//     if (Pitch == 122) {StringsPitchIsActive[122] = false;}
//     if (Pitch == 123) {StringsPitchIsActive[123] = false;}
//     if (Pitch == 124) {StringsPitchIsActive[124] = false;}
//     if (Pitch == 125) {StringsPitchIsActive[125] = false;}
//     if (Pitch == 126) {StringsPitchIsActive[126] = false;}
//     if (Pitch == 127) {StringsPitchIsActive[127] = false;}
//   }
// }

// void EnsembleChannelNoteOff(){
//   if (Channel ==   6) {
//     if (Pitch ==   0) {EnsemblePitchIsActive[0] = false;}
//     if (Pitch ==   1) {EnsemblePitchIsActive[1] = false;}
//     if (Pitch ==   2) {EnsemblePitchIsActive[2] = false;}
//     if (Pitch ==   3) {EnsemblePitchIsActive[3] = false;}
//     if (Pitch ==   4) {EnsemblePitchIsActive[4] = false;}
//     if (Pitch ==   5) {EnsemblePitchIsActive[5] = false;}
//     if (Pitch ==   6) {EnsemblePitchIsActive[6] = false;}
//     if (Pitch ==   7) {EnsemblePitchIsActive[7] = false;}
//     if (Pitch ==   8) {EnsemblePitchIsActive[8] = false;}
//     if (Pitch ==   9) {EnsemblePitchIsActive[9] = false;}
//     if (Pitch ==  10) {EnsemblePitchIsActive[10] = false;}
//     if (Pitch ==  11) {EnsemblePitchIsActive[11] = false;}
//     if (Pitch ==  12) {EnsemblePitchIsActive[12] = false;}
//     if (Pitch ==  13) {EnsemblePitchIsActive[13] = false;}
//     if (Pitch ==  14) {EnsemblePitchIsActive[14] = false;}
//     if (Pitch ==  15) {EnsemblePitchIsActive[15] = false;}
//     if (Pitch ==  16) {EnsemblePitchIsActive[16] = false;}
//     if (Pitch ==  17) {EnsemblePitchIsActive[17] = false;}
//     if (Pitch ==  18) {EnsemblePitchIsActive[18] = false;}
//     if (Pitch ==  19) {EnsemblePitchIsActive[19] = false;}
//     if (Pitch ==  20) {EnsemblePitchIsActive[20] = false;}
//     if (Pitch ==  21) {EnsemblePitchIsActive[21] = false;}
//     if (Pitch ==  22) {EnsemblePitchIsActive[22] = false;}
//     if (Pitch ==  23) {EnsemblePitchIsActive[23] = false;}
//     if (Pitch ==  24) {EnsemblePitchIsActive[24] = false;}
//     if (Pitch ==  25) {EnsemblePitchIsActive[25] = false;}
//     if (Pitch ==  26) {EnsemblePitchIsActive[26] = false;}
//     if (Pitch ==  27) {EnsemblePitchIsActive[27] = false;}
//     if (Pitch ==  28) {EnsemblePitchIsActive[28] = false;}
//     if (Pitch ==  29) {EnsemblePitchIsActive[29] = false;}
//     if (Pitch ==  30) {EnsemblePitchIsActive[30] = false;}
//     if (Pitch ==  31) {EnsemblePitchIsActive[31] = false;}
//     if (Pitch ==  32) {EnsemblePitchIsActive[32] = false;}
//     if (Pitch ==  33) {EnsemblePitchIsActive[33] = false;}
//     if (Pitch ==  34) {EnsemblePitchIsActive[34] = false;}
//     if (Pitch ==  35) {EnsemblePitchIsActive[35] = false;}
//     if (Pitch ==  36) {EnsemblePitchIsActive[36] = false;}
//     if (Pitch ==  37) {EnsemblePitchIsActive[37] = false;}
//     if (Pitch ==  38) {EnsemblePitchIsActive[38] = false;}
//     if (Pitch ==  39) {EnsemblePitchIsActive[39] = false;}
//     if (Pitch ==  40) {EnsemblePitchIsActive[40] = false;}
//     if (Pitch ==  41) {EnsemblePitchIsActive[41] = false;}
//     if (Pitch ==  42) {EnsemblePitchIsActive[42] = false;}
//     if (Pitch ==  43) {EnsemblePitchIsActive[43] = false;}
//     if (Pitch ==  44) {EnsemblePitchIsActive[44] = false;}
//     if (Pitch ==  45) {EnsemblePitchIsActive[45] = false;}
//     if (Pitch ==  46) {EnsemblePitchIsActive[46] = false;}
//     if (Pitch ==  47) {EnsemblePitchIsActive[47] = false;}
//     if (Pitch ==  48) {EnsemblePitchIsActive[48] = false;}
//     if (Pitch ==  49) {EnsemblePitchIsActive[49] = false;}
//     if (Pitch ==  50) {EnsemblePitchIsActive[50] = false;}
//     if (Pitch ==  51) {EnsemblePitchIsActive[51] = false;}
//     if (Pitch ==  52) {EnsemblePitchIsActive[52] = false;}
//     if (Pitch ==  53) {EnsemblePitchIsActive[53] = false;}
//     if (Pitch ==  54) {EnsemblePitchIsActive[54] = false;}
//     if (Pitch ==  55) {EnsemblePitchIsActive[55] = false;}
//     if (Pitch ==  56) {EnsemblePitchIsActive[56] = false;}
//     if (Pitch ==  57) {EnsemblePitchIsActive[57] = false;}
//     if (Pitch ==  58) {EnsemblePitchIsActive[58] = false;}
//     if (Pitch ==  59) {EnsemblePitchIsActive[59] = false;}
//     if (Pitch ==  60) {EnsemblePitchIsActive[60] = false;}
//     if (Pitch ==  61) {EnsemblePitchIsActive[61] = false;}
//     if (Pitch ==  62) {EnsemblePitchIsActive[62] = false;}
//     if (Pitch ==  63) {EnsemblePitchIsActive[63] = false;}
//     if (Pitch ==  64) {EnsemblePitchIsActive[64] = false;}
//     if (Pitch ==  65) {EnsemblePitchIsActive[65] = false;}
//     if (Pitch ==  66) {EnsemblePitchIsActive[66] = false;}
//     if (Pitch ==  67) {EnsemblePitchIsActive[67] = false;}
//     if (Pitch ==  68) {EnsemblePitchIsActive[68] = false;}
//     if (Pitch ==  69) {EnsemblePitchIsActive[69] = false;}
//     if (Pitch ==  70) {EnsemblePitchIsActive[70] = false;}
//     if (Pitch ==  71) {EnsemblePitchIsActive[71] = false;}
//     if (Pitch ==  72) {EnsemblePitchIsActive[72] = false;}
//     if (Pitch ==  73) {EnsemblePitchIsActive[73] = false;}
//     if (Pitch ==  74) {EnsemblePitchIsActive[74] = false;}
//     if (Pitch ==  75) {EnsemblePitchIsActive[75] = false;}
//     if (Pitch ==  76) {EnsemblePitchIsActive[76] = false;}
//     if (Pitch ==  77) {EnsemblePitchIsActive[77] = false;}
//     if (Pitch ==  78) {EnsemblePitchIsActive[78] = false;}
//     if (Pitch ==  79) {EnsemblePitchIsActive[79] = false;}
//     if (Pitch ==  80) {EnsemblePitchIsActive[80] = false;}
//     if (Pitch ==  81) {EnsemblePitchIsActive[81] = false;}
//     if (Pitch ==  82) {EnsemblePitchIsActive[82] = false;}
//     if (Pitch ==  83) {EnsemblePitchIsActive[83] = false;}
//     if (Pitch ==  84) {EnsemblePitchIsActive[84] = false;}
//     if (Pitch ==  85) {EnsemblePitchIsActive[85] = false;}
//     if (Pitch ==  86) {EnsemblePitchIsActive[86] = false;}
//     if (Pitch ==  87) {EnsemblePitchIsActive[87] = false;}
//     if (Pitch ==  88) {EnsemblePitchIsActive[88] = false;}
//     if (Pitch ==  89) {EnsemblePitchIsActive[89] = false;}
//     if (Pitch ==  90) {EnsemblePitchIsActive[90] = false;}
//     if (Pitch ==  91) {EnsemblePitchIsActive[91] = false;}
//     if (Pitch ==  92) {EnsemblePitchIsActive[92] = false;}
//     if (Pitch ==  93) {EnsemblePitchIsActive[93] = false;}
//     if (Pitch ==  94) {EnsemblePitchIsActive[94] = false;}
//     if (Pitch ==  95) {EnsemblePitchIsActive[95] = false;}
//     if (Pitch ==  96) {EnsemblePitchIsActive[96] = false;}
//     if (Pitch ==  97) {EnsemblePitchIsActive[97] = false;}
//     if (Pitch ==  98) {EnsemblePitchIsActive[98] = false;}
//     if (Pitch ==  99) {EnsemblePitchIsActive[99] = false;}
//     if (Pitch == 100) {EnsemblePitchIsActive[100] = false;}
//     if (Pitch == 101) {EnsemblePitchIsActive[101] = false;}
//     if (Pitch == 102) {EnsemblePitchIsActive[102] = false;}
//     if (Pitch == 103) {EnsemblePitchIsActive[103] = false;}
//     if (Pitch == 104) {EnsemblePitchIsActive[104] = false;}
//     if (Pitch == 105) {EnsemblePitchIsActive[105] = false;}
//     if (Pitch == 106) {EnsemblePitchIsActive[106] = false;}
//     if (Pitch == 107) {EnsemblePitchIsActive[107] = false;}
//     if (Pitch == 108) {EnsemblePitchIsActive[108] = false;}
//     if (Pitch == 109) {EnsemblePitchIsActive[109] = false;}
//     if (Pitch == 110) {EnsemblePitchIsActive[110] = false;}
//     if (Pitch == 111) {EnsemblePitchIsActive[111] = false;}
//     if (Pitch == 112) {EnsemblePitchIsActive[112] = false;}
//     if (Pitch == 113) {EnsemblePitchIsActive[113] = false;}
//     if (Pitch == 114) {EnsemblePitchIsActive[114] = false;}
//     if (Pitch == 115) {EnsemblePitchIsActive[115] = false;}
//     if (Pitch == 116) {EnsemblePitchIsActive[116] = false;}
//     if (Pitch == 117) {EnsemblePitchIsActive[117] = false;}
//     if (Pitch == 118) {EnsemblePitchIsActive[118] = false;}
//     if (Pitch == 119) {EnsemblePitchIsActive[119] = false;}
//     if (Pitch == 120) {EnsemblePitchIsActive[120] = false;}
//     if (Pitch == 121) {EnsemblePitchIsActive[121] = false;}
//     if (Pitch == 122) {EnsemblePitchIsActive[122] = false;}
//     if (Pitch == 123) {EnsemblePitchIsActive[123] = false;}
//     if (Pitch == 124) {EnsemblePitchIsActive[124] = false;}
//     if (Pitch == 125) {EnsemblePitchIsActive[125] = false;}
//     if (Pitch == 126) {EnsemblePitchIsActive[126] = false;}
//     if (Pitch == 127) {EnsemblePitchIsActive[127] = false;}
//   }
// }

// void BrassChannelNoteOff(){
//   if (Channel ==   7) {
//     if (Pitch ==   0) {BrassPitchIsActive[0] = false;}
//     if (Pitch ==   1) {BrassPitchIsActive[1] = false;}
//     if (Pitch ==   2) {BrassPitchIsActive[2] = false;}
//     if (Pitch ==   3) {BrassPitchIsActive[3] = false;}
//     if (Pitch ==   4) {BrassPitchIsActive[4] = false;}
//     if (Pitch ==   5) {BrassPitchIsActive[5] = false;}
//     if (Pitch ==   6) {BrassPitchIsActive[6] = false;}
//     if (Pitch ==   7) {BrassPitchIsActive[7] = false;}
//     if (Pitch ==   8) {BrassPitchIsActive[8] = false;}
//     if (Pitch ==   9) {BrassPitchIsActive[9] = false;}
//     if (Pitch ==  10) {BrassPitchIsActive[10] = false;}
//     if (Pitch ==  11) {BrassPitchIsActive[11] = false;}
//     if (Pitch ==  12) {BrassPitchIsActive[12] = false;}
//     if (Pitch ==  13) {BrassPitchIsActive[13] = false;}
//     if (Pitch ==  14) {BrassPitchIsActive[14] = false;}
//     if (Pitch ==  15) {BrassPitchIsActive[15] = false;}
//     if (Pitch ==  16) {BrassPitchIsActive[16] = false;}
//     if (Pitch ==  17) {BrassPitchIsActive[17] = false;}
//     if (Pitch ==  18) {BrassPitchIsActive[18] = false;}
//     if (Pitch ==  19) {BrassPitchIsActive[19] = false;}
//     if (Pitch ==  20) {BrassPitchIsActive[20] = false;}
//     if (Pitch ==  21) {BrassPitchIsActive[21] = false;}
//     if (Pitch ==  22) {BrassPitchIsActive[22] = false;}
//     if (Pitch ==  23) {BrassPitchIsActive[23] = false;}
//     if (Pitch ==  24) {BrassPitchIsActive[24] = false;}
//     if (Pitch ==  25) {BrassPitchIsActive[25] = false;}
//     if (Pitch ==  26) {BrassPitchIsActive[26] = false;}
//     if (Pitch ==  27) {BrassPitchIsActive[27] = false;}
//     if (Pitch ==  28) {BrassPitchIsActive[28] = false;}
//     if (Pitch ==  29) {BrassPitchIsActive[29] = false;}
//     if (Pitch ==  30) {BrassPitchIsActive[30] = false;}
//     if (Pitch ==  31) {BrassPitchIsActive[31] = false;}
//     if (Pitch ==  32) {BrassPitchIsActive[32] = false;}
//     if (Pitch ==  33) {BrassPitchIsActive[33] = false;}
//     if (Pitch ==  34) {BrassPitchIsActive[34] = false;}
//     if (Pitch ==  35) {BrassPitchIsActive[35] = false;}
//     if (Pitch ==  36) {BrassPitchIsActive[36] = false;}
//     if (Pitch ==  37) {BrassPitchIsActive[37] = false;}
//     if (Pitch ==  38) {BrassPitchIsActive[38] = false;}
//     if (Pitch ==  39) {BrassPitchIsActive[39] = false;}
//     if (Pitch ==  40) {BrassPitchIsActive[40] = false;}
//     if (Pitch ==  41) {BrassPitchIsActive[41] = false;}
//     if (Pitch ==  42) {BrassPitchIsActive[42] = false;}
//     if (Pitch ==  43) {BrassPitchIsActive[43] = false;}
//     if (Pitch ==  44) {BrassPitchIsActive[44] = false;}
//     if (Pitch ==  45) {BrassPitchIsActive[45] = false;}
//     if (Pitch ==  46) {BrassPitchIsActive[46] = false;}
//     if (Pitch ==  47) {BrassPitchIsActive[47] = false;}
//     if (Pitch ==  48) {BrassPitchIsActive[48] = false;}
//     if (Pitch ==  49) {BrassPitchIsActive[49] = false;}
//     if (Pitch ==  50) {BrassPitchIsActive[50] = false;}
//     if (Pitch ==  51) {BrassPitchIsActive[51] = false;}
//     if (Pitch ==  52) {BrassPitchIsActive[52] = false;}
//     if (Pitch ==  53) {BrassPitchIsActive[53] = false;}
//     if (Pitch ==  54) {BrassPitchIsActive[54] = false;}
//     if (Pitch ==  55) {BrassPitchIsActive[55] = false;}
//     if (Pitch ==  56) {BrassPitchIsActive[56] = false;}
//     if (Pitch ==  57) {BrassPitchIsActive[57] = false;}
//     if (Pitch ==  58) {BrassPitchIsActive[58] = false;}
//     if (Pitch ==  59) {BrassPitchIsActive[59] = false;}
//     if (Pitch ==  60) {BrassPitchIsActive[60] = false;}
//     if (Pitch ==  61) {BrassPitchIsActive[61] = false;}
//     if (Pitch ==  62) {BrassPitchIsActive[62] = false;}
//     if (Pitch ==  63) {BrassPitchIsActive[63] = false;}
//     if (Pitch ==  64) {BrassPitchIsActive[64] = false;}
//     if (Pitch ==  65) {BrassPitchIsActive[65] = false;}
//     if (Pitch ==  66) {BrassPitchIsActive[66] = false;}
//     if (Pitch ==  67) {BrassPitchIsActive[67] = false;}
//     if (Pitch ==  68) {BrassPitchIsActive[68] = false;}
//     if (Pitch ==  69) {BrassPitchIsActive[69] = false;}
//     if (Pitch ==  70) {BrassPitchIsActive[70] = false;}
//     if (Pitch ==  71) {BrassPitchIsActive[71] = false;}
//     if (Pitch ==  72) {BrassPitchIsActive[72] = false;}
//     if (Pitch ==  73) {BrassPitchIsActive[73] = false;}
//     if (Pitch ==  74) {BrassPitchIsActive[74] = false;}
//     if (Pitch ==  75) {BrassPitchIsActive[75] = false;}
//     if (Pitch ==  76) {BrassPitchIsActive[76] = false;}
//     if (Pitch ==  77) {BrassPitchIsActive[77] = false;}
//     if (Pitch ==  78) {BrassPitchIsActive[78] = false;}
//     if (Pitch ==  79) {BrassPitchIsActive[79] = false;}
//     if (Pitch ==  80) {BrassPitchIsActive[80] = false;}
//     if (Pitch ==  81) {BrassPitchIsActive[81] = false;}
//     if (Pitch ==  82) {BrassPitchIsActive[82] = false;}
//     if (Pitch ==  83) {BrassPitchIsActive[83] = false;}
//     if (Pitch ==  84) {BrassPitchIsActive[84] = false;}
//     if (Pitch ==  85) {BrassPitchIsActive[85] = false;}
//     if (Pitch ==  86) {BrassPitchIsActive[86] = false;}
//     if (Pitch ==  87) {BrassPitchIsActive[87] = false;}
//     if (Pitch ==  88) {BrassPitchIsActive[88] = false;}
//     if (Pitch ==  89) {BrassPitchIsActive[89] = false;}
//     if (Pitch ==  90) {BrassPitchIsActive[90] = false;}
//     if (Pitch ==  91) {BrassPitchIsActive[91] = false;}
//     if (Pitch ==  92) {BrassPitchIsActive[92] = false;}
//     if (Pitch ==  93) {BrassPitchIsActive[93] = false;}
//     if (Pitch ==  94) {BrassPitchIsActive[94] = false;}
//     if (Pitch ==  95) {BrassPitchIsActive[95] = false;}
//     if (Pitch ==  96) {BrassPitchIsActive[96] = false;}
//     if (Pitch ==  97) {BrassPitchIsActive[97] = false;}
//     if (Pitch ==  98) {BrassPitchIsActive[98] = false;}
//     if (Pitch ==  99) {BrassPitchIsActive[99] = false;}
//     if (Pitch == 100) {BrassPitchIsActive[100] = false;}
//     if (Pitch == 101) {BrassPitchIsActive[101] = false;}
//     if (Pitch == 102) {BrassPitchIsActive[102] = false;}
//     if (Pitch == 103) {BrassPitchIsActive[103] = false;}
//     if (Pitch == 104) {BrassPitchIsActive[104] = false;}
//     if (Pitch == 105) {BrassPitchIsActive[105] = false;}
//     if (Pitch == 106) {BrassPitchIsActive[106] = false;}
//     if (Pitch == 107) {BrassPitchIsActive[107] = false;}
//     if (Pitch == 108) {BrassPitchIsActive[108] = false;}
//     if (Pitch == 109) {BrassPitchIsActive[109] = false;}
//     if (Pitch == 110) {BrassPitchIsActive[110] = false;}
//     if (Pitch == 111) {BrassPitchIsActive[111] = false;}
//     if (Pitch == 112) {BrassPitchIsActive[112] = false;}
//     if (Pitch == 113) {BrassPitchIsActive[113] = false;}
//     if (Pitch == 114) {BrassPitchIsActive[114] = false;}
//     if (Pitch == 115) {BrassPitchIsActive[115] = false;}
//     if (Pitch == 116) {BrassPitchIsActive[116] = false;}
//     if (Pitch == 117) {BrassPitchIsActive[117] = false;}
//     if (Pitch == 118) {BrassPitchIsActive[118] = false;}
//     if (Pitch == 119) {BrassPitchIsActive[119] = false;}
//     if (Pitch == 120) {BrassPitchIsActive[120] = false;}
//     if (Pitch == 121) {BrassPitchIsActive[121] = false;}
//     if (Pitch == 122) {BrassPitchIsActive[122] = false;}
//     if (Pitch == 123) {BrassPitchIsActive[123] = false;}
//     if (Pitch == 124) {BrassPitchIsActive[124] = false;}
//     if (Pitch == 125) {BrassPitchIsActive[125] = false;}
//     if (Pitch == 126) {BrassPitchIsActive[126] = false;}
//     if (Pitch == 127) {BrassPitchIsActive[127] = false;}
//   }
// }

// void ReedChannelNoteOff(){
//   if (Channel ==   8) {
//     if (Pitch ==   0) {ReedPitchIsActive[0] = false;}
//     if (Pitch ==   1) {ReedPitchIsActive[1] = false;}
//     if (Pitch ==   2) {ReedPitchIsActive[2] = false;}
//     if (Pitch ==   3) {ReedPitchIsActive[3] = false;}
//     if (Pitch ==   4) {ReedPitchIsActive[4] = false;}
//     if (Pitch ==   5) {ReedPitchIsActive[5] = false;}
//     if (Pitch ==   6) {ReedPitchIsActive[6] = false;}
//     if (Pitch ==   7) {ReedPitchIsActive[7] = false;}
//     if (Pitch ==   8) {ReedPitchIsActive[8] = false;}
//     if (Pitch ==   9) {ReedPitchIsActive[9] = false;}
//     if (Pitch ==  10) {ReedPitchIsActive[10] = false;}
//     if (Pitch ==  11) {ReedPitchIsActive[11] = false;}
//     if (Pitch ==  12) {ReedPitchIsActive[12] = false;}
//     if (Pitch ==  13) {ReedPitchIsActive[13] = false;}
//     if (Pitch ==  14) {ReedPitchIsActive[14] = false;}
//     if (Pitch ==  15) {ReedPitchIsActive[15] = false;}
//     if (Pitch ==  16) {ReedPitchIsActive[16] = false;}
//     if (Pitch ==  17) {ReedPitchIsActive[17] = false;}
//     if (Pitch ==  18) {ReedPitchIsActive[18] = false;}
//     if (Pitch ==  19) {ReedPitchIsActive[19] = false;}
//     if (Pitch ==  20) {ReedPitchIsActive[20] = false;}
//     if (Pitch ==  21) {ReedPitchIsActive[21] = false;}
//     if (Pitch ==  22) {ReedPitchIsActive[22] = false;}
//     if (Pitch ==  23) {ReedPitchIsActive[23] = false;}
//     if (Pitch ==  24) {ReedPitchIsActive[24] = false;}
//     if (Pitch ==  25) {ReedPitchIsActive[25] = false;}
//     if (Pitch ==  26) {ReedPitchIsActive[26] = false;}
//     if (Pitch ==  27) {ReedPitchIsActive[27] = false;}
//     if (Pitch ==  28) {ReedPitchIsActive[28] = false;}
//     if (Pitch ==  29) {ReedPitchIsActive[29] = false;}
//     if (Pitch ==  30) {ReedPitchIsActive[30] = false;}
//     if (Pitch ==  31) {ReedPitchIsActive[31] = false;}
//     if (Pitch ==  32) {ReedPitchIsActive[32] = false;}
//     if (Pitch ==  33) {ReedPitchIsActive[33] = false;}
//     if (Pitch ==  34) {ReedPitchIsActive[34] = false;}
//     if (Pitch ==  35) {ReedPitchIsActive[35] = false;}
//     if (Pitch ==  36) {ReedPitchIsActive[36] = false;}
//     if (Pitch ==  37) {ReedPitchIsActive[37] = false;}
//     if (Pitch ==  38) {ReedPitchIsActive[38] = false;}
//     if (Pitch ==  39) {ReedPitchIsActive[39] = false;}
//     if (Pitch ==  40) {ReedPitchIsActive[40] = false;}
//     if (Pitch ==  41) {ReedPitchIsActive[41] = false;}
//     if (Pitch ==  42) {ReedPitchIsActive[42] = false;}
//     if (Pitch ==  43) {ReedPitchIsActive[43] = false;}
//     if (Pitch ==  44) {ReedPitchIsActive[44] = false;}
//     if (Pitch ==  45) {ReedPitchIsActive[45] = false;}
//     if (Pitch ==  46) {ReedPitchIsActive[46] = false;}
//     if (Pitch ==  47) {ReedPitchIsActive[47] = false;}
//     if (Pitch ==  48) {ReedPitchIsActive[48] = false;}
//     if (Pitch ==  49) {ReedPitchIsActive[49] = false;}
//     if (Pitch ==  50) {ReedPitchIsActive[50] = false;}
//     if (Pitch ==  51) {ReedPitchIsActive[51] = false;}
//     if (Pitch ==  52) {ReedPitchIsActive[52] = false;}
//     if (Pitch ==  53) {ReedPitchIsActive[53] = false;}
//     if (Pitch ==  54) {ReedPitchIsActive[54] = false;}
//     if (Pitch ==  55) {ReedPitchIsActive[55] = false;}
//     if (Pitch ==  56) {ReedPitchIsActive[56] = false;}
//     if (Pitch ==  57) {ReedPitchIsActive[57] = false;}
//     if (Pitch ==  58) {ReedPitchIsActive[58] = false;}
//     if (Pitch ==  59) {ReedPitchIsActive[59] = false;}
//     if (Pitch ==  60) {ReedPitchIsActive[60] = false;}
//     if (Pitch ==  61) {ReedPitchIsActive[61] = false;}
//     if (Pitch ==  62) {ReedPitchIsActive[62] = false;}
//     if (Pitch ==  63) {ReedPitchIsActive[63] = false;}
//     if (Pitch ==  64) {ReedPitchIsActive[64] = false;}
//     if (Pitch ==  65) {ReedPitchIsActive[65] = false;}
//     if (Pitch ==  66) {ReedPitchIsActive[66] = false;}
//     if (Pitch ==  67) {ReedPitchIsActive[67] = false;}
//     if (Pitch ==  68) {ReedPitchIsActive[68] = false;}
//     if (Pitch ==  69) {ReedPitchIsActive[69] = false;}
//     if (Pitch ==  70) {ReedPitchIsActive[70] = false;}
//     if (Pitch ==  71) {ReedPitchIsActive[71] = false;}
//     if (Pitch ==  72) {ReedPitchIsActive[72] = false;}
//     if (Pitch ==  73) {ReedPitchIsActive[73] = false;}
//     if (Pitch ==  74) {ReedPitchIsActive[74] = false;}
//     if (Pitch ==  75) {ReedPitchIsActive[75] = false;}
//     if (Pitch ==  76) {ReedPitchIsActive[76] = false;}
//     if (Pitch ==  77) {ReedPitchIsActive[77] = false;}
//     if (Pitch ==  78) {ReedPitchIsActive[78] = false;}
//     if (Pitch ==  79) {ReedPitchIsActive[79] = false;}
//     if (Pitch ==  80) {ReedPitchIsActive[80] = false;}
//     if (Pitch ==  81) {ReedPitchIsActive[81] = false;}
//     if (Pitch ==  82) {ReedPitchIsActive[82] = false;}
//     if (Pitch ==  83) {ReedPitchIsActive[83] = false;}
//     if (Pitch ==  84) {ReedPitchIsActive[84] = false;}
//     if (Pitch ==  85) {ReedPitchIsActive[85] = false;}
//     if (Pitch ==  86) {ReedPitchIsActive[86] = false;}
//     if (Pitch ==  87) {ReedPitchIsActive[87] = false;}
//     if (Pitch ==  88) {ReedPitchIsActive[88] = false;}
//     if (Pitch ==  89) {ReedPitchIsActive[89] = false;}
//     if (Pitch ==  90) {ReedPitchIsActive[90] = false;}
//     if (Pitch ==  91) {ReedPitchIsActive[91] = false;}
//     if (Pitch ==  92) {ReedPitchIsActive[92] = false;}
//     if (Pitch ==  93) {ReedPitchIsActive[93] = false;}
//     if (Pitch ==  94) {ReedPitchIsActive[94] = false;}
//     if (Pitch ==  95) {ReedPitchIsActive[95] = false;}
//     if (Pitch ==  96) {ReedPitchIsActive[96] = false;}
//     if (Pitch ==  97) {ReedPitchIsActive[97] = false;}
//     if (Pitch ==  98) {ReedPitchIsActive[98] = false;}
//     if (Pitch ==  99) {ReedPitchIsActive[99] = false;}
//     if (Pitch == 100) {ReedPitchIsActive[100] = false;}
//     if (Pitch == 101) {ReedPitchIsActive[101] = false;}
//     if (Pitch == 102) {ReedPitchIsActive[102] = false;}
//     if (Pitch == 103) {ReedPitchIsActive[103] = false;}
//     if (Pitch == 104) {ReedPitchIsActive[104] = false;}
//     if (Pitch == 105) {ReedPitchIsActive[105] = false;}
//     if (Pitch == 106) {ReedPitchIsActive[106] = false;}
//     if (Pitch == 107) {ReedPitchIsActive[107] = false;}
//     if (Pitch == 108) {ReedPitchIsActive[108] = false;}
//     if (Pitch == 109) {ReedPitchIsActive[109] = false;}
//     if (Pitch == 110) {ReedPitchIsActive[110] = false;}
//     if (Pitch == 111) {ReedPitchIsActive[111] = false;}
//     if (Pitch == 112) {ReedPitchIsActive[112] = false;}
//     if (Pitch == 113) {ReedPitchIsActive[113] = false;}
//     if (Pitch == 114) {ReedPitchIsActive[114] = false;}
//     if (Pitch == 115) {ReedPitchIsActive[115] = false;}
//     if (Pitch == 116) {ReedPitchIsActive[116] = false;}
//     if (Pitch == 117) {ReedPitchIsActive[117] = false;}
//     if (Pitch == 118) {ReedPitchIsActive[118] = false;}
//     if (Pitch == 119) {ReedPitchIsActive[119] = false;}
//     if (Pitch == 120) {ReedPitchIsActive[120] = false;}
//     if (Pitch == 121) {ReedPitchIsActive[121] = false;}
//     if (Pitch == 122) {ReedPitchIsActive[122] = false;}
//     if (Pitch == 123) {ReedPitchIsActive[123] = false;}
//     if (Pitch == 124) {ReedPitchIsActive[124] = false;}
//     if (Pitch == 125) {ReedPitchIsActive[125] = false;}
//     if (Pitch == 126) {ReedPitchIsActive[126] = false;}
//     if (Pitch == 127) {ReedPitchIsActive[127] = false;}
//   }
// }

// void PipeChannelNoteOff(){
//   if (Channel ==   9) {
//     if (Pitch ==   0) {PipePitchIsActive[0] = false;}
//     if (Pitch ==   1) {PipePitchIsActive[1] = false;}
//     if (Pitch ==   2) {PipePitchIsActive[2] = false;}
//     if (Pitch ==   3) {PipePitchIsActive[3] = false;}
//     if (Pitch ==   4) {PipePitchIsActive[4] = false;}
//     if (Pitch ==   5) {PipePitchIsActive[5] = false;}
//     if (Pitch ==   6) {PipePitchIsActive[6] = false;}
//     if (Pitch ==   7) {PipePitchIsActive[7] = false;}
//     if (Pitch ==   8) {PipePitchIsActive[8] = false;}
//     if (Pitch ==   9) {PipePitchIsActive[9] = false;}
//     if (Pitch ==  10) {PipePitchIsActive[10] = false;}
//     if (Pitch ==  11) {PipePitchIsActive[11] = false;}
//     if (Pitch ==  12) {PipePitchIsActive[12] = false;}
//     if (Pitch ==  13) {PipePitchIsActive[13] = false;}
//     if (Pitch ==  14) {PipePitchIsActive[14] = false;}
//     if (Pitch ==  15) {PipePitchIsActive[15] = false;}
//     if (Pitch ==  16) {PipePitchIsActive[16] = false;}
//     if (Pitch ==  17) {PipePitchIsActive[17] = false;}
//     if (Pitch ==  18) {PipePitchIsActive[18] = false;}
//     if (Pitch ==  19) {PipePitchIsActive[19] = false;}
//     if (Pitch ==  20) {PipePitchIsActive[20] = false;}
//     if (Pitch ==  21) {PipePitchIsActive[21] = false;}
//     if (Pitch ==  22) {PipePitchIsActive[22] = false;}
//     if (Pitch ==  23) {PipePitchIsActive[23] = false;}
//     if (Pitch ==  24) {PipePitchIsActive[24] = false;}
//     if (Pitch ==  25) {PipePitchIsActive[25] = false;}
//     if (Pitch ==  26) {PipePitchIsActive[26] = false;}
//     if (Pitch ==  27) {PipePitchIsActive[27] = false;}
//     if (Pitch ==  28) {PipePitchIsActive[28] = false;}
//     if (Pitch ==  29) {PipePitchIsActive[29] = false;}
//     if (Pitch ==  30) {PipePitchIsActive[30] = false;}
//     if (Pitch ==  31) {PipePitchIsActive[31] = false;}
//     if (Pitch ==  32) {PipePitchIsActive[32] = false;}
//     if (Pitch ==  33) {PipePitchIsActive[33] = false;}
//     if (Pitch ==  34) {PipePitchIsActive[34] = false;}
//     if (Pitch ==  35) {PipePitchIsActive[35] = false;}
//     if (Pitch ==  36) {PipePitchIsActive[36] = false;}
//     if (Pitch ==  37) {PipePitchIsActive[37] = false;}
//     if (Pitch ==  38) {PipePitchIsActive[38] = false;}
//     if (Pitch ==  39) {PipePitchIsActive[39] = false;}
//     if (Pitch ==  40) {PipePitchIsActive[40] = false;}
//     if (Pitch ==  41) {PipePitchIsActive[41] = false;}
//     if (Pitch ==  42) {PipePitchIsActive[42] = false;}
//     if (Pitch ==  43) {PipePitchIsActive[43] = false;}
//     if (Pitch ==  44) {PipePitchIsActive[44] = false;}
//     if (Pitch ==  45) {PipePitchIsActive[45] = false;}
//     if (Pitch ==  46) {PipePitchIsActive[46] = false;}
//     if (Pitch ==  47) {PipePitchIsActive[47] = false;}
//     if (Pitch ==  48) {PipePitchIsActive[48] = false;}
//     if (Pitch ==  49) {PipePitchIsActive[49] = false;}
//     if (Pitch ==  50) {PipePitchIsActive[50] = false;}
//     if (Pitch ==  51) {PipePitchIsActive[51] = false;}
//     if (Pitch ==  52) {PipePitchIsActive[52] = false;}
//     if (Pitch ==  53) {PipePitchIsActive[53] = false;}
//     if (Pitch ==  54) {PipePitchIsActive[54] = false;}
//     if (Pitch ==  55) {PipePitchIsActive[55] = false;}
//     if (Pitch ==  56) {PipePitchIsActive[56] = false;}
//     if (Pitch ==  57) {PipePitchIsActive[57] = false;}
//     if (Pitch ==  58) {PipePitchIsActive[58] = false;}
//     if (Pitch ==  59) {PipePitchIsActive[59] = false;}
//     if (Pitch ==  60) {PipePitchIsActive[60] = false;}
//     if (Pitch ==  61) {PipePitchIsActive[61] = false;}
//     if (Pitch ==  62) {PipePitchIsActive[62] = false;}
//     if (Pitch ==  63) {PipePitchIsActive[63] = false;}
//     if (Pitch ==  64) {PipePitchIsActive[64] = false;}
//     if (Pitch ==  65) {PipePitchIsActive[65] = false;}
//     if (Pitch ==  66) {PipePitchIsActive[66] = false;}
//     if (Pitch ==  67) {PipePitchIsActive[67] = false;}
//     if (Pitch ==  68) {PipePitchIsActive[68] = false;}
//     if (Pitch ==  69) {PipePitchIsActive[69] = false;}
//     if (Pitch ==  70) {PipePitchIsActive[70] = false;}
//     if (Pitch ==  71) {PipePitchIsActive[71] = false;}
//     if (Pitch ==  72) {PipePitchIsActive[72] = false;}
//     if (Pitch ==  73) {PipePitchIsActive[73] = false;}
//     if (Pitch ==  74) {PipePitchIsActive[74] = false;}
//     if (Pitch ==  75) {PipePitchIsActive[75] = false;}
//     if (Pitch ==  76) {PipePitchIsActive[76] = false;}
//     if (Pitch ==  77) {PipePitchIsActive[77] = false;}
//     if (Pitch ==  78) {PipePitchIsActive[78] = false;}
//     if (Pitch ==  79) {PipePitchIsActive[79] = false;}
//     if (Pitch ==  80) {PipePitchIsActive[80] = false;}
//     if (Pitch ==  81) {PipePitchIsActive[81] = false;}
//     if (Pitch ==  82) {PipePitchIsActive[82] = false;}
//     if (Pitch ==  83) {PipePitchIsActive[83] = false;}
//     if (Pitch ==  84) {PipePitchIsActive[84] = false;}
//     if (Pitch ==  85) {PipePitchIsActive[85] = false;}
//     if (Pitch ==  86) {PipePitchIsActive[86] = false;}
//     if (Pitch ==  87) {PipePitchIsActive[87] = false;}
//     if (Pitch ==  88) {PipePitchIsActive[88] = false;}
//     if (Pitch ==  89) {PipePitchIsActive[89] = false;}
//     if (Pitch ==  90) {PipePitchIsActive[90] = false;}
//     if (Pitch ==  91) {PipePitchIsActive[91] = false;}
//     if (Pitch ==  92) {PipePitchIsActive[92] = false;}
//     if (Pitch ==  93) {PipePitchIsActive[93] = false;}
//     if (Pitch ==  94) {PipePitchIsActive[94] = false;}
//     if (Pitch ==  95) {PipePitchIsActive[95] = false;}
//     if (Pitch ==  96) {PipePitchIsActive[96] = false;}
//     if (Pitch ==  97) {PipePitchIsActive[97] = false;}
//     if (Pitch ==  98) {PipePitchIsActive[98] = false;}
//     if (Pitch ==  99) {PipePitchIsActive[99] = false;}
//     if (Pitch == 100) {PipePitchIsActive[100] = false;}
//     if (Pitch == 101) {PipePitchIsActive[101] = false;}
//     if (Pitch == 102) {PipePitchIsActive[102] = false;}
//     if (Pitch == 103) {PipePitchIsActive[103] = false;}
//     if (Pitch == 104) {PipePitchIsActive[104] = false;}
//     if (Pitch == 105) {PipePitchIsActive[105] = false;}
//     if (Pitch == 106) {PipePitchIsActive[106] = false;}
//     if (Pitch == 107) {PipePitchIsActive[107] = false;}
//     if (Pitch == 108) {PipePitchIsActive[108] = false;}
//     if (Pitch == 109) {PipePitchIsActive[109] = false;}
//     if (Pitch == 110) {PipePitchIsActive[110] = false;}
//     if (Pitch == 111) {PipePitchIsActive[111] = false;}
//     if (Pitch == 112) {PipePitchIsActive[112] = false;}
//     if (Pitch == 113) {PipePitchIsActive[113] = false;}
//     if (Pitch == 114) {PipePitchIsActive[114] = false;}
//     if (Pitch == 115) {PipePitchIsActive[115] = false;}
//     if (Pitch == 116) {PipePitchIsActive[116] = false;}
//     if (Pitch == 117) {PipePitchIsActive[117] = false;}
//     if (Pitch == 118) {PipePitchIsActive[118] = false;}
//     if (Pitch == 119) {PipePitchIsActive[119] = false;}
//     if (Pitch == 120) {PipePitchIsActive[120] = false;}
//     if (Pitch == 121) {PipePitchIsActive[121] = false;}
//     if (Pitch == 122) {PipePitchIsActive[122] = false;}
//     if (Pitch == 123) {PipePitchIsActive[123] = false;}
//     if (Pitch == 124) {PipePitchIsActive[124] = false;}
//     if (Pitch == 125) {PipePitchIsActive[125] = false;}
//     if (Pitch == 126) {PipePitchIsActive[126] = false;}
//     if (Pitch == 127) {PipePitchIsActive[127] = false;}
//   }
// }

// void SynthLeadChannelNoteOff(){
//   if (Channel ==   11) {
//     if (Pitch ==   0) {SynthLeadPitchIsActive[0] = false;}
//     if (Pitch ==   1) {SynthLeadPitchIsActive[1] = false;}
//     if (Pitch ==   2) {SynthLeadPitchIsActive[2] = false;}
//     if (Pitch ==   3) {SynthLeadPitchIsActive[3] = false;}
//     if (Pitch ==   4) {SynthLeadPitchIsActive[4] = false;}
//     if (Pitch ==   5) {SynthLeadPitchIsActive[5] = false;}
//     if (Pitch ==   6) {SynthLeadPitchIsActive[6] = false;}
//     if (Pitch ==   7) {SynthLeadPitchIsActive[7] = false;}
//     if (Pitch ==   8) {SynthLeadPitchIsActive[8] = false;}
//     if (Pitch ==   9) {SynthLeadPitchIsActive[9] = false;}
//     if (Pitch ==  10) {SynthLeadPitchIsActive[10] = false;}
//     if (Pitch ==  11) {SynthLeadPitchIsActive[11] = false;}
//     if (Pitch ==  12) {SynthLeadPitchIsActive[12] = false;}
//     if (Pitch ==  13) {SynthLeadPitchIsActive[13] = false;}
//     if (Pitch ==  14) {SynthLeadPitchIsActive[14] = false;}
//     if (Pitch ==  15) {SynthLeadPitchIsActive[15] = false;}
//     if (Pitch ==  16) {SynthLeadPitchIsActive[16] = false;}
//     if (Pitch ==  17) {SynthLeadPitchIsActive[17] = false;}
//     if (Pitch ==  18) {SynthLeadPitchIsActive[18] = false;}
//     if (Pitch ==  19) {SynthLeadPitchIsActive[19] = false;}
//     if (Pitch ==  20) {SynthLeadPitchIsActive[20] = false;}
//     if (Pitch ==  21) {SynthLeadPitchIsActive[21] = false;}
//     if (Pitch ==  22) {SynthLeadPitchIsActive[22] = false;}
//     if (Pitch ==  23) {SynthLeadPitchIsActive[23] = false;}
//     if (Pitch ==  24) {SynthLeadPitchIsActive[24] = false;}
//     if (Pitch ==  25) {SynthLeadPitchIsActive[25] = false;}
//     if (Pitch ==  26) {SynthLeadPitchIsActive[26] = false;}
//     if (Pitch ==  27) {SynthLeadPitchIsActive[27] = false;}
//     if (Pitch ==  28) {SynthLeadPitchIsActive[28] = false;}
//     if (Pitch ==  29) {SynthLeadPitchIsActive[29] = false;}
//     if (Pitch ==  30) {SynthLeadPitchIsActive[30] = false;}
//     if (Pitch ==  31) {SynthLeadPitchIsActive[31] = false;}
//     if (Pitch ==  32) {SynthLeadPitchIsActive[32] = false;}
//     if (Pitch ==  33) {SynthLeadPitchIsActive[33] = false;}
//     if (Pitch ==  34) {SynthLeadPitchIsActive[34] = false;}
//     if (Pitch ==  35) {SynthLeadPitchIsActive[35] = false;}
//     if (Pitch ==  36) {SynthLeadPitchIsActive[36] = false;}
//     if (Pitch ==  37) {SynthLeadPitchIsActive[37] = false;}
//     if (Pitch ==  38) {SynthLeadPitchIsActive[38] = false;}
//     if (Pitch ==  39) {SynthLeadPitchIsActive[39] = false;}
//     if (Pitch ==  40) {SynthLeadPitchIsActive[40] = false;}
//     if (Pitch ==  41) {SynthLeadPitchIsActive[41] = false;}
//     if (Pitch ==  42) {SynthLeadPitchIsActive[42] = false;}
//     if (Pitch ==  43) {SynthLeadPitchIsActive[43] = false;}
//     if (Pitch ==  44) {SynthLeadPitchIsActive[44] = false;}
//     if (Pitch ==  45) {SynthLeadPitchIsActive[45] = false;}
//     if (Pitch ==  46) {SynthLeadPitchIsActive[46] = false;}
//     if (Pitch ==  47) {SynthLeadPitchIsActive[47] = false;}
//     if (Pitch ==  48) {SynthLeadPitchIsActive[48] = false;}
//     if (Pitch ==  49) {SynthLeadPitchIsActive[49] = false;}
//     if (Pitch ==  50) {SynthLeadPitchIsActive[50] = false;}
//     if (Pitch ==  51) {SynthLeadPitchIsActive[51] = false;}
//     if (Pitch ==  52) {SynthLeadPitchIsActive[52] = false;}
//     if (Pitch ==  53) {SynthLeadPitchIsActive[53] = false;}
//     if (Pitch ==  54) {SynthLeadPitchIsActive[54] = false;}
//     if (Pitch ==  55) {SynthLeadPitchIsActive[55] = false;}
//     if (Pitch ==  56) {SynthLeadPitchIsActive[56] = false;}
//     if (Pitch ==  57) {SynthLeadPitchIsActive[57] = false;}
//     if (Pitch ==  58) {SynthLeadPitchIsActive[58] = false;}
//     if (Pitch ==  59) {SynthLeadPitchIsActive[59] = false;}
//     if (Pitch ==  60) {SynthLeadPitchIsActive[60] = false;}
//     if (Pitch ==  61) {SynthLeadPitchIsActive[61] = false;}
//     if (Pitch ==  62) {SynthLeadPitchIsActive[62] = false;}
//     if (Pitch ==  63) {SynthLeadPitchIsActive[63] = false;}
//     if (Pitch ==  64) {SynthLeadPitchIsActive[64] = false;}
//     if (Pitch ==  65) {SynthLeadPitchIsActive[65] = false;}
//     if (Pitch ==  66) {SynthLeadPitchIsActive[66] = false;}
//     if (Pitch ==  67) {SynthLeadPitchIsActive[67] = false;}
//     if (Pitch ==  68) {SynthLeadPitchIsActive[68] = false;}
//     if (Pitch ==  69) {SynthLeadPitchIsActive[69] = false;}
//     if (Pitch ==  70) {SynthLeadPitchIsActive[70] = false;}
//     if (Pitch ==  71) {SynthLeadPitchIsActive[71] = false;}
//     if (Pitch ==  72) {SynthLeadPitchIsActive[72] = false;}
//     if (Pitch ==  73) {SynthLeadPitchIsActive[73] = false;}
//     if (Pitch ==  74) {SynthLeadPitchIsActive[74] = false;}
//     if (Pitch ==  75) {SynthLeadPitchIsActive[75] = false;}
//     if (Pitch ==  76) {SynthLeadPitchIsActive[76] = false;}
//     if (Pitch ==  77) {SynthLeadPitchIsActive[77] = false;}
//     if (Pitch ==  78) {SynthLeadPitchIsActive[78] = false;}
//     if (Pitch ==  79) {SynthLeadPitchIsActive[79] = false;}
//     if (Pitch ==  80) {SynthLeadPitchIsActive[80] = false;}
//     if (Pitch ==  81) {SynthLeadPitchIsActive[81] = false;}
//     if (Pitch ==  82) {SynthLeadPitchIsActive[82] = false;}
//     if (Pitch ==  83) {SynthLeadPitchIsActive[83] = false;}
//     if (Pitch ==  84) {SynthLeadPitchIsActive[84] = false;}
//     if (Pitch ==  85) {SynthLeadPitchIsActive[85] = false;}
//     if (Pitch ==  86) {SynthLeadPitchIsActive[86] = false;}
//     if (Pitch ==  87) {SynthLeadPitchIsActive[87] = false;}
//     if (Pitch ==  88) {SynthLeadPitchIsActive[88] = false;}
//     if (Pitch ==  89) {SynthLeadPitchIsActive[89] = false;}
//     if (Pitch ==  90) {SynthLeadPitchIsActive[90] = false;}
//     if (Pitch ==  91) {SynthLeadPitchIsActive[91] = false;}
//     if (Pitch ==  92) {SynthLeadPitchIsActive[92] = false;}
//     if (Pitch ==  93) {SynthLeadPitchIsActive[93] = false;}
//     if (Pitch ==  94) {SynthLeadPitchIsActive[94] = false;}
//     if (Pitch ==  95) {SynthLeadPitchIsActive[95] = false;}
//     if (Pitch ==  96) {SynthLeadPitchIsActive[96] = false;}
//     if (Pitch ==  97) {SynthLeadPitchIsActive[97] = false;}
//     if (Pitch ==  98) {SynthLeadPitchIsActive[98] = false;}
//     if (Pitch ==  99) {SynthLeadPitchIsActive[99] = false;}
//     if (Pitch == 100) {SynthLeadPitchIsActive[100] = false;}
//     if (Pitch == 101) {SynthLeadPitchIsActive[101] = false;}
//     if (Pitch == 102) {SynthLeadPitchIsActive[102] = false;}
//     if (Pitch == 103) {SynthLeadPitchIsActive[103] = false;}
//     if (Pitch == 104) {SynthLeadPitchIsActive[104] = false;}
//     if (Pitch == 105) {SynthLeadPitchIsActive[105] = false;}
//     if (Pitch == 106) {SynthLeadPitchIsActive[106] = false;}
//     if (Pitch == 107) {SynthLeadPitchIsActive[107] = false;}
//     if (Pitch == 108) {SynthLeadPitchIsActive[108] = false;}
//     if (Pitch == 109) {SynthLeadPitchIsActive[109] = false;}
//     if (Pitch == 110) {SynthLeadPitchIsActive[110] = false;}
//     if (Pitch == 111) {SynthLeadPitchIsActive[111] = false;}
//     if (Pitch == 112) {SynthLeadPitchIsActive[112] = false;}
//     if (Pitch == 113) {SynthLeadPitchIsActive[113] = false;}
//     if (Pitch == 114) {SynthLeadPitchIsActive[114] = false;}
//     if (Pitch == 115) {SynthLeadPitchIsActive[115] = false;}
//     if (Pitch == 116) {SynthLeadPitchIsActive[116] = false;}
//     if (Pitch == 117) {SynthLeadPitchIsActive[117] = false;}
//     if (Pitch == 118) {SynthLeadPitchIsActive[118] = false;}
//     if (Pitch == 119) {SynthLeadPitchIsActive[119] = false;}
//     if (Pitch == 120) {SynthLeadPitchIsActive[120] = false;}
//     if (Pitch == 121) {SynthLeadPitchIsActive[121] = false;}
//     if (Pitch == 122) {SynthLeadPitchIsActive[122] = false;}
//     if (Pitch == 123) {SynthLeadPitchIsActive[123] = false;}
//     if (Pitch == 124) {SynthLeadPitchIsActive[124] = false;}
//     if (Pitch == 125) {SynthLeadPitchIsActive[125] = false;}
//     if (Pitch == 126) {SynthLeadPitchIsActive[126] = false;}
//     if (Pitch == 127) {SynthLeadPitchIsActive[127] = false;}
//   }
// }

// void SynthPadChannelNoteOff(){
//   if (Channel ==   12) {
//     if (Pitch ==   0) {SynthPadPitchIsActive[0] = false;}
//     if (Pitch ==   1) {SynthPadPitchIsActive[1] = false;}
//     if (Pitch ==   2) {SynthPadPitchIsActive[2] = false;}
//     if (Pitch ==   3) {SynthPadPitchIsActive[3] = false;}
//     if (Pitch ==   4) {SynthPadPitchIsActive[4] = false;}
//     if (Pitch ==   5) {SynthPadPitchIsActive[5] = false;}
//     if (Pitch ==   6) {SynthPadPitchIsActive[6] = false;}
//     if (Pitch ==   7) {SynthPadPitchIsActive[7] = false;}
//     if (Pitch ==   8) {SynthPadPitchIsActive[8] = false;}
//     if (Pitch ==   9) {SynthPadPitchIsActive[9] = false;}
//     if (Pitch ==  10) {SynthPadPitchIsActive[10] = false;}
//     if (Pitch ==  11) {SynthPadPitchIsActive[11] = false;}
//     if (Pitch ==  12) {SynthPadPitchIsActive[12] = false;}
//     if (Pitch ==  13) {SynthPadPitchIsActive[13] = false;}
//     if (Pitch ==  14) {SynthPadPitchIsActive[14] = false;}
//     if (Pitch ==  15) {SynthPadPitchIsActive[15] = false;}
//     if (Pitch ==  16) {SynthPadPitchIsActive[16] = false;}
//     if (Pitch ==  17) {SynthPadPitchIsActive[17] = false;}
//     if (Pitch ==  18) {SynthPadPitchIsActive[18] = false;}
//     if (Pitch ==  19) {SynthPadPitchIsActive[19] = false;}
//     if (Pitch ==  20) {SynthPadPitchIsActive[20] = false;}
//     if (Pitch ==  21) {SynthPadPitchIsActive[21] = false;}
//     if (Pitch ==  22) {SynthPadPitchIsActive[22] = false;}
//     if (Pitch ==  23) {SynthPadPitchIsActive[23] = false;}
//     if (Pitch ==  24) {SynthPadPitchIsActive[24] = false;}
//     if (Pitch ==  25) {SynthPadPitchIsActive[25] = false;}
//     if (Pitch ==  26) {SynthPadPitchIsActive[26] = false;}
//     if (Pitch ==  27) {SynthPadPitchIsActive[27] = false;}
//     if (Pitch ==  28) {SynthPadPitchIsActive[28] = false;}
//     if (Pitch ==  29) {SynthPadPitchIsActive[29] = false;}
//     if (Pitch ==  30) {SynthPadPitchIsActive[30] = false;}
//     if (Pitch ==  31) {SynthPadPitchIsActive[31] = false;}
//     if (Pitch ==  32) {SynthPadPitchIsActive[32] = false;}
//     if (Pitch ==  33) {SynthPadPitchIsActive[33] = false;}
//     if (Pitch ==  34) {SynthPadPitchIsActive[34] = false;}
//     if (Pitch ==  35) {SynthPadPitchIsActive[35] = false;}
//     if (Pitch ==  36) {SynthPadPitchIsActive[36] = false;}
//     if (Pitch ==  37) {SynthPadPitchIsActive[37] = false;}
//     if (Pitch ==  38) {SynthPadPitchIsActive[38] = false;}
//     if (Pitch ==  39) {SynthPadPitchIsActive[39] = false;}
//     if (Pitch ==  40) {SynthPadPitchIsActive[40] = false;}
//     if (Pitch ==  41) {SynthPadPitchIsActive[41] = false;}
//     if (Pitch ==  42) {SynthPadPitchIsActive[42] = false;}
//     if (Pitch ==  43) {SynthPadPitchIsActive[43] = false;}
//     if (Pitch ==  44) {SynthPadPitchIsActive[44] = false;}
//     if (Pitch ==  45) {SynthPadPitchIsActive[45] = false;}
//     if (Pitch ==  46) {SynthPadPitchIsActive[46] = false;}
//     if (Pitch ==  47) {SynthPadPitchIsActive[47] = false;}
//     if (Pitch ==  48) {SynthPadPitchIsActive[48] = false;}
//     if (Pitch ==  49) {SynthPadPitchIsActive[49] = false;}
//     if (Pitch ==  50) {SynthPadPitchIsActive[50] = false;}
//     if (Pitch ==  51) {SynthPadPitchIsActive[51] = false;}
//     if (Pitch ==  52) {SynthPadPitchIsActive[52] = false;}
//     if (Pitch ==  53) {SynthPadPitchIsActive[53] = false;}
//     if (Pitch ==  54) {SynthPadPitchIsActive[54] = false;}
//     if (Pitch ==  55) {SynthPadPitchIsActive[55] = false;}
//     if (Pitch ==  56) {SynthPadPitchIsActive[56] = false;}
//     if (Pitch ==  57) {SynthPadPitchIsActive[57] = false;}
//     if (Pitch ==  58) {SynthPadPitchIsActive[58] = false;}
//     if (Pitch ==  59) {SynthPadPitchIsActive[59] = false;}
//     if (Pitch ==  60) {SynthPadPitchIsActive[60] = false;}
//     if (Pitch ==  61) {SynthPadPitchIsActive[61] = false;}
//     if (Pitch ==  62) {SynthPadPitchIsActive[62] = false;}
//     if (Pitch ==  63) {SynthPadPitchIsActive[63] = false;}
//     if (Pitch ==  64) {SynthPadPitchIsActive[64] = false;}
//     if (Pitch ==  65) {SynthPadPitchIsActive[65] = false;}
//     if (Pitch ==  66) {SynthPadPitchIsActive[66] = false;}
//     if (Pitch ==  67) {SynthPadPitchIsActive[67] = false;}
//     if (Pitch ==  68) {SynthPadPitchIsActive[68] = false;}
//     if (Pitch ==  69) {SynthPadPitchIsActive[69] = false;}
//     if (Pitch ==  70) {SynthPadPitchIsActive[70] = false;}
//     if (Pitch ==  71) {SynthPadPitchIsActive[71] = false;}
//     if (Pitch ==  72) {SynthPadPitchIsActive[72] = false;}
//     if (Pitch ==  73) {SynthPadPitchIsActive[73] = false;}
//     if (Pitch ==  74) {SynthPadPitchIsActive[74] = false;}
//     if (Pitch ==  75) {SynthPadPitchIsActive[75] = false;}
//     if (Pitch ==  76) {SynthPadPitchIsActive[76] = false;}
//     if (Pitch ==  77) {SynthPadPitchIsActive[77] = false;}
//     if (Pitch ==  78) {SynthPadPitchIsActive[78] = false;}
//     if (Pitch ==  79) {SynthPadPitchIsActive[79] = false;}
//     if (Pitch ==  80) {SynthPadPitchIsActive[80] = false;}
//     if (Pitch ==  81) {SynthPadPitchIsActive[81] = false;}
//     if (Pitch ==  82) {SynthPadPitchIsActive[82] = false;}
//     if (Pitch ==  83) {SynthPadPitchIsActive[83] = false;}
//     if (Pitch ==  84) {SynthPadPitchIsActive[84] = false;}
//     if (Pitch ==  85) {SynthPadPitchIsActive[85] = false;}
//     if (Pitch ==  86) {SynthPadPitchIsActive[86] = false;}
//     if (Pitch ==  87) {SynthPadPitchIsActive[87] = false;}
//     if (Pitch ==  88) {SynthPadPitchIsActive[88] = false;}
//     if (Pitch ==  89) {SynthPadPitchIsActive[89] = false;}
//     if (Pitch ==  90) {SynthPadPitchIsActive[90] = false;}
//     if (Pitch ==  91) {SynthPadPitchIsActive[91] = false;}
//     if (Pitch ==  92) {SynthPadPitchIsActive[92] = false;}
//     if (Pitch ==  93) {SynthPadPitchIsActive[93] = false;}
//     if (Pitch ==  94) {SynthPadPitchIsActive[94] = false;}
//     if (Pitch ==  95) {SynthPadPitchIsActive[95] = false;}
//     if (Pitch ==  96) {SynthPadPitchIsActive[96] = false;}
//     if (Pitch ==  97) {SynthPadPitchIsActive[97] = false;}
//     if (Pitch ==  98) {SynthPadPitchIsActive[98] = false;}
//     if (Pitch ==  99) {SynthPadPitchIsActive[99] = false;}
//     if (Pitch == 100) {SynthPadPitchIsActive[100] = false;}
//     if (Pitch == 101) {SynthPadPitchIsActive[101] = false;}
//     if (Pitch == 102) {SynthPadPitchIsActive[102] = false;}
//     if (Pitch == 103) {SynthPadPitchIsActive[103] = false;}
//     if (Pitch == 104) {SynthPadPitchIsActive[104] = false;}
//     if (Pitch == 105) {SynthPadPitchIsActive[105] = false;}
//     if (Pitch == 106) {SynthPadPitchIsActive[106] = false;}
//     if (Pitch == 107) {SynthPadPitchIsActive[107] = false;}
//     if (Pitch == 108) {SynthPadPitchIsActive[108] = false;}
//     if (Pitch == 109) {SynthPadPitchIsActive[109] = false;}
//     if (Pitch == 110) {SynthPadPitchIsActive[110] = false;}
//     if (Pitch == 111) {SynthPadPitchIsActive[111] = false;}
//     if (Pitch == 112) {SynthPadPitchIsActive[112] = false;}
//     if (Pitch == 113) {SynthPadPitchIsActive[113] = false;}
//     if (Pitch == 114) {SynthPadPitchIsActive[114] = false;}
//     if (Pitch == 115) {SynthPadPitchIsActive[115] = false;}
//     if (Pitch == 116) {SynthPadPitchIsActive[116] = false;}
//     if (Pitch == 117) {SynthPadPitchIsActive[117] = false;}
//     if (Pitch == 118) {SynthPadPitchIsActive[118] = false;}
//     if (Pitch == 119) {SynthPadPitchIsActive[119] = false;}
//     if (Pitch == 120) {SynthPadPitchIsActive[120] = false;}
//     if (Pitch == 121) {SynthPadPitchIsActive[121] = false;}
//     if (Pitch == 122) {SynthPadPitchIsActive[122] = false;}
//     if (Pitch == 123) {SynthPadPitchIsActive[123] = false;}
//     if (Pitch == 124) {SynthPadPitchIsActive[124] = false;}
//     if (Pitch == 125) {SynthPadPitchIsActive[125] = false;}
//     if (Pitch == 126) {SynthPadPitchIsActive[126] = false;}
//     if (Pitch == 127) {SynthPadPitchIsActive[127] = false;}
//   }
// }

// void SynthEffectsChannelNoteOff(){
//   if (Channel ==   13) {
//     if (Pitch ==   0) {SynthEffectsPitchIsActive[0] = false;}
//     if (Pitch ==   1) {SynthEffectsPitchIsActive[1] = false;}
//     if (Pitch ==   2) {SynthEffectsPitchIsActive[2] = false;}
//     if (Pitch ==   3) {SynthEffectsPitchIsActive[3] = false;}
//     if (Pitch ==   4) {SynthEffectsPitchIsActive[4] = false;}
//     if (Pitch ==   5) {SynthEffectsPitchIsActive[5] = false;}
//     if (Pitch ==   6) {SynthEffectsPitchIsActive[6] = false;}
//     if (Pitch ==   7) {SynthEffectsPitchIsActive[7] = false;}
//     if (Pitch ==   8) {SynthEffectsPitchIsActive[8] = false;}
//     if (Pitch ==   9) {SynthEffectsPitchIsActive[9] = false;}
//     if (Pitch ==  10) {SynthEffectsPitchIsActive[10] = false;}
//     if (Pitch ==  11) {SynthEffectsPitchIsActive[11] = false;}
//     if (Pitch ==  12) {SynthEffectsPitchIsActive[12] = false;}
//     if (Pitch ==  13) {SynthEffectsPitchIsActive[13] = false;}
//     if (Pitch ==  14) {SynthEffectsPitchIsActive[14] = false;}
//     if (Pitch ==  15) {SynthEffectsPitchIsActive[15] = false;}
//     if (Pitch ==  16) {SynthEffectsPitchIsActive[16] = false;}
//     if (Pitch ==  17) {SynthEffectsPitchIsActive[17] = false;}
//     if (Pitch ==  18) {SynthEffectsPitchIsActive[18] = false;}
//     if (Pitch ==  19) {SynthEffectsPitchIsActive[19] = false;}
//     if (Pitch ==  20) {SynthEffectsPitchIsActive[20] = false;}
//     if (Pitch ==  21) {SynthEffectsPitchIsActive[21] = false;}
//     if (Pitch ==  22) {SynthEffectsPitchIsActive[22] = false;}
//     if (Pitch ==  23) {SynthEffectsPitchIsActive[23] = false;}
//     if (Pitch ==  24) {SynthEffectsPitchIsActive[24] = false;}
//     if (Pitch ==  25) {SynthEffectsPitchIsActive[25] = false;}
//     if (Pitch ==  26) {SynthEffectsPitchIsActive[26] = false;}
//     if (Pitch ==  27) {SynthEffectsPitchIsActive[27] = false;}
//     if (Pitch ==  28) {SynthEffectsPitchIsActive[28] = false;}
//     if (Pitch ==  29) {SynthEffectsPitchIsActive[29] = false;}
//     if (Pitch ==  30) {SynthEffectsPitchIsActive[30] = false;}
//     if (Pitch ==  31) {SynthEffectsPitchIsActive[31] = false;}
//     if (Pitch ==  32) {SynthEffectsPitchIsActive[32] = false;}
//     if (Pitch ==  33) {SynthEffectsPitchIsActive[33] = false;}
//     if (Pitch ==  34) {SynthEffectsPitchIsActive[34] = false;}
//     if (Pitch ==  35) {SynthEffectsPitchIsActive[35] = false;}
//     if (Pitch ==  36) {SynthEffectsPitchIsActive[36] = false;}
//     if (Pitch ==  37) {SynthEffectsPitchIsActive[37] = false;}
//     if (Pitch ==  38) {SynthEffectsPitchIsActive[38] = false;}
//     if (Pitch ==  39) {SynthEffectsPitchIsActive[39] = false;}
//     if (Pitch ==  40) {SynthEffectsPitchIsActive[40] = false;}
//     if (Pitch ==  41) {SynthEffectsPitchIsActive[41] = false;}
//     if (Pitch ==  42) {SynthEffectsPitchIsActive[42] = false;}
//     if (Pitch ==  43) {SynthEffectsPitchIsActive[43] = false;}
//     if (Pitch ==  44) {SynthEffectsPitchIsActive[44] = false;}
//     if (Pitch ==  45) {SynthEffectsPitchIsActive[45] = false;}
//     if (Pitch ==  46) {SynthEffectsPitchIsActive[46] = false;}
//     if (Pitch ==  47) {SynthEffectsPitchIsActive[47] = false;}
//     if (Pitch ==  48) {SynthEffectsPitchIsActive[48] = false;}
//     if (Pitch ==  49) {SynthEffectsPitchIsActive[49] = false;}
//     if (Pitch ==  50) {SynthEffectsPitchIsActive[50] = false;}
//     if (Pitch ==  51) {SynthEffectsPitchIsActive[51] = false;}
//     if (Pitch ==  52) {SynthEffectsPitchIsActive[52] = false;}
//     if (Pitch ==  53) {SynthEffectsPitchIsActive[53] = false;}
//     if (Pitch ==  54) {SynthEffectsPitchIsActive[54] = false;}
//     if (Pitch ==  55) {SynthEffectsPitchIsActive[55] = false;}
//     if (Pitch ==  56) {SynthEffectsPitchIsActive[56] = false;}
//     if (Pitch ==  57) {SynthEffectsPitchIsActive[57] = false;}
//     if (Pitch ==  58) {SynthEffectsPitchIsActive[58] = false;}
//     if (Pitch ==  59) {SynthEffectsPitchIsActive[59] = false;}
//     if (Pitch ==  60) {SynthEffectsPitchIsActive[60] = false;}
//     if (Pitch ==  61) {SynthEffectsPitchIsActive[61] = false;}
//     if (Pitch ==  62) {SynthEffectsPitchIsActive[62] = false;}
//     if (Pitch ==  63) {SynthEffectsPitchIsActive[63] = false;}
//     if (Pitch ==  64) {SynthEffectsPitchIsActive[64] = false;}
//     if (Pitch ==  65) {SynthEffectsPitchIsActive[65] = false;}
//     if (Pitch ==  66) {SynthEffectsPitchIsActive[66] = false;}
//     if (Pitch ==  67) {SynthEffectsPitchIsActive[67] = false;}
//     if (Pitch ==  68) {SynthEffectsPitchIsActive[68] = false;}
//     if (Pitch ==  69) {SynthEffectsPitchIsActive[69] = false;}
//     if (Pitch ==  70) {SynthEffectsPitchIsActive[70] = false;}
//     if (Pitch ==  71) {SynthEffectsPitchIsActive[71] = false;}
//     if (Pitch ==  72) {SynthEffectsPitchIsActive[72] = false;}
//     if (Pitch ==  73) {SynthEffectsPitchIsActive[73] = false;}
//     if (Pitch ==  74) {SynthEffectsPitchIsActive[74] = false;}
//     if (Pitch ==  75) {SynthEffectsPitchIsActive[75] = false;}
//     if (Pitch ==  76) {SynthEffectsPitchIsActive[76] = false;}
//     if (Pitch ==  77) {SynthEffectsPitchIsActive[77] = false;}
//     if (Pitch ==  78) {SynthEffectsPitchIsActive[78] = false;}
//     if (Pitch ==  79) {SynthEffectsPitchIsActive[79] = false;}
//     if (Pitch ==  80) {SynthEffectsPitchIsActive[80] = false;}
//     if (Pitch ==  81) {SynthEffectsPitchIsActive[81] = false;}
//     if (Pitch ==  82) {SynthEffectsPitchIsActive[82] = false;}
//     if (Pitch ==  83) {SynthEffectsPitchIsActive[83] = false;}
//     if (Pitch ==  84) {SynthEffectsPitchIsActive[84] = false;}
//     if (Pitch ==  85) {SynthEffectsPitchIsActive[85] = false;}
//     if (Pitch ==  86) {SynthEffectsPitchIsActive[86] = false;}
//     if (Pitch ==  87) {SynthEffectsPitchIsActive[87] = false;}
//     if (Pitch ==  88) {SynthEffectsPitchIsActive[88] = false;}
//     if (Pitch ==  89) {SynthEffectsPitchIsActive[89] = false;}
//     if (Pitch ==  90) {SynthEffectsPitchIsActive[90] = false;}
//     if (Pitch ==  91) {SynthEffectsPitchIsActive[91] = false;}
//     if (Pitch ==  92) {SynthEffectsPitchIsActive[92] = false;}
//     if (Pitch ==  93) {SynthEffectsPitchIsActive[93] = false;}
//     if (Pitch ==  94) {SynthEffectsPitchIsActive[94] = false;}
//     if (Pitch ==  95) {SynthEffectsPitchIsActive[95] = false;}
//     if (Pitch ==  96) {SynthEffectsPitchIsActive[96] = false;}
//     if (Pitch ==  97) {SynthEffectsPitchIsActive[97] = false;}
//     if (Pitch ==  98) {SynthEffectsPitchIsActive[98] = false;}
//     if (Pitch ==  99) {SynthEffectsPitchIsActive[99] = false;}
//     if (Pitch == 100) {SynthEffectsPitchIsActive[100] = false;}
//     if (Pitch == 101) {SynthEffectsPitchIsActive[101] = false;}
//     if (Pitch == 102) {SynthEffectsPitchIsActive[102] = false;}
//     if (Pitch == 103) {SynthEffectsPitchIsActive[103] = false;}
//     if (Pitch == 104) {SynthEffectsPitchIsActive[104] = false;}
//     if (Pitch == 105) {SynthEffectsPitchIsActive[105] = false;}
//     if (Pitch == 106) {SynthEffectsPitchIsActive[106] = false;}
//     if (Pitch == 107) {SynthEffectsPitchIsActive[107] = false;}
//     if (Pitch == 108) {SynthEffectsPitchIsActive[108] = false;}
//     if (Pitch == 109) {SynthEffectsPitchIsActive[109] = false;}
//     if (Pitch == 110) {SynthEffectsPitchIsActive[110] = false;}
//     if (Pitch == 111) {SynthEffectsPitchIsActive[111] = false;}
//     if (Pitch == 112) {SynthEffectsPitchIsActive[112] = false;}
//     if (Pitch == 113) {SynthEffectsPitchIsActive[113] = false;}
//     if (Pitch == 114) {SynthEffectsPitchIsActive[114] = false;}
//     if (Pitch == 115) {SynthEffectsPitchIsActive[115] = false;}
//     if (Pitch == 116) {SynthEffectsPitchIsActive[116] = false;}
//     if (Pitch == 117) {SynthEffectsPitchIsActive[117] = false;}
//     if (Pitch == 118) {SynthEffectsPitchIsActive[118] = false;}
//     if (Pitch == 119) {SynthEffectsPitchIsActive[119] = false;}
//     if (Pitch == 120) {SynthEffectsPitchIsActive[120] = false;}
//     if (Pitch == 121) {SynthEffectsPitchIsActive[121] = false;}
//     if (Pitch == 122) {SynthEffectsPitchIsActive[122] = false;}
//     if (Pitch == 123) {SynthEffectsPitchIsActive[123] = false;}
//     if (Pitch == 124) {SynthEffectsPitchIsActive[124] = false;}
//     if (Pitch == 125) {SynthEffectsPitchIsActive[125] = false;}
//     if (Pitch == 126) {SynthEffectsPitchIsActive[126] = false;}
//     if (Pitch == 127) {SynthEffectsPitchIsActive[127] = false;}
//   }
// }

// void EthnicChannelNoteOff(){
//   if (Channel ==   14) {
//     if (Pitch ==   0) {EthnicPitchIsActive[0] = false;}
//     if (Pitch ==   1) {EthnicPitchIsActive[1] = false;}
//     if (Pitch ==   2) {EthnicPitchIsActive[2] = false;}
//     if (Pitch ==   3) {EthnicPitchIsActive[3] = false;}
//     if (Pitch ==   4) {EthnicPitchIsActive[4] = false;}
//     if (Pitch ==   5) {EthnicPitchIsActive[5] = false;}
//     if (Pitch ==   6) {EthnicPitchIsActive[6] = false;}
//     if (Pitch ==   7) {EthnicPitchIsActive[7] = false;}
//     if (Pitch ==   8) {EthnicPitchIsActive[8] = false;}
//     if (Pitch ==   9) {EthnicPitchIsActive[9] = false;}
//     if (Pitch ==  10) {EthnicPitchIsActive[10] = false;}
//     if (Pitch ==  11) {EthnicPitchIsActive[11] = false;}
//     if (Pitch ==  12) {EthnicPitchIsActive[12] = false;}
//     if (Pitch ==  13) {EthnicPitchIsActive[13] = false;}
//     if (Pitch ==  14) {EthnicPitchIsActive[14] = false;}
//     if (Pitch ==  15) {EthnicPitchIsActive[15] = false;}
//     if (Pitch ==  16) {EthnicPitchIsActive[16] = false;}
//     if (Pitch ==  17) {EthnicPitchIsActive[17] = false;}
//     if (Pitch ==  18) {EthnicPitchIsActive[18] = false;}
//     if (Pitch ==  19) {EthnicPitchIsActive[19] = false;}
//     if (Pitch ==  20) {EthnicPitchIsActive[20] = false;}
//     if (Pitch ==  21) {EthnicPitchIsActive[21] = false;}
//     if (Pitch ==  22) {EthnicPitchIsActive[22] = false;}
//     if (Pitch ==  23) {EthnicPitchIsActive[23] = false;}
//     if (Pitch ==  24) {EthnicPitchIsActive[24] = false;}
//     if (Pitch ==  25) {EthnicPitchIsActive[25] = false;}
//     if (Pitch ==  26) {EthnicPitchIsActive[26] = false;}
//     if (Pitch ==  27) {EthnicPitchIsActive[27] = false;}
//     if (Pitch ==  28) {EthnicPitchIsActive[28] = false;}
//     if (Pitch ==  29) {EthnicPitchIsActive[29] = false;}
//     if (Pitch ==  30) {EthnicPitchIsActive[30] = false;}
//     if (Pitch ==  31) {EthnicPitchIsActive[31] = false;}
//     if (Pitch ==  32) {EthnicPitchIsActive[32] = false;}
//     if (Pitch ==  33) {EthnicPitchIsActive[33] = false;}
//     if (Pitch ==  34) {EthnicPitchIsActive[34] = false;}
//     if (Pitch ==  35) {EthnicPitchIsActive[35] = false;}
//     if (Pitch ==  36) {EthnicPitchIsActive[36] = false;}
//     if (Pitch ==  37) {EthnicPitchIsActive[37] = false;}
//     if (Pitch ==  38) {EthnicPitchIsActive[38] = false;}
//     if (Pitch ==  39) {EthnicPitchIsActive[39] = false;}
//     if (Pitch ==  40) {EthnicPitchIsActive[40] = false;}
//     if (Pitch ==  41) {EthnicPitchIsActive[41] = false;}
//     if (Pitch ==  42) {EthnicPitchIsActive[42] = false;}
//     if (Pitch ==  43) {EthnicPitchIsActive[43] = false;}
//     if (Pitch ==  44) {EthnicPitchIsActive[44] = false;}
//     if (Pitch ==  45) {EthnicPitchIsActive[45] = false;}
//     if (Pitch ==  46) {EthnicPitchIsActive[46] = false;}
//     if (Pitch ==  47) {EthnicPitchIsActive[47] = false;}
//     if (Pitch ==  48) {EthnicPitchIsActive[48] = false;}
//     if (Pitch ==  49) {EthnicPitchIsActive[49] = false;}
//     if (Pitch ==  50) {EthnicPitchIsActive[50] = false;}
//     if (Pitch ==  51) {EthnicPitchIsActive[51] = false;}
//     if (Pitch ==  52) {EthnicPitchIsActive[52] = false;}
//     if (Pitch ==  53) {EthnicPitchIsActive[53] = false;}
//     if (Pitch ==  54) {EthnicPitchIsActive[54] = false;}
//     if (Pitch ==  55) {EthnicPitchIsActive[55] = false;}
//     if (Pitch ==  56) {EthnicPitchIsActive[56] = false;}
//     if (Pitch ==  57) {EthnicPitchIsActive[57] = false;}
//     if (Pitch ==  58) {EthnicPitchIsActive[58] = false;}
//     if (Pitch ==  59) {EthnicPitchIsActive[59] = false;}
//     if (Pitch ==  60) {EthnicPitchIsActive[60] = false;}
//     if (Pitch ==  61) {EthnicPitchIsActive[61] = false;}
//     if (Pitch ==  62) {EthnicPitchIsActive[62] = false;}
//     if (Pitch ==  63) {EthnicPitchIsActive[63] = false;}
//     if (Pitch ==  64) {EthnicPitchIsActive[64] = false;}
//     if (Pitch ==  65) {EthnicPitchIsActive[65] = false;}
//     if (Pitch ==  66) {EthnicPitchIsActive[66] = false;}
//     if (Pitch ==  67) {EthnicPitchIsActive[67] = false;}
//     if (Pitch ==  68) {EthnicPitchIsActive[68] = false;}
//     if (Pitch ==  69) {EthnicPitchIsActive[69] = false;}
//     if (Pitch ==  70) {EthnicPitchIsActive[70] = false;}
//     if (Pitch ==  71) {EthnicPitchIsActive[71] = false;}
//     if (Pitch ==  72) {EthnicPitchIsActive[72] = false;}
//     if (Pitch ==  73) {EthnicPitchIsActive[73] = false;}
//     if (Pitch ==  74) {EthnicPitchIsActive[74] = false;}
//     if (Pitch ==  75) {EthnicPitchIsActive[75] = false;}
//     if (Pitch ==  76) {EthnicPitchIsActive[76] = false;}
//     if (Pitch ==  77) {EthnicPitchIsActive[77] = false;}
//     if (Pitch ==  78) {EthnicPitchIsActive[78] = false;}
//     if (Pitch ==  79) {EthnicPitchIsActive[79] = false;}
//     if (Pitch ==  80) {EthnicPitchIsActive[80] = false;}
//     if (Pitch ==  81) {EthnicPitchIsActive[81] = false;}
//     if (Pitch ==  82) {EthnicPitchIsActive[82] = false;}
//     if (Pitch ==  83) {EthnicPitchIsActive[83] = false;}
//     if (Pitch ==  84) {EthnicPitchIsActive[84] = false;}
//     if (Pitch ==  85) {EthnicPitchIsActive[85] = false;}
//     if (Pitch ==  86) {EthnicPitchIsActive[86] = false;}
//     if (Pitch ==  87) {EthnicPitchIsActive[87] = false;}
//     if (Pitch ==  88) {EthnicPitchIsActive[88] = false;}
//     if (Pitch ==  89) {EthnicPitchIsActive[89] = false;}
//     if (Pitch ==  90) {EthnicPitchIsActive[90] = false;}
//     if (Pitch ==  91) {EthnicPitchIsActive[91] = false;}
//     if (Pitch ==  92) {EthnicPitchIsActive[92] = false;}
//     if (Pitch ==  93) {EthnicPitchIsActive[93] = false;}
//     if (Pitch ==  94) {EthnicPitchIsActive[94] = false;}
//     if (Pitch ==  95) {EthnicPitchIsActive[95] = false;}
//     if (Pitch ==  96) {EthnicPitchIsActive[96] = false;}
//     if (Pitch ==  97) {EthnicPitchIsActive[97] = false;}
//     if (Pitch ==  98) {EthnicPitchIsActive[98] = false;}
//     if (Pitch ==  99) {EthnicPitchIsActive[99] = false;}
//     if (Pitch == 100) {EthnicPitchIsActive[100] = false;}
//     if (Pitch == 101) {EthnicPitchIsActive[101] = false;}
//     if (Pitch == 102) {EthnicPitchIsActive[102] = false;}
//     if (Pitch == 103) {EthnicPitchIsActive[103] = false;}
//     if (Pitch == 104) {EthnicPitchIsActive[104] = false;}
//     if (Pitch == 105) {EthnicPitchIsActive[105] = false;}
//     if (Pitch == 106) {EthnicPitchIsActive[106] = false;}
//     if (Pitch == 107) {EthnicPitchIsActive[107] = false;}
//     if (Pitch == 108) {EthnicPitchIsActive[108] = false;}
//     if (Pitch == 109) {EthnicPitchIsActive[109] = false;}
//     if (Pitch == 110) {EthnicPitchIsActive[110] = false;}
//     if (Pitch == 111) {EthnicPitchIsActive[111] = false;}
//     if (Pitch == 112) {EthnicPitchIsActive[112] = false;}
//     if (Pitch == 113) {EthnicPitchIsActive[113] = false;}
//     if (Pitch == 114) {EthnicPitchIsActive[114] = false;}
//     if (Pitch == 115) {EthnicPitchIsActive[115] = false;}
//     if (Pitch == 116) {EthnicPitchIsActive[116] = false;}
//     if (Pitch == 117) {EthnicPitchIsActive[117] = false;}
//     if (Pitch == 118) {EthnicPitchIsActive[118] = false;}
//     if (Pitch == 119) {EthnicPitchIsActive[119] = false;}
//     if (Pitch == 120) {EthnicPitchIsActive[120] = false;}
//     if (Pitch == 121) {EthnicPitchIsActive[121] = false;}
//     if (Pitch == 122) {EthnicPitchIsActive[122] = false;}
//     if (Pitch == 123) {EthnicPitchIsActive[123] = false;}
//     if (Pitch == 124) {EthnicPitchIsActive[124] = false;}
//     if (Pitch == 125) {EthnicPitchIsActive[125] = false;}
//     if (Pitch == 126) {EthnicPitchIsActive[126] = false;}
//     if (Pitch == 127) {EthnicPitchIsActive[127] = false;}
//   }
// }

// void PercussiveChannelNoteOff(){
//   if (Channel ==   15) {
//     if (Pitch ==   0) {PercussivePitchIsActive[0] = false;}
//     if (Pitch ==   1) {PercussivePitchIsActive[1] = false;}
//     if (Pitch ==   2) {PercussivePitchIsActive[2] = false;}
//     if (Pitch ==   3) {PercussivePitchIsActive[3] = false;}
//     if (Pitch ==   4) {PercussivePitchIsActive[4] = false;}
//     if (Pitch ==   5) {PercussivePitchIsActive[5] = false;}
//     if (Pitch ==   6) {PercussivePitchIsActive[6] = false;}
//     if (Pitch ==   7) {PercussivePitchIsActive[7] = false;}
//     if (Pitch ==   8) {PercussivePitchIsActive[8] = false;}
//     if (Pitch ==   9) {PercussivePitchIsActive[9] = false;}
//     if (Pitch ==  10) {PercussivePitchIsActive[10] = false;}
//     if (Pitch ==  11) {PercussivePitchIsActive[11] = false;}
//     if (Pitch ==  12) {PercussivePitchIsActive[12] = false;}
//     if (Pitch ==  13) {PercussivePitchIsActive[13] = false;}
//     if (Pitch ==  14) {PercussivePitchIsActive[14] = false;}
//     if (Pitch ==  15) {PercussivePitchIsActive[15] = false;}
//     if (Pitch ==  16) {PercussivePitchIsActive[16] = false;}
//     if (Pitch ==  17) {PercussivePitchIsActive[17] = false;}
//     if (Pitch ==  18) {PercussivePitchIsActive[18] = false;}
//     if (Pitch ==  19) {PercussivePitchIsActive[19] = false;}
//     if (Pitch ==  20) {PercussivePitchIsActive[20] = false;}
//     if (Pitch ==  21) {PercussivePitchIsActive[21] = false;}
//     if (Pitch ==  22) {PercussivePitchIsActive[22] = false;}
//     if (Pitch ==  23) {PercussivePitchIsActive[23] = false;}
//     if (Pitch ==  24) {PercussivePitchIsActive[24] = false;}
//     if (Pitch ==  25) {PercussivePitchIsActive[25] = false;}
//     if (Pitch ==  26) {PercussivePitchIsActive[26] = false;}
//     if (Pitch ==  27) {PercussivePitchIsActive[27] = false;}
//     if (Pitch ==  28) {PercussivePitchIsActive[28] = false;}
//     if (Pitch ==  29) {PercussivePitchIsActive[29] = false;}
//     if (Pitch ==  30) {PercussivePitchIsActive[30] = false;}
//     if (Pitch ==  31) {PercussivePitchIsActive[31] = false;}
//     if (Pitch ==  32) {PercussivePitchIsActive[32] = false;}
//     if (Pitch ==  33) {PercussivePitchIsActive[33] = false;}
//     if (Pitch ==  34) {PercussivePitchIsActive[34] = false;}
//     if (Pitch ==  35) {PercussivePitchIsActive[35] = false;}
//     if (Pitch ==  36) {PercussivePitchIsActive[36] = false;}
//     if (Pitch ==  37) {PercussivePitchIsActive[37] = false;}
//     if (Pitch ==  38) {PercussivePitchIsActive[38] = false;}
//     if (Pitch ==  39) {PercussivePitchIsActive[39] = false;}
//     if (Pitch ==  40) {PercussivePitchIsActive[40] = false;}
//     if (Pitch ==  41) {PercussivePitchIsActive[41] = false;}
//     if (Pitch ==  42) {PercussivePitchIsActive[42] = false;}
//     if (Pitch ==  43) {PercussivePitchIsActive[43] = false;}
//     if (Pitch ==  44) {PercussivePitchIsActive[44] = false;}
//     if (Pitch ==  45) {PercussivePitchIsActive[45] = false;}
//     if (Pitch ==  46) {PercussivePitchIsActive[46] = false;}
//     if (Pitch ==  47) {PercussivePitchIsActive[47] = false;}
//     if (Pitch ==  48) {PercussivePitchIsActive[48] = false;}
//     if (Pitch ==  49) {PercussivePitchIsActive[49] = false;}
//     if (Pitch ==  50) {PercussivePitchIsActive[50] = false;}
//     if (Pitch ==  51) {PercussivePitchIsActive[51] = false;}
//     if (Pitch ==  52) {PercussivePitchIsActive[52] = false;}
//     if (Pitch ==  53) {PercussivePitchIsActive[53] = false;}
//     if (Pitch ==  54) {PercussivePitchIsActive[54] = false;}
//     if (Pitch ==  55) {PercussivePitchIsActive[55] = false;}
//     if (Pitch ==  56) {PercussivePitchIsActive[56] = false;}
//     if (Pitch ==  57) {PercussivePitchIsActive[57] = false;}
//     if (Pitch ==  58) {PercussivePitchIsActive[58] = false;}
//     if (Pitch ==  59) {PercussivePitchIsActive[59] = false;}
//     if (Pitch ==  60) {PercussivePitchIsActive[60] = false;}
//     if (Pitch ==  61) {PercussivePitchIsActive[61] = false;}
//     if (Pitch ==  62) {PercussivePitchIsActive[62] = false;}
//     if (Pitch ==  63) {PercussivePitchIsActive[63] = false;}
//     if (Pitch ==  64) {PercussivePitchIsActive[64] = false;}
//     if (Pitch ==  65) {PercussivePitchIsActive[65] = false;}
//     if (Pitch ==  66) {PercussivePitchIsActive[66] = false;}
//     if (Pitch ==  67) {PercussivePitchIsActive[67] = false;}
//     if (Pitch ==  68) {PercussivePitchIsActive[68] = false;}
//     if (Pitch ==  69) {PercussivePitchIsActive[69] = false;}
//     if (Pitch ==  70) {PercussivePitchIsActive[70] = false;}
//     if (Pitch ==  71) {PercussivePitchIsActive[71] = false;}
//     if (Pitch ==  72) {PercussivePitchIsActive[72] = false;}
//     if (Pitch ==  73) {PercussivePitchIsActive[73] = false;}
//     if (Pitch ==  74) {PercussivePitchIsActive[74] = false;}
//     if (Pitch ==  75) {PercussivePitchIsActive[75] = false;}
//     if (Pitch ==  76) {PercussivePitchIsActive[76] = false;}
//     if (Pitch ==  77) {PercussivePitchIsActive[77] = false;}
//     if (Pitch ==  78) {PercussivePitchIsActive[78] = false;}
//     if (Pitch ==  79) {PercussivePitchIsActive[79] = false;}
//     if (Pitch ==  80) {PercussivePitchIsActive[80] = false;}
//     if (Pitch ==  81) {PercussivePitchIsActive[81] = false;}
//     if (Pitch ==  82) {PercussivePitchIsActive[82] = false;}
//     if (Pitch ==  83) {PercussivePitchIsActive[83] = false;}
//     if (Pitch ==  84) {PercussivePitchIsActive[84] = false;}
//     if (Pitch ==  85) {PercussivePitchIsActive[85] = false;}
//     if (Pitch ==  86) {PercussivePitchIsActive[86] = false;}
//     if (Pitch ==  87) {PercussivePitchIsActive[87] = false;}
//     if (Pitch ==  88) {PercussivePitchIsActive[88] = false;}
//     if (Pitch ==  89) {PercussivePitchIsActive[89] = false;}
//     if (Pitch ==  90) {PercussivePitchIsActive[90] = false;}
//     if (Pitch ==  91) {PercussivePitchIsActive[91] = false;}
//     if (Pitch ==  92) {PercussivePitchIsActive[92] = false;}
//     if (Pitch ==  93) {PercussivePitchIsActive[93] = false;}
//     if (Pitch ==  94) {PercussivePitchIsActive[94] = false;}
//     if (Pitch ==  95) {PercussivePitchIsActive[95] = false;}
//     if (Pitch ==  96) {PercussivePitchIsActive[96] = false;}
//     if (Pitch ==  97) {PercussivePitchIsActive[97] = false;}
//     if (Pitch ==  98) {PercussivePitchIsActive[98] = false;}
//     if (Pitch ==  99) {PercussivePitchIsActive[99] = false;}
//     if (Pitch == 100) {PercussivePitchIsActive[100] = false;}
//     if (Pitch == 101) {PercussivePitchIsActive[101] = false;}
//     if (Pitch == 102) {PercussivePitchIsActive[102] = false;}
//     if (Pitch == 103) {PercussivePitchIsActive[103] = false;}
//     if (Pitch == 104) {PercussivePitchIsActive[104] = false;}
//     if (Pitch == 105) {PercussivePitchIsActive[105] = false;}
//     if (Pitch == 106) {PercussivePitchIsActive[106] = false;}
//     if (Pitch == 107) {PercussivePitchIsActive[107] = false;}
//     if (Pitch == 108) {PercussivePitchIsActive[108] = false;}
//     if (Pitch == 109) {PercussivePitchIsActive[109] = false;}
//     if (Pitch == 110) {PercussivePitchIsActive[110] = false;}
//     if (Pitch == 111) {PercussivePitchIsActive[111] = false;}
//     if (Pitch == 112) {PercussivePitchIsActive[112] = false;}
//     if (Pitch == 113) {PercussivePitchIsActive[113] = false;}
//     if (Pitch == 114) {PercussivePitchIsActive[114] = false;}
//     if (Pitch == 115) {PercussivePitchIsActive[115] = false;}
//     if (Pitch == 116) {PercussivePitchIsActive[116] = false;}
//     if (Pitch == 117) {PercussivePitchIsActive[117] = false;}
//     if (Pitch == 118) {PercussivePitchIsActive[118] = false;}
//     if (Pitch == 119) {PercussivePitchIsActive[119] = false;}
//     if (Pitch == 120) {PercussivePitchIsActive[120] = false;}
//     if (Pitch == 121) {PercussivePitchIsActive[121] = false;}
//     if (Pitch == 122) {PercussivePitchIsActive[122] = false;}
//     if (Pitch == 123) {PercussivePitchIsActive[123] = false;}
//     if (Pitch == 124) {PercussivePitchIsActive[124] = false;}
//     if (Pitch == 125) {PercussivePitchIsActive[125] = false;}
//     if (Pitch == 126) {PercussivePitchIsActive[126] = false;}
//     if (Pitch == 127) {PercussivePitchIsActive[127] = false;}
//   }
// }

// void SoundEffectsChannelNoteOff(){
//   if (Channel ==   16) {
//     if (Pitch ==   0) {SoundEffectsPitchIsActive[0] = false;}
//     if (Pitch ==   1) {SoundEffectsPitchIsActive[1] = false;}
//     if (Pitch ==   2) {SoundEffectsPitchIsActive[2] = false;}
//     if (Pitch ==   3) {SoundEffectsPitchIsActive[3] = false;}
//     if (Pitch ==   4) {SoundEffectsPitchIsActive[4] = false;}
//     if (Pitch ==   5) {SoundEffectsPitchIsActive[5] = false;}
//     if (Pitch ==   6) {SoundEffectsPitchIsActive[6] = false;}
//     if (Pitch ==   7) {SoundEffectsPitchIsActive[7] = false;}
//     if (Pitch ==   8) {SoundEffectsPitchIsActive[8] = false;}
//     if (Pitch ==   9) {SoundEffectsPitchIsActive[9] = false;}
//     if (Pitch ==  10) {SoundEffectsPitchIsActive[10] = false;}
//     if (Pitch ==  11) {SoundEffectsPitchIsActive[11] = false;}
//     if (Pitch ==  12) {SoundEffectsPitchIsActive[12] = false;}
//     if (Pitch ==  13) {SoundEffectsPitchIsActive[13] = false;}
//     if (Pitch ==  14) {SoundEffectsPitchIsActive[14] = false;}
//     if (Pitch ==  15) {SoundEffectsPitchIsActive[15] = false;}
//     if (Pitch ==  16) {SoundEffectsPitchIsActive[16] = false;}
//     if (Pitch ==  17) {SoundEffectsPitchIsActive[17] = false;}
//     if (Pitch ==  18) {SoundEffectsPitchIsActive[18] = false;}
//     if (Pitch ==  19) {SoundEffectsPitchIsActive[19] = false;}
//     if (Pitch ==  20) {SoundEffectsPitchIsActive[20] = false;}
//     if (Pitch ==  21) {SoundEffectsPitchIsActive[21] = false;}
//     if (Pitch ==  22) {SoundEffectsPitchIsActive[22] = false;}
//     if (Pitch ==  23) {SoundEffectsPitchIsActive[23] = false;}
//     if (Pitch ==  24) {SoundEffectsPitchIsActive[24] = false;}
//     if (Pitch ==  25) {SoundEffectsPitchIsActive[25] = false;}
//     if (Pitch ==  26) {SoundEffectsPitchIsActive[26] = false;}
//     if (Pitch ==  27) {SoundEffectsPitchIsActive[27] = false;}
//     if (Pitch ==  28) {SoundEffectsPitchIsActive[28] = false;}
//     if (Pitch ==  29) {SoundEffectsPitchIsActive[29] = false;}
//     if (Pitch ==  30) {SoundEffectsPitchIsActive[30] = false;}
//     if (Pitch ==  31) {SoundEffectsPitchIsActive[31] = false;}
//     if (Pitch ==  32) {SoundEffectsPitchIsActive[32] = false;}
//     if (Pitch ==  33) {SoundEffectsPitchIsActive[33] = false;}
//     if (Pitch ==  34) {SoundEffectsPitchIsActive[34] = false;}
//     if (Pitch ==  35) {SoundEffectsPitchIsActive[35] = false;}
//     if (Pitch ==  36) {SoundEffectsPitchIsActive[36] = false;}
//     if (Pitch ==  37) {SoundEffectsPitchIsActive[37] = false;}
//     if (Pitch ==  38) {SoundEffectsPitchIsActive[38] = false;}
//     if (Pitch ==  39) {SoundEffectsPitchIsActive[39] = false;}
//     if (Pitch ==  40) {SoundEffectsPitchIsActive[40] = false;}
//     if (Pitch ==  41) {SoundEffectsPitchIsActive[41] = false;}
//     if (Pitch ==  42) {SoundEffectsPitchIsActive[42] = false;}
//     if (Pitch ==  43) {SoundEffectsPitchIsActive[43] = false;}
//     if (Pitch ==  44) {SoundEffectsPitchIsActive[44] = false;}
//     if (Pitch ==  45) {SoundEffectsPitchIsActive[45] = false;}
//     if (Pitch ==  46) {SoundEffectsPitchIsActive[46] = false;}
//     if (Pitch ==  47) {SoundEffectsPitchIsActive[47] = false;}
//     if (Pitch ==  48) {SoundEffectsPitchIsActive[48] = false;}
//     if (Pitch ==  49) {SoundEffectsPitchIsActive[49] = false;}
//     if (Pitch ==  50) {SoundEffectsPitchIsActive[50] = false;}
//     if (Pitch ==  51) {SoundEffectsPitchIsActive[51] = false;}
//     if (Pitch ==  52) {SoundEffectsPitchIsActive[52] = false;}
//     if (Pitch ==  53) {SoundEffectsPitchIsActive[53] = false;}
//     if (Pitch ==  54) {SoundEffectsPitchIsActive[54] = false;}
//     if (Pitch ==  55) {SoundEffectsPitchIsActive[55] = false;}
//     if (Pitch ==  56) {SoundEffectsPitchIsActive[56] = false;}
//     if (Pitch ==  57) {SoundEffectsPitchIsActive[57] = false;}
//     if (Pitch ==  58) {SoundEffectsPitchIsActive[58] = false;}
//     if (Pitch ==  59) {SoundEffectsPitchIsActive[59] = false;}
//     if (Pitch ==  60) {SoundEffectsPitchIsActive[60] = false;}
//     if (Pitch ==  61) {SoundEffectsPitchIsActive[61] = false;}
//     if (Pitch ==  62) {SoundEffectsPitchIsActive[62] = false;}
//     if (Pitch ==  63) {SoundEffectsPitchIsActive[63] = false;}
//     if (Pitch ==  64) {SoundEffectsPitchIsActive[64] = false;}
//     if (Pitch ==  65) {SoundEffectsPitchIsActive[65] = false;}
//     if (Pitch ==  66) {SoundEffectsPitchIsActive[66] = false;}
//     if (Pitch ==  67) {SoundEffectsPitchIsActive[67] = false;}
//     if (Pitch ==  68) {SoundEffectsPitchIsActive[68] = false;}
//     if (Pitch ==  69) {SoundEffectsPitchIsActive[69] = false;}
//     if (Pitch ==  70) {SoundEffectsPitchIsActive[70] = false;}
//     if (Pitch ==  71) {SoundEffectsPitchIsActive[71] = false;}
//     if (Pitch ==  72) {SoundEffectsPitchIsActive[72] = false;}
//     if (Pitch ==  73) {SoundEffectsPitchIsActive[73] = false;}
//     if (Pitch ==  74) {SoundEffectsPitchIsActive[74] = false;}
//     if (Pitch ==  75) {SoundEffectsPitchIsActive[75] = false;}
//     if (Pitch ==  76) {SoundEffectsPitchIsActive[76] = false;}
//     if (Pitch ==  77) {SoundEffectsPitchIsActive[77] = false;}
//     if (Pitch ==  78) {SoundEffectsPitchIsActive[78] = false;}
//     if (Pitch ==  79) {SoundEffectsPitchIsActive[79] = false;}
//     if (Pitch ==  80) {SoundEffectsPitchIsActive[80] = false;}
//     if (Pitch ==  81) {SoundEffectsPitchIsActive[81] = false;}
//     if (Pitch ==  82) {SoundEffectsPitchIsActive[82] = false;}
//     if (Pitch ==  83) {SoundEffectsPitchIsActive[83] = false;}
//     if (Pitch ==  84) {SoundEffectsPitchIsActive[84] = false;}
//     if (Pitch ==  85) {SoundEffectsPitchIsActive[85] = false;}
//     if (Pitch ==  86) {SoundEffectsPitchIsActive[86] = false;}
//     if (Pitch ==  87) {SoundEffectsPitchIsActive[87] = false;}
//     if (Pitch ==  88) {SoundEffectsPitchIsActive[88] = false;}
//     if (Pitch ==  89) {SoundEffectsPitchIsActive[89] = false;}
//     if (Pitch ==  90) {SoundEffectsPitchIsActive[90] = false;}
//     if (Pitch ==  91) {SoundEffectsPitchIsActive[91] = false;}
//     if (Pitch ==  92) {SoundEffectsPitchIsActive[92] = false;}
//     if (Pitch ==  93) {SoundEffectsPitchIsActive[93] = false;}
//     if (Pitch ==  94) {SoundEffectsPitchIsActive[94] = false;}
//     if (Pitch ==  95) {SoundEffectsPitchIsActive[95] = false;}
//     if (Pitch ==  96) {SoundEffectsPitchIsActive[96] = false;}
//     if (Pitch ==  97) {SoundEffectsPitchIsActive[97] = false;}
//     if (Pitch ==  98) {SoundEffectsPitchIsActive[98] = false;}
//     if (Pitch ==  99) {SoundEffectsPitchIsActive[99] = false;}
//     if (Pitch == 100) {SoundEffectsPitchIsActive[100] = false;}
//     if (Pitch == 101) {SoundEffectsPitchIsActive[101] = false;}
//     if (Pitch == 102) {SoundEffectsPitchIsActive[102] = false;}
//     if (Pitch == 103) {SoundEffectsPitchIsActive[103] = false;}
//     if (Pitch == 104) {SoundEffectsPitchIsActive[104] = false;}
//     if (Pitch == 105) {SoundEffectsPitchIsActive[105] = false;}
//     if (Pitch == 106) {SoundEffectsPitchIsActive[106] = false;}
//     if (Pitch == 107) {SoundEffectsPitchIsActive[107] = false;}
//     if (Pitch == 108) {SoundEffectsPitchIsActive[108] = false;}
//     if (Pitch == 109) {SoundEffectsPitchIsActive[109] = false;}
//     if (Pitch == 110) {SoundEffectsPitchIsActive[110] = false;}
//     if (Pitch == 111) {SoundEffectsPitchIsActive[111] = false;}
//     if (Pitch == 112) {SoundEffectsPitchIsActive[112] = false;}
//     if (Pitch == 113) {SoundEffectsPitchIsActive[113] = false;}
//     if (Pitch == 114) {SoundEffectsPitchIsActive[114] = false;}
//     if (Pitch == 115) {SoundEffectsPitchIsActive[115] = false;}
//     if (Pitch == 116) {SoundEffectsPitchIsActive[116] = false;}
//     if (Pitch == 117) {SoundEffectsPitchIsActive[117] = false;}
//     if (Pitch == 118) {SoundEffectsPitchIsActive[118] = false;}
//     if (Pitch == 119) {SoundEffectsPitchIsActive[119] = false;}
//     if (Pitch == 120) {SoundEffectsPitchIsActive[120] = false;}
//     if (Pitch == 121) {SoundEffectsPitchIsActive[121] = false;}
//     if (Pitch == 122) {SoundEffectsPitchIsActive[122] = false;}
//     if (Pitch == 123) {SoundEffectsPitchIsActive[123] = false;}
//     if (Pitch == 124) {SoundEffectsPitchIsActive[124] = false;}
//     if (Pitch == 125) {SoundEffectsPitchIsActive[125] = false;}
//     if (Pitch == 126) {SoundEffectsPitchIsActive[126] = false;}
//     if (Pitch == 127) {SoundEffectsPitchIsActive[127] = false;}
//   }
// }

// void PercussionChannelNoteOff(){
//   if (Channel ==   10) {
//     if (Pitch ==   0) {PercussionPitchIsActive[0] = false;}
//     if (Pitch ==   1) {PercussionPitchIsActive[1] = false;}
//     if (Pitch ==   2) {PercussionPitchIsActive[2] = false;}
//     if (Pitch ==   3) {PercussionPitchIsActive[3] = false;}
//     if (Pitch ==   4) {PercussionPitchIsActive[4] = false;}
//     if (Pitch ==   5) {PercussionPitchIsActive[5] = false;}
//     if (Pitch ==   6) {PercussionPitchIsActive[6] = false;}
//     if (Pitch ==   7) {PercussionPitchIsActive[7] = false;}
//     if (Pitch ==   8) {PercussionPitchIsActive[8] = false;}
//     if (Pitch ==   9) {PercussionPitchIsActive[9] = false;}
//     if (Pitch ==  10) {PercussionPitchIsActive[10] = false;}
//     if (Pitch ==  11) {PercussionPitchIsActive[11] = false;}
//     if (Pitch ==  12) {PercussionPitchIsActive[12] = false;}
//     if (Pitch ==  13) {PercussionPitchIsActive[13] = false;}
//     if (Pitch ==  14) {PercussionPitchIsActive[14] = false;}
//     if (Pitch ==  15) {PercussionPitchIsActive[15] = false;}
//     if (Pitch ==  16) {PercussionPitchIsActive[16] = false;}
//     if (Pitch ==  17) {PercussionPitchIsActive[17] = false;}
//     if (Pitch ==  18) {PercussionPitchIsActive[18] = false;}
//     if (Pitch ==  19) {PercussionPitchIsActive[19] = false;}
//     if (Pitch ==  20) {PercussionPitchIsActive[20] = false;}
//     if (Pitch ==  21) {PercussionPitchIsActive[21] = false;}
//     if (Pitch ==  22) {PercussionPitchIsActive[22] = false;}
//     if (Pitch ==  23) {PercussionPitchIsActive[23] = false;}
//     if (Pitch ==  24) {PercussionPitchIsActive[24] = false;}
//     if (Pitch ==  25) {PercussionPitchIsActive[25] = false;}
//     if (Pitch ==  26) {PercussionPitchIsActive[26] = false;}
//     if (Pitch ==  27) {PercussionPitchIsActive[27] = false;}
//     if (Pitch ==  28) {PercussionPitchIsActive[28] = false;}
//     if (Pitch ==  29) {PercussionPitchIsActive[29] = false;}
//     if (Pitch ==  30) {PercussionPitchIsActive[30] = false;}
//     if (Pitch ==  31) {PercussionPitchIsActive[31] = false;}
//     if (Pitch ==  32) {PercussionPitchIsActive[32] = false;}
//     if (Pitch ==  33) {PercussionPitchIsActive[33] = false;}
//     if (Pitch ==  34) {PercussionPitchIsActive[34] = false;}
//     if (Pitch ==  35) {PercussionPitchIsActive[35] = false;}
//     if (Pitch ==  36) {PercussionPitchIsActive[36] = false;}
//     if (Pitch ==  37) {PercussionPitchIsActive[37] = false;}
//     if (Pitch ==  38) {PercussionPitchIsActive[38] = false;}
//     if (Pitch ==  39) {PercussionPitchIsActive[39] = false;}
//     if (Pitch ==  40) {PercussionPitchIsActive[40] = false;}
//     if (Pitch ==  41) {PercussionPitchIsActive[41] = false;}
//     if (Pitch ==  42) {PercussionPitchIsActive[42] = false;}
//     if (Pitch ==  43) {PercussionPitchIsActive[43] = false;}
//     if (Pitch ==  44) {PercussionPitchIsActive[44] = false;}
//     if (Pitch ==  45) {PercussionPitchIsActive[45] = false;}
//     if (Pitch ==  46) {PercussionPitchIsActive[46] = false;}
//     if (Pitch ==  47) {PercussionPitchIsActive[47] = false;}
//     if (Pitch ==  48) {PercussionPitchIsActive[48] = false;}
//     if (Pitch ==  49) {PercussionPitchIsActive[49] = false;}
//     if (Pitch ==  50) {PercussionPitchIsActive[50] = false;}
//     if (Pitch ==  51) {PercussionPitchIsActive[51] = false;}
//     if (Pitch ==  52) {PercussionPitchIsActive[52] = false;}
//     if (Pitch ==  53) {PercussionPitchIsActive[53] = false;}
//     if (Pitch ==  54) {PercussionPitchIsActive[54] = false;}
//     if (Pitch ==  55) {PercussionPitchIsActive[55] = false;}
//     if (Pitch ==  56) {PercussionPitchIsActive[56] = false;}
//     if (Pitch ==  57) {PercussionPitchIsActive[57] = false;}
//     if (Pitch ==  58) {PercussionPitchIsActive[58] = false;}
//     if (Pitch ==  59) {PercussionPitchIsActive[59] = false;}
//     if (Pitch ==  60) {PercussionPitchIsActive[60] = false;}
//     if (Pitch ==  61) {PercussionPitchIsActive[61] = false;}
//     if (Pitch ==  62) {PercussionPitchIsActive[62] = false;}
//     if (Pitch ==  63) {PercussionPitchIsActive[63] = false;}
//     if (Pitch ==  64) {PercussionPitchIsActive[64] = false;}
//     if (Pitch ==  65) {PercussionPitchIsActive[65] = false;}
//     if (Pitch ==  66) {PercussionPitchIsActive[66] = false;}
//     if (Pitch ==  67) {PercussionPitchIsActive[67] = false;}
//     if (Pitch ==  68) {PercussionPitchIsActive[68] = false;}
//     if (Pitch ==  69) {PercussionPitchIsActive[69] = false;}
//     if (Pitch ==  70) {PercussionPitchIsActive[70] = false;}
//     if (Pitch ==  71) {PercussionPitchIsActive[71] = false;}
//     if (Pitch ==  72) {PercussionPitchIsActive[72] = false;}
//     if (Pitch ==  73) {PercussionPitchIsActive[73] = false;}
//     if (Pitch ==  74) {PercussionPitchIsActive[74] = false;}
//     if (Pitch ==  75) {PercussionPitchIsActive[75] = false;}
//     if (Pitch ==  76) {PercussionPitchIsActive[76] = false;}
//     if (Pitch ==  77) {PercussionPitchIsActive[77] = false;}
//     if (Pitch ==  78) {PercussionPitchIsActive[78] = false;}
//     if (Pitch ==  79) {PercussionPitchIsActive[79] = false;}
//     if (Pitch ==  80) {PercussionPitchIsActive[80] = false;}
//     if (Pitch ==  81) {PercussionPitchIsActive[81] = false;}
//     if (Pitch ==  82) {PercussionPitchIsActive[82] = false;}
//     if (Pitch ==  83) {PercussionPitchIsActive[83] = false;}
//     if (Pitch ==  84) {PercussionPitchIsActive[84] = false;}
//     if (Pitch ==  85) {PercussionPitchIsActive[85] = false;}
//     if (Pitch ==  86) {PercussionPitchIsActive[86] = false;}
//     if (Pitch ==  87) {PercussionPitchIsActive[87] = false;}
//     if (Pitch ==  88) {PercussionPitchIsActive[88] = false;}
//     if (Pitch ==  89) {PercussionPitchIsActive[89] = false;}
//     if (Pitch ==  90) {PercussionPitchIsActive[90] = false;}
//     if (Pitch ==  91) {PercussionPitchIsActive[91] = false;}
//     if (Pitch ==  92) {PercussionPitchIsActive[92] = false;}
//     if (Pitch ==  93) {PercussionPitchIsActive[93] = false;}
//     if (Pitch ==  94) {PercussionPitchIsActive[94] = false;}
//     if (Pitch ==  95) {PercussionPitchIsActive[95] = false;}
//     if (Pitch ==  96) {PercussionPitchIsActive[96] = false;}
//     if (Pitch ==  97) {PercussionPitchIsActive[97] = false;}
//     if (Pitch ==  98) {PercussionPitchIsActive[98] = false;}
//     if (Pitch ==  99) {PercussionPitchIsActive[99] = false;}
//     if (Pitch == 100) {PercussionPitchIsActive[100] = false;}
//     if (Pitch == 101) {PercussionPitchIsActive[101] = false;}
//     if (Pitch == 102) {PercussionPitchIsActive[102] = false;}
//     if (Pitch == 103) {PercussionPitchIsActive[103] = false;}
//     if (Pitch == 104) {PercussionPitchIsActive[104] = false;}
//     if (Pitch == 105) {PercussionPitchIsActive[105] = false;}
//     if (Pitch == 106) {PercussionPitchIsActive[106] = false;}
//     if (Pitch == 107) {PercussionPitchIsActive[107] = false;}
//     if (Pitch == 108) {PercussionPitchIsActive[108] = false;}
//     if (Pitch == 109) {PercussionPitchIsActive[109] = false;}
//     if (Pitch == 110) {PercussionPitchIsActive[110] = false;}
//     if (Pitch == 111) {PercussionPitchIsActive[111] = false;}
//     if (Pitch == 112) {PercussionPitchIsActive[112] = false;}
//     if (Pitch == 113) {PercussionPitchIsActive[113] = false;}
//     if (Pitch == 114) {PercussionPitchIsActive[114] = false;}
//     if (Pitch == 115) {PercussionPitchIsActive[115] = false;}
//     if (Pitch == 116) {PercussionPitchIsActive[116] = false;}
//     if (Pitch == 117) {PercussionPitchIsActive[117] = false;}
//     if (Pitch == 118) {PercussionPitchIsActive[118] = false;}
//     if (Pitch == 119) {PercussionPitchIsActive[119] = false;}
//     if (Pitch == 120) {PercussionPitchIsActive[120] = false;}
//     if (Pitch == 121) {PercussionPitchIsActive[121] = false;}
//     if (Pitch == 122) {PercussionPitchIsActive[122] = false;}
//     if (Pitch == 123) {PercussionPitchIsActive[123] = false;}
//     if (Pitch == 124) {PercussionPitchIsActive[124] = false;}
//     if (Pitch == 125) {PercussionPitchIsActive[125] = false;}
//     if (Pitch == 126) {PercussionPitchIsActive[126] = false;}
//     if (Pitch == 127) {PercussionPitchIsActive[127] = false;}
//   }
// }


